package com.rongke.rediscluster;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.rongke.utils.SerializerUtil;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.DataAccessException;import org.springframework.data.redis.connection.RedisConnection;import org.springframework.data.redis.core.RedisCallback;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.core.StringRedisTemplate;import org.springframework.stereotype.Component;import java.io.Serializable;import java.util.Set;import java.util.concurrent.TimeUnit;/** * Created by bilibili on 2017/8/14. */@Componentpublic class CacheUtilImpl implements CacheUtil {    @Autowired    private StringRedisTemplate stringRedisTemplate;//redis操作模板    @Autowired    private RedisTemplate<Serializable, Serializable> redisTemplate;    public void put(String key, String value) {        if (key==null || "".equals(key)) {            return;        }        stringRedisTemplate.opsForHash().put(key, key, value);    }    /**     * 添加缓存数据     * @param key     * @param obj     * @param <T>     * @return     * @throws Exception     */    public <T> boolean putCache(String key, T obj) throws Exception {        final byte[] bkey = key.getBytes();        final byte[] bvalue = SerializerUtil.serializeObj(obj);        boolean result = redisTemplate.execute(new RedisCallback<Boolean>() {            public Boolean doInRedis(RedisConnection connection) throws DataAccessException {                return connection.setNX(bkey, bvalue);            }        });        return result;    }    /**     * 根据key取缓存数据     * @param key     * @param <T>     * @return     * @throws Exception     */    public <T> T getCache(final String key) throws Exception {        byte[] result = redisTemplate.execute(new RedisCallback<byte[]>() {            @Override            public byte[] doInRedis(RedisConnection connection) throws DataAccessException {                return connection.get(key.getBytes());            }        });        if (result == null) {            return null;        }        return (T) SerializerUtil.deserializeObj(result);    }    /**     * 向一张hash表中放入数据,如果不存在将创建     * @param key 键     * @param item 项     * @param value 值     * @return true 成功 false失败     */    public boolean hset(String key,String item,Object value) {        try {            redisTemplate.opsForHash().put(key, item, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 向一张hash表中放入数据,如果不存在将创建     * @param key 键     * @param item 项     * @param value 值     * @param time 时间(秒)  注意:如果已存在的hash表有时间,这里将会替换原有的时间     * @return true 成功 false失败     */    public boolean hset(String key,String item,Object value,long time) {        try {            redisTemplate.opsForHash().put(key, item, value);            if(time>0){                expire(key, time);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * HashGet     * @param key 键 不能为null     * @param item 项 不能为null     * @return 值     */    public Object hget(String key,String item){        return redisTemplate.opsForHash().get(key, item);    }    /**     * 判断hash表中是否有该项的值     * @param key 键 不能为null     * @param item 项 不能为null     * @return true 存在 false不存在     */    public boolean hHasKey(String key, String item) {        return redisTemplate.opsForHash().hasKey(key, item);    }    /**     * 删除hash表中某建对应项的值     * @param key 键 不能为null     * @param item 项 不能为null     * @return true 存在 false不存在     */    @Override    public void delHasKey(String key, String item) {        redisTemplate.opsForHash().delete(key, item);    }    public String get(String key) {//        return stringRedisTemplate.boundValueOps(key).get();        return stringRedisTemplate.opsForValue().get(key);    }    public void sendString(String key,Integer time) {        try {            stringRedisTemplate.boundValueOps(key).set(key, time, TimeUnit.SECONDS);        } catch (Exception ex) {            ex.printStackTrace();        }    }    public String getString(String key) {        String temp=null;        try {            temp =(String) stringRedisTemplate.opsForHash().get(key, key);        } catch (Exception ex) {            ex.printStackTrace();        }        return temp;    }    /**     * 取得缓存（字符串类型）     * @param key     * @return     */    public  String getStr(String key, boolean retain){        String value = stringRedisTemplate.boundValueOps(key).get();        if(!retain){            stringRedisTemplate.delete(key);        }        return value;    }    public  boolean hasKey(String key){        if(key==null){            return false;        }        return  stringRedisTemplate.hasKey(key);    }    public  void  delkey(String key){        stringRedisTemplate.delete(key);    }    /**     * 将value对象写入缓存     * @param key     * @param value     * @param timeout 失效时间(秒)     */    public  void set(String key,Object value,final long timeout){        stringRedisTemplate.opsForValue().set(key, value.toString());        if(timeout> 0){//            stringRedisTemplate.boundValueOps(key).set(key, time, TimeUnit.SECONDS);            stringRedisTemplate.expire(key, timeout, TimeUnit.SECONDS);        }    }    /**     * 将value对象以JSON格式写入缓存     * @param key     * @param value     * @param time 失效时间(秒)     */    public  void setJson(String key,Object value,Integer time){        stringRedisTemplate.opsForValue().set(key, JSONObject.toJSONString(value));        if(time> 0){            stringRedisTemplate.expire(key, time, TimeUnit.SECONDS);        }    }    /**     * 更新key对象field的值     * @param key   缓存key     * @param field 缓存对象field     * @param value 缓存对象field值     */    public  void setJsonField(String key, String field, String value){        JSONObject obj = JSON.parseObject(stringRedisTemplate.boundValueOps(key).get());        obj.put(field, value);        stringRedisTemplate.opsForValue().set(key, obj.toJSONString());    }    /**     * @param key   缓存key     * @param value 缓存对象set 集合     */    public  void addSet(String key,String ...  value){        stringRedisTemplate.boundSetOps(key).add(value);    }    @Override    public void removeFromSet(String key, String... value) {        stringRedisTemplate.boundSetOps(key).remove(value);    }    /**     * @param key   缓存key     */    public Set getSet(String key){        return   stringRedisTemplate.opsForSet().members(key);    }    /**     * 指定缓存失效时间     * @param key 键     * @param time 时间(秒)     * @return     */    public boolean expire(String key,long time){        try {            if(time>0){                redisTemplate.expire(key, time, TimeUnit.SECONDS);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }}