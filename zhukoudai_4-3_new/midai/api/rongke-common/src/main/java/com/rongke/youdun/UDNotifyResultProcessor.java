package com.rongke.youdun;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.rongke.utils.HttpClientUtil;import com.rongke.youdun.utils.MD5Utils;import org.apache.commons.httpclient.util.URIUtil;import org.apache.http.HttpResponse;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.methods.HttpPost;import org.apache.http.entity.StringEntity;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClientBuilder;import org.apache.http.util.EntityUtils;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.Random;/** * Created by bin on 2017/11/13. */public class UDNotifyResultProcessor {    /**     * TODO 获取商户开户的 pub_key     *///    public static final String PUB_KEY = "07aea5d9-0160-4ee4-9f57-e2c8d3e9de72"; //8ae2a1fd-530f-4141-a527-adf948d6501c    /**     * TODO 获取商户开户的 security_key     *///    public static final String SECURITY_KEY = "8e24baa3-f59d-46dd-970a-2fba1f93f81e"; //b85fb58e-0e0b-427f-ab5b-9aac815658ee    public static final String CHARSET_UTF_8 = "UTF-8";    public static final boolean IS_DEBUG = true;    //商品编号//    static final String product_code = "Y1001005";////    static final String product_url = "https://api4.udcredit.com";    private static String fformatStr = "/dsp-front/4.1/dsp-front/default/pubkey/%s/product_code/%s/out_order_id/%s/signature/%s";    /**     * @param partnerOrderId 商户订单号     * @param signTime 签名时间     * @param pubKey 公钥     * @param securityKey 私钥     */    public static String getMD5Sign (String partnerOrderId, String signTime,String pubKey,String securityKey) {        String signStr = String.format("pub_key=%s|partner_order_id=%s|sign_time=%s|security_key=%s", pubKey, partnerOrderId, signTime, securityKey);        System.out.println("测试输入签名 signField："+ signStr);        return MD5Utils.MD5Encrpytion(signStr);    }    /**     * 接收实名认证异步通知     */    public void process(HttpServletRequest request, HttpServletResponse response) throws            IOException {        final JSONObject reqObject = getRequestJson(request);        JSONObject respJson = new JSONObject();        //验签        String sign = reqObject.getString("sign");        String sign_time = reqObject.getString("signTime");        String partner_order_id = reqObject.getString("partnerOrderId");        String pubKey = reqObject.getString("pubKey");        String securityKey = reqObject.getString("securityKey");        System.out.println("sign：" + sign);        String signMD5 = getMD5Sign(partner_order_id, sign_time,pubKey,securityKey);        System.out.println("signMD5：" + signMD5);        if (!sign.equals(signMD5)) {            System.err.println("异步通知签名错误");            respJson.put("code", "0");            respJson.put("message", "签名错误");        } else {            System.out.print("收到商户异步通知");            respJson.put("code", "1");            respJson.put("message", "收到通知");            //TODO 异步执行商户自己的业务逻辑(以免阻塞返回导致通知多次)            Thread asyncThread = new Thread("asyncDataHandlerThread") {                public void run() {                    System.out.println("异步执行商户自己的业务逻辑...");                    try {                        String id_name = reqObject.getString("id_name");                        String id_number = reqObject.getString("id_number");                        System.out.println(id_name + "：" + id_number);                    } catch (Exception e) {                        e.printStackTrace();                    }                }            };            asyncThread.start();        }        System.out.println("返回结果：" + respJson.toJSONString());        //返回结果        response.setCharacterEncoding(CHARSET_UTF_8);        response.setContentType("application/json; charset=utf-8");        response.getOutputStream().write(respJson.toJSONString().getBytes(CHARSET_UTF_8));    }    /**     * 获取请求 json 对象     */    public static JSONObject getRequestJson(HttpServletRequest request) throws IOException {        InputStream in = request.getInputStream();        byte[] b = new byte[10240];        int len;        ByteArrayOutputStream baos = new ByteArrayOutputStream();        while ((len = in.read(b)) > 0) {            baos.write(b, 0, len);        }        String bodyText = new String(baos.toByteArray(), CHARSET_UTF_8);        JSONObject json = (JSONObject) JSONObject.parse(bodyText);        if (IS_DEBUG) {            System.out.println("received notify message:");            System.out.println(JSON.toJSONString(json, true));        }        return json;    }    /**     *     * @param parms 有盾四要素 json字符串     * @param pubKey 公钥     * @param securityKey 私钥     * @return     * @throws NoSuchAlgorithmException     */    public static JSONObject youDunBank4(String parms,String pubKey,String securityKey) throws NoSuchAlgorithmException {        Random random = new Random();        String orderId = new Date().getTime()+""+random.nextInt();        String sign = md5(parms+"|"+securityKey);        String url = "https://api4.udcredit.com/dsp-front/4.1/dsp-front/default/pubkey/"+pubKey+"/product_code/O1001S0401/out_order_id/"+orderId+"/signature/"+sign;        String result = HttpClientUtil.sendPostSSLRequest(url,parms,"UTF-8","application/json");        return JSON.parseObject(result);    }    /**     *     * @param idNo  身份证号     * @param idName 名字     * @param pubKey 公钥     * @param securityKey 私钥     * @param productCode 商品编号     * @param productUrl 地址     */    public static String apiCall(String idNo,String idName,String pubKey,String securityKey,String productCode ,String productUrl) throws Exception {        if (idNo == null || idNo.isEmpty() || idName == null || idName.isEmpty())            throw new Exception("error ! the parameter Map can't be null.");        StringBuffer bodySb = new StringBuffer("{");        Map<String, String> parameter = new HashMap<>();        parameter.put("id_no",idNo);        parameter.put("id_name",idName);        for (Map.Entry<String, String> entry : parameter.entrySet()) {            bodySb.append("'").append(entry.getKey()).append("':'").append(entry.getValue()).                    append("',");        }        String bodyStr = bodySb.substring(0, bodySb.length() - 1) + "}";        String signature = md5(bodyStr + "|" + securityKey);        String url = productUrl+String.format(fformatStr, pubKey, productCode,                System.currentTimeMillis() + "", signature);        System.out.println("requestUrl=>" + url);        System.out.println("request parameter body=>" + bodyStr);        HttpResponse r = makePostRequest(url, bodyStr);        return EntityUtils.toString(r.getEntity());    }    private static final CloseableHttpClient client = HttpClientBuilder.create().build();    private static HttpResponse makePostRequest(String uri, String jsonData)            throws ClientProtocolException, IOException {        HttpPost httpPost = new HttpPost(URIUtil.encodeQuery(uri, "utf-8"));        httpPost.setEntity(new StringEntity(jsonData, "UTF-8"));        httpPost.setHeader("Accept", "application/json");        httpPost.setHeader("Content-type", "application/json; charset=utf-8");        return client.execute(httpPost);    }    private static String md5(String data) throws NoSuchAlgorithmException {        MessageDigest md = MessageDigest.getInstance("MD5");        md.update(data.toString().getBytes());        return bytesToHex(md.digest());    }    private static String bytesToHex(byte[] ch) {        StringBuffer ret = new StringBuffer("");        for (int i = 0; i < ch.length; i++)            ret.append(byteToHex(ch[i]));        return ret.toString();    }    /**     * 字节转换为16进制字符串     */    private static String byteToHex(byte ch) {        String str[] = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E",                "F" };        return str[ch >> 4 & 0xF] + str[ch & 0xF];    }}