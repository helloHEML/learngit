<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.rongke.mapper.AdminMapper">    <resultMap type="com.rongke.model.Admin" id="rmAdmin">        <id property="id" column="id" />        <result property="loginName" column="loginName"/>        <result property="password" column="password"/>        <result property="name" column="name"/>        <result property="token" column="token"/>        <result property="gmtDatetime" column="gmtDatetime"/>        <result property="uptDatetime" column="uptDatetime"/>        <result property="adminRoleId" column="adminRoleId"/>        <association property="adminRole" javaType="com.rongke.model.AdminRole" >            <id property="id" column="adminRole_id" />        </association>    </resultMap>    <resultMap type="com.rongke.model.Admin" id="mAdmin">        <id property="id" column="admin_id" />        <result property="loginName" column="admin_loginName"/>        <result property="password" column="admin_password"/>        <result property="name" column="admin_name"/>        <result property="token" column="admin_token"/>        <result property="gmtDatetime" column="admin_gmtDatetime"/>        <result property="uptDatetime" column="admin_uptDatetime"/>        <result property="adminRoleId" column="admin_adminRoleId"/>        <association property="adminRole" javaType="com.rongke.model.AdminRole" >            <id property="id" column="adminRole_id" />            <result property="type" column="adminRole_type"/>        </association>    </resultMap>    <sql id="mAdminPkSql">        admin.id AS admin_id,        admin.login_name AS admin_loginName,        admin.password AS admin_password,        admin.name AS admin_name,        admin.token AS admin_token,        admin.gmt_datetime AS admin_gmtDatetime,        admin.upt_datetime AS admin_uptDatetime,        admin.admin_role_id AS admin_adminRoleId    </sql>    <sql id="mAdminSql">        id AS id,        login_name AS loginName,        password AS password,        name AS name,        token AS token,        gmt_datetime AS gmtDatetime,        upt_datetime AS uptDatetime,        admin_role_id AS adminRoleId    </sql>    <select id="selectByCondition" parameterType="Admin" resultMap="rmAdmin">        select        <include refid="mAdminSql"></include>        from admin        <where>            <if test="id!= null">                AND id=#{id}            </if>            <if test="loginName!= null">                AND login_name=#{loginName}            </if>            <if test="password!= null">                AND password=#{password}            </if>            <if test="name!= null">                AND name=#{name}            </if>            <if test="token!= null">                AND token=#{token}            </if>            <if test="gmtDatetime!= null">                AND gmt_datetime=#{gmtDatetime}            </if>            <if test="uptDatetime!= null">                AND upt_datetime=#{uptDatetime}            </if>            <if test="adminRoleId!= null">                AND admin_role_id=#{adminRoleId}            </if>        </where>    </select>    <select id="selectAdminPermissionList" parameterType="java.lang.String" resultType="java.lang.String">        SELECT        DISTINCT percode        FROM        admin_permission,admin_role_permission        WHERE        admin_permission.id=admin_role_permission.admin_permission_id        AND admin_permission.percode IS NOT NULL        AND admin_role_permission.admin_role_id=#{roleId}    </select>    <select id="getAdminList" parameterType="java.lang.String" resultType="java.util.Map">        SELECT        a.id,        a.login_name AS  loginName,        a.password,        a.status,        a.name,        a.token,        DATE_FORMAT(a.gmt_datetime,'%Y-%m-%d %h:%i:%s') AS  gmtDatetime,        DATE_FORMAT(a.upt_datetime,'%Y-%m-%d %h:%i:%s') AS  uptDatetime,        b.name AS roleName,        b.available        FROM        admin a,        admin_role b        WHERE a.admin_role_id = b.id        <if test="_parameter.containsKey('startIndex')">            limit #{startIndex},#{size}        </if>    </select>    <select id="getAdminListSize" parameterType="java.lang.String" resultType="java.lang.Integer">        SELECT         COUNT(1)        FROM        admin a,        admin_role b        WHERE a.admin_role_id = b.id    </select>    <select id="selectAdminList" parameterType="java.lang.String" resultType="java.util.Map">        select        admin.id,        admin.name        FROM        admin,admin_role        WHERE        admin.admin_role_id=admin_role.id        <if test="type!=null and type!=''">            and   admin_role.type=#{type}        </if>        <if test="status!=null and status!=''">            and  admin.status=#{status}        </if>    </select>    <select id="selectAdmin" parameterType="java.lang.String" resultMap="mAdmin">        SELECT        <include refid="mAdminPkSql"></include>        ,        admin_role.type AS adminRole_type,        admin_role.id AS adminRole_id        FROM        admin ,admin_role        WHERE        admin.admin_role_id=admin_role.id        <if test="loginName!=null and loginName!=''">            and admin.login_name=#{loginName}        </if>    </select>    <select id="adminEvaCountPage" resultType="map">        select            b.date,            a.`name`,            a.loginName,            b.`fp`,            b.`dsh`,            b.`shtg`,            b.`shjj`,            b.`dkjj`,            b.`ddk`,            b.`ydk`,            b.`jdz`,            b.`qz`,            b.`wj`        from (            select            a.id,            r.name as 'rname',            a.`name`,            a.login_name as 'loginName'            from admin a LEFT JOIN admin_role r on r.id = a.admin_role_id            where r.type = 1        )a LEFT JOIN (            select                DATE_FORMAT(e.gmt_datetime,'%Y-%m-%d') as 'date',                e.auditor_id,                count(case when e.`status`!='申请中' then e.id else null end) as 'fp',                count(case when e.`status`='待审核' then e.`id` else null end)as 'dsh',                count(case when e.`status`='待打款' or e.`status`='已打款' or e.`status`='已完结' or e.`status`='拒绝' then e.id else null END) as 'shtg',                count(case when e.`status`='审核失败' then e.id else null END) as 'shjj',                count(case when e.`status`='拒绝' then e.id else null END) as 'dkjj',                count(case when e.`status`='待打款' then e.id else null END) as 'ddk',                count(case when e.`status`='已打款' or e.`status`='已完结' then e.id else null END) as 'ydk',                count(case when DATEDIFF(o.upt_datetime,NOW())>=-1 and o.`status`!='已完结' then e.id else null end) as 'jdz',                count(case when DATEDIFF(o.upt_datetime,NOW())&lt;-1 and o.`status`!='已完结'	then e.id else null end) as 'qz',                count(case when e.`status`='已完结' and o.`status` = '已完结' then e.id else null END)as 'wj'            from evaluation e LEFT JOIN orders o on e.id = o.evaluation_id where e.auditor_id is not null            GROUP BY e.auditor_id,DATE_FORMAT(e.gmt_datetime,'%Y-%m-%d') order by date DESC,auditor_id        )b on a.id = b.auditor_id        <where>            ${ew.sqlSegment}        </where>        ORDER BY date DESC,a.id    </select>    <select id="evaCount" resultType="com.rongke.model.Admin">        select a.id as id,a.name as name,count(e.id) as haveCount        from admin a LEFT JOIN (select id,auditor_id  from evaluation WHERE status='待审核') e on a.id = e.auditor_id         LEFT JOIN admin_role r on a.admin_role_id = r.id        <where>            ${ew.sqlSegment}        </where>    </select>    <select id="payAdminCount" resultType="com.rongke.model.Admin">        select a.id as id,a.name as name,count(case when e.`status`='待打款' then e.id else null END) as haveCount from admin a LEFT JOIN admin_role r on a.admin_role_id = r.id LEFT JOIN evaluation e on a.id = e.admin_id        <where>            ${ew.sqlSegment}        </where>    </select></mapper>