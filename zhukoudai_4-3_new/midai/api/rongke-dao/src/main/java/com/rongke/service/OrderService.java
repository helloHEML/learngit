package com.rongke.service;import com.baomidou.mybatisplus.service.IService;import com.rongke.model.Evaluation;import com.rongke.model.Order;import com.rongke.model.OrderSum;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.R;import java.math.BigDecimal;import java.util.List;import java.util.Map;/** * @OrderService * @订单Service * @version : Ver 1.0 */public interface OrderService extends IService<Order>{    List<Order> selectByCondition(Order order);    List<Order> selectOrderPage(Map selectmap);    Integer selectOrderPageSize(Map selectmap);    List<Order> selectOrderNotPage(Map map);    /**     * 获得订单现在的状态     */    Order orderStatus(Map<String,Object> params);    /**     * 根据天数计算出应还款金额     * @param orderId 订单id     * @param days 还款天数     * @return     */    Order selectPayOrder(Long orderId, Integer days);    /*     * 查询上一笔订单分配的催款员     * @return     */    Integer selectLastCollectionAdminId();    /**     * 根据订单获得最新状态以及要还金额     * 申请单需要存在     */    void orderStatusFilter(Order order);    /**     * 查询所有当天需要支付的订单列表     * @return     */    List<Order> selectNeedPayOrdersList();    /**     * 查询扣款失败的订单列表     * @return     */    List<Order> selectPayFailOrderList();    /**     * 查询当天扣款失败的订单列表     * @return     */    List<Order> selectPayFailOrderListToday();    BigDecimal selectOverTimeMoney(Long orderId);    /**     * 手动增加续期天数     */    R orderRenewal(Long orderId,String number);    /**     * 查询所有订单列表     */    PageUtils orderPage(Map<String,Object> params);    /**     * 订单统计 （数据权限）卡片使用     */    R orderAdminTJ(Map<String,Object> params);    /**     * 订单总统计 用于曲线图     *  TODO     */    R orderStatistics(Map<String,Object> params);    /**     * 催收手动分配     */    R collectionUrge(Map<String,Object> params);    /**     * 报表统计     * */    OrderSum orderCount();    /**     * 报表统计     * */    PageUtils orderSelectAll(Map params);//    /**//     * 更新其余字段//     *///    void updateOther(Order order);////    /**//     * 更新代扣状态//     *///    void updateDaikou(Order order);}