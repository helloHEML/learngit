package com.rongke.service.impl.ans.usr;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.mapper.Wrapper;import com.baomidou.mybatisplus.plugins.Page;import com.google.common.collect.Lists;import com.rongke.alipayUtil.PayUtils;import com.rongke.commons.FailException;import com.rongke.commons.JsonCodeEnum;import com.rongke.model.ans.TblAccountEntity;import com.rongke.model.ans.UserDebitEntity;import com.rongke.model.ans.WxBandcardEntity;import com.rongke.service.ans.sys.TblAccountService;import com.rongke.service.ans.sys.UserDebitService;import com.rongke.service.ans.sys.WxBandcardService;import com.rongke.service.ans.usr.WeChatUserService;import com.rongke.service.impl.ans.utils.UserDebitUtils;import com.rongke.utils.RequestUtil;import com.rongke.utils.ans.*;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.servlet.http.HttpServletRequest;import java.math.BigDecimal;import java.util.*;@Servicepublic class WeChatUserServiceImpl implements WeChatUserService {    @Autowired    private TblAccountService tblAccountService;//用户表操作    @Autowired    private UserDebitService userDebitService;//借条操作    @Autowired    private WxBandcardService wxBandcardService;//银行卡操作    /**     * 根据ID 获得个人信用     */    public R WeChatCredit(String accountID){        Wrapper<UserDebitEntity> where = new EntityWrapper<UserDebitEntity>();        //获得所有用户借款列表        //借入记录        List<UserDebitEntity> borrow = userDebitService.selectList(new EntityWrapper<UserDebitEntity>()                .where("type={0} and WeChatUser_ID ={1} or (type={2} and targetId ={3} )"                        , "1", accountID, "2", accountID).in("debitStatus", new Object[]{2,4})                .orderDesc(Arrays.asList("create_time")));        //借出记录        List<UserDebitEntity> lend = userDebitService.selectList(new EntityWrapper<UserDebitEntity>()                .where("type={0} and targetId ={1} or (type={2} and  WeChatUser_ID={3})"                        , "1", accountID, "2", accountID).in("debitStatus", new Object[]{2,4})                .orderDesc(Arrays.asList("create_time")));        return R.ok().put("data", UserDebitUtils.Credit(borrow, lend));    }    /**     *  获得个人借款条  isType 不传递借入  传递借出     */    public PageUtils userDebit(Map<String, Object> params,TblAccountEntity account) {        Wrapper<UserDebitEntity> where = new EntityWrapper<UserDebitEntity>();        if(StringUtils.isBlank((String)params.get("isType"))|| "1".equals((String)params.get("isType"))){            //借入记录            where .where("type={0} and WeChatUser_ID ={1} or (type={2} and targetId ={3} )"                    , "1", params.get("accountID"), "2", params.get("accountID"));        }else if("2".equals((String)params.get("isType"))){            //借出记录            where .where("type={0} and targetId ={1} or (type={2} and  WeChatUser_ID={3} )"                    , "1", params.get("accountID"), "2", params.get("accountID"));        }else{            //借入记录            where .where("(type={0} and WeChatUser_ID ={1} or (type={2} and targetId ={3} )) and surplus_time is null and DATEDIFF(NOW(),end_time)>0"                    , "1", params.get("accountID"), "2", params.get("accountID"));        }//        where.in("debitStatus", new Object[]{2,4});//只算确认以及还款中        where.orderDesc(Arrays.asList("create_time"));//排序        //根据条件查询        Page<UserDebitEntity> userDebitEntityPage = userDebitService.selectPage(new Query<UserDebitEntity>(params).getPage(),where);        //获得对象之后更新最新封装最新的应付记录        List<UserDebitEntity> records = userDebitEntityPage.getRecords();        usrURL(records,account);//设置头像        return new PageUtils(userDebitEntityPage);    }    /**     *  获得个人借款条所有借条未完成金额 以及借出金额     */    public BigDecimal userDebitMoney(Map<String, Object> params) {        BigDecimal money = new BigDecimal("0");        Wrapper<UserDebitEntity> where = new EntityWrapper<UserDebitEntity>();        if(StringUtils.isBlank((String)params.get("isType"))){            //借入记录            where .where("(type={0} and WeChatUser_ID ={1}  or (type={2} and targetId ={3})) and debitStatus = {4}"                    , "1", params.get("accountID"), "2", params.get("accountID"),2);        }else{            //借出记录            where .where("type={0} and targetId ={1} or (type={2} and  WeChatUser_ID={3} ) and debitStatus = {4}"                    , "1", params.get("accountID"), "2", params.get("accountID"),2);        }        where.orderDesc(Arrays.asList("create_time"));//排序        //根据条件查询        List<UserDebitEntity> userDebitEntities = userDebitService.selectList(where);        if(!userDebitEntities.isEmpty()){            for (UserDebitEntity ud:userDebitEntities){                if(ud.getHuankuan()!=null){                    if(ud.getDebitstatus()==2||ud.getDebitstatus()==4){                        money = money.add(ud.getSurplusMoney());                    }                }            }        }        //获得对象之后更新最新封装最新的应付记录//        List<UserDebitEntity> records = userDebitEntityPage.getRecords();        System.err.println(money.setScale(2).toString());        return money.setScale(2);    }    /**     * 用户微信用户信息     */    public TblAccountEntity selectWechatUser() {        HttpServletRequest request = RequestUtil.getRequest();        String openid = request.getHeader("x-client-openid");        if(StringUtils.isBlank(openid)){            openid = request.getParameter("openid");        }        if(StringUtils.isBlank(openid)){            throw  new FailException(JsonCodeEnum.OPENIDERROR.getMessage());        }        TblAccountEntity account_openID = tblAccountService.selectOne(new EntityWrapper<TblAccountEntity>().                eq("Account_OpenID", openid));        if(account_openID==null){            throw  new FailException(JsonCodeEnum.OVERTIME.getMessage());        }        return account_openID;    }    /**     * 设置支付密码     * @param payPass     * @return     */    public R SetPayPass(String payPass) {        TblAccountEntity tblAccountEntity = selectWechatUser();        boolean b = false;        tblAccountEntity.setAccountPaypass(payPass);        b = tblAccountService.updateById(tblAccountEntity);        if(b){            return R.ok("设置成功");        }else{            return R.error("设置失败");        }    }    /**     * 重置密码     */    public R ResetPayPass(String JpayPass, String XpayPass) {        TblAccountEntity tblAccountEntity = selectWechatUser();        boolean b = false;        if(tblAccountEntity.getAccountPaypass().equals(JpayPass)){            tblAccountEntity.setAccountPaypass(XpayPass);            b = tblAccountService.updateById(tblAccountEntity);        }        if(b){            return R.ok("设置成功");        }else{            return R.error("密码不一致");        }    }    /**     * 获得待还/代收 钱     */    public R StillANDCollectMoney(String isType) {        TblAccountEntity tblAccountEntity = selectWechatUser();        if(StringUtils.isBlank(isType)){            isType = "1";        }else if(isType.equals("2")){            isType = "2";        }        List<String> type = userDebitService.StillANDCollectMoney(new MapUtils().put("type", isType).put("accountID", tblAccountEntity.getAccountId()));        System.err.println(type);        return R.ok().put("data",type);    }    /**     * 获得待还/代收 列表     */    public R DebitStillCollect(Map<String, Object> params) {        Wrapper<UserDebitEntity> where = new EntityWrapper<UserDebitEntity>();        if(1==(Integer) params.get("type")){            //借入记录            where .where("type={0} and WeChatUser_ID ={1} or (type={2} and targetId ={3} )"                    , "1", params.get("accountID"), "2", params.get("accountID"));        } else {            //借出记录            where .where("type={0} and targetId ={1} or (type={2} and  WeChatUser_ID={3})"                    , "1",params.get("accountID"),"2",params.get("accountID"));        }        where.orderDesc(Arrays.asList("create_time"));        Page<UserDebitEntity> userDebitEntityPage = userDebitService.selectPage(new Query<UserDebitEntity>(params).getPage(), where);        List<UserDebitEntity> records = userDebitEntityPage.getRecords();//查询的数据        List<Map<String,Object>> list = Lists.newArrayList();        for(UserDebitEntity u:records){            new MapUtils().put("","").put("","").put("","");        }        return null;    }    /**     * 判断是否存在用户     */    public R nameANDIdCard(String name,String identityCard) {        List<WxBandcardEntity> wxBandcardEntities = wxBandcardService.selectList(new EntityWrapper<WxBandcardEntity>()                .eq("name", name).eq("identity_card", identityCard));        if(wxBandcardEntities.isEmpty()){            return R.error("该用户不存在");        }        List<Long> IDS = Lists.newArrayList();        for(WxBandcardEntity c : wxBandcardEntities){            IDS.add(c.getAccountId());        }        IDS = AListUtils.removeStringListDupli(IDS);        List<TblAccountEntity> account_id = tblAccountService.selectList(new EntityWrapper<TblAccountEntity>()                .in("Account_ID",IDS));        if(account_id.isEmpty()){            return R.error("未找到该用户");        }        return R.ok().put("data",account_id);    }    /**     * 返回isType  详情页统计 1 借入 2 借出 3 逾期 总次数以及总金额     */    public R debitDetailsList(String accountID, String isType) {        Wrapper<UserDebitEntity> where = new EntityWrapper<UserDebitEntity>();        where.setSqlSelect("count(id) id,sum(money) money");        if(StringUtils.isBlank(isType)|| "1".equals(isType)){            //借入记录            where .where("(type={0} and WeChatUser_ID ={1} or (type={2} and targetId ={3} ))and debitStatus in (2,4)"                    , "1",accountID, "2", accountID);        }else if("2".equals(isType)){            //借出记录            where .where("(type={0} and targetId ={1} or (type={2} and  WeChatUser_ID={3})) and debitStatus in (2,4)"                    , "1", accountID, "2", accountID);        }else{            //借入 逾期 记录            where .where("(type={0} and WeChatUser_ID ={1} or (type={2} and targetId ={3} ))and debitStatus in (2,4) and surplus_time is null and DATEDIFF(NOW(),end_time)>0"                    , "1", accountID, "2",accountID);        }        where.orderDesc(Arrays.asList("create_time"));//排序        UserDebitEntity userDebitEntity = userDebitService.selectOne(where);        if(userDebitEntity==null){            return R.ok().put("count",0).put("money",0);        }else{            if(userDebitEntity.getMoney()==null){                return R.ok().put("count",userDebitEntity.getId()).put("money",0);            }        }        return R.ok().put("count",userDebitEntity.getId()).put("money",userDebitEntity.getMoney().toString());    }    /**     * 设置目标 头像     */    public List<UserDebitEntity> usrURL(List<UserDebitEntity> list,TblAccountEntity account){        List<Long> accountID = Lists.newArrayList();        for(UserDebitEntity u:list){            accountID.add(u.getTargetid());        }        List IDS = AListUtils.removeStringListDupli(accountID);        List<TblAccountEntity> account_id = tblAccountService.selectList(new EntityWrapper<TblAccountEntity>().                setSqlSelect("Account_ID as accountId,Account_HeadUrl as accountHeadurl")                .in("Account_ID", IDS));        for(UserDebitEntity u:list){            for (TblAccountEntity a:account_id){                if(u.getTargetid().equals(a.getAccountId())){                    u.setFromHeadUrl(a.getAccountHeadurl());                }            }            //设置买卖家信息            if(StringUtils.isNotBlank(u.getFromHeadUrl())){                u.setFrom(UserDebitUtils.getBorrowerORContributor(account,u));            }        }        return list;    }}