package com.rongke.service.impl;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.mapper.Wrapper;import com.baomidou.mybatisplus.plugins.Page;import com.baomidou.mybatisplus.service.impl.ServiceImpl;import com.google.common.collect.Lists;import com.rongke.commons.JsonResp;import com.rongke.duntong.TongdunApi;import com.rongke.enums.DictdataNameEnum;import com.rongke.enums.EvaluationEnum;import com.rongke.enums.StatusEnum;import com.rongke.mapper.BankCardMapper;import com.rongke.mapper.EvaluationMapper;import com.rongke.mapper.TongdunAuditMapper;import com.rongke.mapper.UserIdentityMapper;import com.rongke.model.*;import com.rongke.service.*;import com.rongke.utils.AMDUtils;import com.rongke.utils.HttpClientUtil;import com.rongke.utils.StringUtil;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.Query;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.annotation.Resource;import java.util.*;import static com.rongke.duntong.TongdunApi.TongDunXDBB;/** * @EvaluationServiceImpl * @评估报告ServiceImpl * @version : Ver 1.0 */@Servicepublic class EvaluationServiceImpl extends ServiceImpl<EvaluationMapper, Evaluation> implements EvaluationService{    @Autowired    private AdminService adminService;//管理员操作    @Resource    private EvaluationMapper evaluationMapper;    @Resource    private BankCardMapper bankCardMapper;    @Resource    private UserIdentityMapper userIdentityMapper;    @Resource    private TongdunAuditMapper tongdunAuditMapper;    @Autowired    private DictionaryDataService dictionaryDataService;    @Autowired    private UserService userService;//用户    @Autowired    private AuthenticationService authenticationService;//认证情况    @Autowired    private ChannelService channelService;//渠道    @Autowired    private EvaluationService evaluationService;//渠道账号    /**     * @根据条件查找评估报告     * @param evaluation     * @return     */    @Override    public List<Evaluation> selectByCondition(Evaluation evaluation) {        return evaluationMapper.selectByCondition(evaluation);    }    /**     * @分页查找报告     * @param     * @return     */    @Override    public List<Evaluation> selectByPage(Integer currentPage,String gmtDateTime,String phone,String goodsName,String status,Integer auditorId,Integer adminId){        String gmtDatetime1="";        String gmtDatetime2="";        if (StringUtil.isNotEmpty(gmtDateTime)) {            String[] array = gmtDateTime.split("~");            gmtDatetime1 = array[0];            gmtDatetime2 = array[1];        }        Map<String,Object> map = new HashMap<>();        map.put("gmtDatetime1",gmtDatetime1);        map.put("gmtDatetime2",gmtDatetime2);        map.put("phone",phone);        map.put("status",status);        map.put("goodsName",goodsName);        if(StringUtils.isBlank(status)){            map.put("statusIn", Arrays.asList("待打款","待出款","已打款"));        }        if(adminId!=null){            map.put("adminId",adminId);        }        if(auditorId!=null){            map.put("auditorId",auditorId);        }        if (currentPage != null) {            map.put("pageNo",(currentPage-1)*10);        }        map.put("pageSize",10);        return evaluationMapper.selectByPage(map);    }    /**     * @分页查找报告总数     * @param     * @return     */    @Override    public Integer selectByPageCount(Integer currentPage,String gmtDateTime,String phone,String goodsName,String status,Integer auditorId,Integer adminId){        String gmtDatetime1="";        String gmtDatetime2="";        if (gmtDateTime != "") {            String[] array = gmtDateTime.split("~");            gmtDatetime1 = array[0];            gmtDatetime2 = array[1];        }        Map<String,Object> map = new HashMap<>();        map.put("gmtDatetime1",gmtDatetime1);        map.put("gmtDatetime2",gmtDatetime2);        map.put("status",status);        map.put("phone",phone);        map.put("goodsName",goodsName);        if(StringUtils.isBlank(status)){            map.put("statusIn", Arrays.asList("待打款","已打款"));        }        if(adminId!=null){            map.put("adminId",adminId);        }        if(auditorId!=null){            map.put("auditorId",auditorId);        }        return evaluationMapper.selectByPageCount(map);    }    @Override    public List<Evaluation> selectEvaList(Map map) {        return evaluationMapper.selectEvaList(map);    }    @Override    public List<Evaluation> selectEvaAdminList(Map map) {        return evaluationMapper.selectEvaAdminList(map);    }    /**     * 同盾信贷保镖     * @param user     * @param appType     * @param evaluation     */    @Override    public void beforeAdd(User user, String appType, Evaluation evaluation) {        //执行同盾信贷保镖        String biz_code = "";        String appName="";        if ("and".equals(appType)){            biz_code = "koudaidqand";            appName="koudai_and";        }else if ("ios".equals(appType)){            biz_code = "koudaidqios";            appName="koudai_ios";        }        final String partnerCode = "";// 合作方标识        final String partnerKey  = "";//合作方密钥        Map<String, String> paramsMap = new HashMap<String,String>();        paramsMap.put("biz_code",biz_code);        paramsMap.put("token_id",user.getToken());        paramsMap.put("loan_amount","1000");        BankCard bankCard=new BankCard();        bankCard.setUserId(user.getId());        bankCard.setStatus(StatusEnum.USED.getTypeName());        BankCard ub = bankCardMapper.selectOne(bankCard);        paramsMap.put("id_number",ub.getIdCardNo());        paramsMap.put("card_number",ub.getBankCardNo());        paramsMap.put("account_mobile",ub.getPhone());//            UserIdentity userIdentityone=new UserIdentity();//            userIdentityone.setUserId(user.getId());//            UserIdentity userIdentity = userIdentityMapper.selectOne(userIdentityone);        paramsMap.put("account_name",user.getRealName());        JSONObject resultJO =TongDunXDBB(HttpClientUtil.buildParams(paramsMap),appName,biz_code,partnerCode,partnerKey,true);        if(resultJO.getString("success").equals("true")){            TongdunAudit tongdunAudit = new TongdunAudit();            tongdunAudit.setUserId(user.getId());            JSONObject descJO = resultJO.getJSONObject("result_desc").getJSONObject("ANTIFRAUD");            tongdunAudit.setFinalScore(descJO.getString("final_score"));            tongdunAudit.setContent(resultJO.toString());            tongdunAudit.setEvaluationId(evaluation.getId());            tongdunAuditMapper.insert(tongdunAudit);            String value = dictionaryDataService.findValueByDictdataName(DictdataNameEnum.TONGDUNSOCRE.getTypeName());            Integer tdS = Integer.valueOf(value);            if (tdS < Integer.valueOf(tongdunAudit.getFinalScore())) {                evaluation.setStatus(StatusEnum.REFUSED.getTypeName());                if (evaluation.getRefuseReason()!=null) {                    evaluation.setRefuseReason(evaluation.getRefuseReason()+"----同盾贷前审核分数不达标，用户分值为："+tongdunAudit.getFinalScore());                }else {                    evaluation.setRefuseReason("同盾贷前审核分数不达标，用户分值为："+tongdunAudit.getFinalScore());                }                evaluation.setUptDatetime(new Date());                evaluationMapper.updateById(evaluation);            }        }    }    /**     * 申请单内容     * @Ans     */    public PageUtils aEvaluationList(Map<String, Object> params) {        //获得渠道        Channel channel = null;        if(StringUtils.isNotBlank((String)params.get("channelId"))){            channel = channelService.selectById((String)params.get("channelId"));        }        //查询根据查询条件获取内容        String evaluationStatus = (String) params.get("evaluationStatus");//状态        if(StringUtils.isNotBlank(evaluationStatus)&&"未认证".equals(evaluationStatus)){            //所有未认证的人            Page<Authentication> authenticationsPage = authenticationService.notUserAuth(params);            List<Authentication> authentications = authenticationsPage.getRecords();            List<Long> userId =  Lists.newArrayList();            for(Authentication a:authentications){                userId.add(a.getUserId());            }            //获得用户            List<User> users = userService.selectList(new EntityWrapper<User>()                    .eq(StringUtils.isNotBlank((String)params.get("channelId")),"source",params.get("channelId"))                    .eq(StringUtils.isNotBlank((String)params.get("phone")),"phone",params.get("phone"))                    .like(StringUtils.isNotBlank((String)params.get("name")),"real_name", (String) params.get("name"))                    .in("id",userId)                    .orderDesc(Arrays.asList("gmt_datetime"))            );            //添加渠道名称            if(channel==null){                //获得所有渠道商                List<String> uidS = Lists.newArrayList();                for(User u:users){                    u.setAuthStatus("未认证");                    if(StringUtils.isNotBlank(u.getSource())&&!uidS.contains(u.getSource())){                        uidS.add(u.getSource());                    }                }                List<Evaluation> evaluations = Lists.newArrayList();                if(users!=null&&!users.isEmpty()){                    List<Channel> channels = channelService.selectList(new EntityWrapper<Channel>().setSqlSelect("id,name").in("id", uidS));                    for(User u:users){                        for(Channel c:channels){                            if(StringUtils.isNotBlank(u.getSource())&&u.getSource().equals(String.valueOf(c.getId()))){                                u.setSource(c.getName());                            }                        }                        Evaluation evaluation = new Evaluation();                        evaluation.setUser(u);                        evaluations.add(evaluation);                    }                }                return new PageUtils(evaluations,authenticationsPage.getTotal(),authenticationsPage.getSize(),authenticationsPage.getCurrent());            } else {                List<Evaluation> evaluations = Lists.newArrayList();                for(User u:users){                    u.setAuthStatus("未认证");                    u.setSource(channel.getName());                    Evaluation evaluation = new Evaluation();                    evaluation.setUser(u);                    evaluations.add(evaluation);                }                return new PageUtils(evaluations,authenticationsPage.getTotal(),authenticationsPage.getSize(),authenticationsPage.getCurrent());            }        }else{            //搜索条件            //渠道已存在 使用 evaluationStatus            String time1 = (String) params.get("time1");//审核 start            String time2 = (String) params.get("time2");//审核 end            String time3 = (String) params.get("time3");//申请 start            String time4 = (String) params.get("time4");//申请 end            String name  = (String) params.get("name");//姓名            String phone = (String) params.get("phone");//手机号码            String adminName = (String) params.get("reviewName");//审核员姓名            String dealing = (String) params.get("dealing");//是否分配审核员            String channelId = (String) params.get("channelId");//渠道            String cashier = (String) params.get("cashier");//打款员姓名            List<Object> inStatus = (List<Object>) params.get("inStatus");            if(inStatus==null){                inStatus = Lists.newArrayList();            }            //搜索条件 end            //补充like            if(StringUtils.isNotBlank(name)){                name = "%" + name + "%";            }            if(StringUtils.isNotBlank(phone)){                phone = "%" + phone + "%";            }            if(StringUtils.isNotBlank(adminName)){                adminName = "%" + adminName + "%";            }            if(StringUtils.isNotBlank(cashier)){                cashier = "%" + cashier + "%";            }            //补充like end            Wrapper<Evaluation> eq = new EntityWrapper<Evaluation>()                    .between(StringUtils.isNotBlank(time1) && StringUtils.isNotBlank(time2), "review_time", time1, time2)                    .between(StringUtils.isNotBlank(time3) && StringUtils.isNotBlank(time4), "gmt_datetime", time3, time4)                    .eq(StringUtils.isNotBlank(evaluationStatus), "status", evaluationStatus)                    .in(!inStatus.isEmpty(),"status",Arrays.asList(EvaluationEnum.WAITCHECK.getTypeName(),EvaluationEnum.CHECKREFUSE.getTypeName()))                    .ne(StringUtils.isBlank(evaluationStatus),"status", EvaluationEnum.APPLYING.getTypeName())                    .where(StringUtils.isNotBlank(adminName),"auditor_id in (select id from admin where name like {0})",adminName)                    .where(StringUtils.isNotBlank(cashier),"admin_id in (select id from admin where name like {0})",cashier);            //用户搜索            if(StringUtils.isNotBlank(channelId)&&StringUtils.isBlank(name)&&StringUtils.isBlank(phone)){                //名字、手机、注册来源: 只查询来源                eq.where(StringUtils.isNotBlank(channelId),"user_id in (select id from user where source = {0})",channelId);            }else if(StringUtils.isBlank(channelId)&&StringUtils.isNotBlank(name)&&StringUtils.isBlank(phone)){                //名字、手机、注册来源: 只查询名字                eq.where(StringUtils.isNotBlank(name),"user_id in (select id from user where real_name like {0})",name);            }else if(StringUtils.isBlank(channelId)&&StringUtils.isBlank(name)&&StringUtils.isNotBlank(phone)){                //名字、手机、注册来源: 只查询手机号                eq.where(StringUtils.isNotBlank(phone),"user_id in (select id from user where phone like {0})",phone);            }else if(StringUtils.isNotBlank(channelId)&&StringUtils.isNotBlank(name)&&StringUtils.isBlank(phone)){                //名字、手机、注册来源: 查询 来源 和 姓名                eq.where(StringUtils.isNotBlank(channelId)&&StringUtils.isNotBlank(name),"user_id in (select id from user where source = {0} and real_name like {1})",channelId,name);            }else if(StringUtils.isNotBlank(channelId)&&StringUtils.isBlank(name)&&StringUtils.isNotBlank(phone)){                //名字、手机、注册来源: 查询 来源 和 手机                eq.where(StringUtils.isNotBlank(channelId)&&StringUtils.isNotBlank(phone),"user_id in (select id from user where source = {0} and phone like {1})",channelId,phone);            }else if(StringUtils.isBlank(channelId)&&StringUtils.isNotBlank(name)&&StringUtils.isNotBlank(phone)){                //名字、手机、注册来源: 查询 姓名 和 手机                eq.where(StringUtils.isNotBlank(name)&&StringUtils.isBlank(phone),"user_id in (select id from user where real_name like {0} and phone like {1})",name,phone);            }else if(StringUtils.isNotBlank(channelId)&&StringUtils.isNotBlank(name)&&StringUtils.isNotBlank(phone)){                //名字、手机、注册来源: 全部                eq.where(StringUtils.isNotBlank(channelId),"user_id in (select id from user where source = {0} and real_name like {1} and phone like {2})",channelId,name,phone);            }            if(StringUtils.isNotBlank(dealing)){                if(dealing.equals("1")){//用于是否被分配审核员                    eq.isNull("auditor_id");                }else{                    eq.isNotNull("auditor_id");                }            }            eq.orderDesc(Arrays.asList("gmt_datetime"));            //开始查询列表了            Page<Evaluation> evaluationPage = evaluationService.selectPage(new Query<Evaluation>(params).getPage(),eq);            //获取对应的ID            List<Evaluation> records = evaluationPage.getRecords();            List<Long> uIds = Lists.newArrayList();//用户ID            List<Integer> adminIds = Lists.newArrayList();//管理人员            List<String> channelIDS = Lists.newArrayList();//渠道商            for(Evaluation e:records){                if(!uIds.contains(e.getUserId())){                    uIds.add(e.getUserId());                }                if(e.getAdminId()!=null&&!adminIds.contains(e.getAdminId())){                    adminIds.add(e.getAdminId());//添加打款人员                }                if(e.getAuditorId()!=null&&!adminIds.contains(e.getAuditorId())){                    adminIds.add(e.getAuditorId());//添加审核人员                }            }            //没有查询到直接返回            if(records==null||records.isEmpty()){                return new PageUtils(records,evaluationPage.getTotal(),evaluationPage.getSize(),evaluationPage.getCurrent());            }            List<User> users = userService.selectList(new EntityWrapper<User>().in("id",uIds));//用户信息            //没有查询到直接返回            //认证操作            List<Authentication> authentications = authenticationService.selectList(new EntityWrapper<Authentication>().in("user_id", uIds));            //渠道操作            if(channel!=null){                for(User u:users){                    u.setSource(channel.getName());                    for(Authentication a:authentications){                        AMDUtils.UserAuthS(u,a);                    }                    if(StringUtils.isBlank(u.getAuthStatus())){                        u.setAuthStatus("未认证");                    }                }            }else{                for(User u:users){                    if(!channelIDS.contains(u.getSource())){                        channelIDS.add(u.getSource());                    }                    for(Authentication a:authentications){                        AMDUtils.UserAuthS(u,a);                    }                    if(StringUtils.isBlank(u.getAuthStatus())){                        u.setAuthStatus("未认证");                    }                }                List<Channel> channels = channelService.selectList(new EntityWrapper<Channel>().in("id",channelIDS));                if(channels!=null&&!channels.isEmpty()){                    for(User u:users){                        for (Channel c:channels){                            if(StringUtils.isNotBlank(u.getSource())&&u.getSource().equals(String.valueOf(c.getId()))){                                u.setSource(c.getName());                            }                        }                    }                }            }            List<Admin> adminList = adminService.selectList(new EntityWrapper<Admin>().setSqlSelect("id,name").in("id",adminIds));            for(Evaluation e:records){                for(User u:users){                    if(e.getUserId()!=null&&e.getUserId().equals(u.getId())){                        e.setUser(u);                    }                }                for(Admin a:adminList){                    if(e.getAdminId()!=null&&e.getAdminId().equals(a.getId())){                        e.setAdmin(a);                    }                    if(e.getAuditorId()!=null&&e.getAuditorId().equals(a.getId())){                        e.setAuditor(a);                    }                }            }            return new PageUtils(records,evaluationPage.getTotal(),evaluationPage.getSize(),evaluationPage.getCurrent());        }    }    /**     * 获得所有未审核对象     */    public List<Evaluation> distribution(){        Long a = System.currentTimeMillis();        List<Evaluation> distribution = baseMapper.distribution(new EntityWrapper<Evaluation>()                .eq("e.status", EvaluationEnum.WAITCHECK.getTypeName())                .isNull("e.auditor_id")        );        return distribution;    }    public static JSONObject TongDunXDBB3(String body, String app_name, String biz_code, String partnerCode, String partnerKey, Boolean isproduce) {        String url = "https://apitest.tongdun.cn/bodyguard/apply/v4.1?partner_code=" + partnerCode + "&partner_key=" + partnerKey + "&app_name=" + app_name + "&biz_code=" + biz_code;        String result = HttpClientUtil.sendPostSSLRequest(url, body, "UTF-8", "application/x-www-form-urlencoded");        return JSON.parseObject(result);    }    public void Cashier(Evaluation evaluation){        //---------------------------------分配打款员操作---------------------------------        List<Admin> adminList = adminService.payAdminCount();//获得所有打款人员        Integer isfp = 0;//是否分配        if(!adminList.isEmpty()){            for(Admin a:adminList){                if(isfp==0){                    if(a.getHaveCount()==0){//没有分配审核Id                        evaluation.setAdminId(a.getId());                        isfp = 1;                    }                }            }            if(isfp==0){                for(Admin a:adminList){                    Integer min = 1;                    for(Admin b:adminList){                        if(!a.getId().equals(b.getId())&&a.getHaveCount() > b.getHaveCount()){                            min = 0;                        }                    }                    if(isfp==0&&min==1){//是最小                        evaluation.setAdminId(a.getId());                        isfp=1;                    }                }                if(isfp==0){                    evaluation.setAdminId(adminList.get(0).getId());                }            }        }        //---------------------------------分配打款员操作 END---------------------------------    }    public static void main(String[] args) {        List<Long> uid = Lists.newArrayList();        for(Long id:uid){            System.out.println("我循环了");        }        System.out.println(uid.contains(156L));        List<Integer> userIds = Lists.newArrayList();        userIds.add(999);        Integer a = 128;        Integer b = 128;        System.out.println(userIds.contains(999));    }}