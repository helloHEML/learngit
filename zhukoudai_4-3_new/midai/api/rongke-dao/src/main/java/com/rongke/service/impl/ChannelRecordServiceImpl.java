package com.rongke.service.impl;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.mapper.SqlHelper;import com.baomidou.mybatisplus.mapper.Wrapper;import com.baomidou.mybatisplus.plugins.Page;import com.baomidou.mybatisplus.service.impl.ServiceImpl;import com.rongke.mapper.ChannelRecordMapper;import com.rongke.model.ChannelRecord;import com.rongke.service.ChannelRecordService;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.Query;import org.apache.commons.lang3.StringUtils;import org.springframework.stereotype.Service;import java.util.Map;/** * @version : Ver 1.0 * @ChannelServiceImpl * @ServiceImpl */@Servicepublic class ChannelRecordServiceImpl extends ServiceImpl<ChannelRecordMapper, ChannelRecord> implements ChannelRecordService {    public PageUtils channelFlowAllTj(Map<String, Object> params) {        String time1 = (String) params.get("time1");        String time2 = (String) params.get("time2");        String time3 = (String) params.get("time3");        String time4 = (String) params.get("time4");        String timer = (String) params.get("timer");        Page<Map<String, Object>> page = channelFlowPage(new Query<Map<String, Object>>(params).getPage(), new EntityWrapper<ChannelRecord>()                .eq(StringUtils.isNotBlank((String) params.get("name")), "c.name", params.get("name"))                .where(StringUtils.isNotBlank(timer), "date_format(cr.login_time,'%Y-%m-%d')={0}", timer)                .between(StringUtils.isNotBlank(time1) && StringUtils.isNotBlank(time2), "cr.login_time", time1, time2)                .between(StringUtils.isNotBlank(time3) && StringUtils.isNotBlank(time4), "cr.login_time", time3, time4)        );        return new PageUtils(page);    }    /**     * 自定义mybatis-plus sql查询     */    public Page<Map<String, Object>> channelFlowPage(Page<Map<String, Object>> page, Wrapper<ChannelRecord> wrapper) {        SqlHelper.fillWrapper(page, wrapper);        page.setRecords(this.baseMapper.channelFlowPage(page, wrapper));        return page;    }}