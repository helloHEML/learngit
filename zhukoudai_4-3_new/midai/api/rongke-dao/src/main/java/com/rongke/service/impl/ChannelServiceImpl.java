package com.rongke.service.impl;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.mapper.SqlHelper;import com.baomidou.mybatisplus.mapper.Wrapper;import com.baomidou.mybatisplus.plugins.Page;import com.baomidou.mybatisplus.service.impl.ServiceImpl;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.rongke.commons.FailException;import com.rongke.commons.JsonCodeEnum;import com.rongke.commons.JsonResp;import com.rongke.mapper.ChannelMapper;import com.rongke.model.Channel;import com.rongke.model.ChannelRecord;import com.rongke.model.ChannelSum;import com.rongke.model.Tj;import com.rongke.service.ChannelRecordService;import com.rongke.service.ChannelService;import com.rongke.service.ChannelSumService;import com.rongke.utils.ConstantFactory;import com.rongke.utils.Md5;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.Query;import org.apache.commons.lang3.StringUtils;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.*;import org.apache.shiro.session.Session;import org.apache.shiro.session.mgt.eis.SessionDAO;import org.apache.shiro.subject.PrincipalCollection;import org.apache.shiro.subject.Subject;import org.apache.shiro.subject.support.DefaultSubjectContext;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.math.BigDecimal;import java.util.*;/** * @version : Ver 1.0 * @ChannelServiceImpl * @ServiceImpl */@Servicepublic class ChannelServiceImpl extends ServiceImpl<ChannelMapper, Channel> implements ChannelService {    @Autowired    private SessionDAO sessionDAO;    @Autowired    private ChannelService channelService;//渠道    @Autowired    private ChannelMapper channelMapper;//渠道    @Autowired    private ChannelRecordService channelRecordService;    @Autowired    private ChannelSumService channelSumService;    private final String accessUrl = ConstantFactory.getConfig().getAccessUrl();//用户签名    /**     * @param channel     * @return     * @根据条件查找     */    @Override    public List<Channel> selectByCondition(Channel channel) {        return baseMapper.selectByCondition(channel);    }    /**     * 获取当前登陆渠道商     *     * @return JsonResp     */    public Channel getCurentChannel() {        Subject subject = SecurityUtils.getSubject();        PrincipalCollection collection = subject.getPrincipals();        if (null != collection && !collection.isEmpty()) {            Channel channel = (Channel) collection.iterator().next();            return channel;        }        throw new FailException(JsonCodeEnum.OVERTIME.getMessage());    }    /**     * 渠道商登录     *     * @param userName 账号     * @param password 密码     * @return JsonResp     */    public JsonResp channelLogin(String userName, String password) {        UsernamePasswordToken token = new UsernamePasswordToken(userName, Md5.md5Encode(password));//token为账号加md5加密的密码        token.setRememberMe(true);//        System.out.println(ReflectionToStringBuilder.toString(token, ToStringStyle.MULTI_LINE_STYLE));        //获取当前的Subject        Subject currentUser = SecurityUtils.getSubject();        try {            currentUser.login(token);        } catch (UnknownAccountException uae) {            return JsonResp.fa("未知账户");        } catch (IncorrectCredentialsException ice) {            return JsonResp.fa("密码不正确");        } catch (LockedAccountException lae) {            return JsonResp.fa("账户已锁定");        } catch (ExcessiveAttemptsException eae) {            return JsonResp.fa("用户名或密码错误次数过多");        } catch (AuthenticationException ae) {            //通过处理Shiro的运行时AuthenticationException就可以控制用户登录失败或密码错误时的情景            ae.printStackTrace();            return JsonResp.fa("用户名或密码不正确");        }        Channel channel = null;        //验证是否登录成功        if (currentUser.isAuthenticated()) {            EntityWrapper<Channel> wrapper = new EntityWrapper<>();            wrapper.eq("login_name", userName);            channel = channelService.selectOne(wrapper);            if(channel.getStatus()==2){                return JsonResp.toFail("该账号已禁用");            }            channel.setToken(currentUser.getSession().getId().toString());            baseMapper.updateById(channel);        } else {            token.clear();        }        return JsonResp.ok(channel);    }    /**     * 分页获得渠道     */    public PageUtils channelPage(Map<String, Object> params) {        Page<Channel> page = channelService.selectPage(new Query<Channel>(params).getPage(), new EntityWrapper<Channel>().like(StringUtils.isNotBlank((String) params.get("name")), "name", (String) params.get("name")).orderDesc(Arrays.asList("create_time")));        return new PageUtils(page);    }    /**     * 渠道商 用户统计 日     */    public PageUtils channelUserTj(Map<String, Object> params){        String channel = (String) params.get("channel");        String time1 = (String) params.get("time1");        String time2 = (String) params.get("time2");        Page<Map<String, Object>> page = channelUserTj(new Query<Map<String, Object>>(params).getPage(), new EntityWrapper<Channel>()                .eq(StringUtils.isNotBlank(channel),"ux.source",channel)                .between(StringUtils.isNotBlank(time1)&&StringUtils.isNotBlank(time1),"ux.gmt_datetime",time1,time2)        );        for(Map<String, Object> m2:page.getRecords()){            //认证率            if (StringUtils.isNotBlank(m2.get("zc").toString()) && StringUtils.isNotBlank(m2.get("rzcg").toString()) && !m2.get("zc").toString().equals("0") && !m2.get("rzcg").toString().equals("0")) {                String rzl = new BigDecimal(m2.get("rzcg").toString()).divide(new BigDecimal(m2.get("zc").toString()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();                m2.put("rzl",rzl+"%");            } else {                m2.put("rzl","0%");            }            //申请率            if (StringUtils.isNotBlank(m2.get("zc").toString()) && StringUtils.isNotBlank(m2.get("sqzdl").toString()) && !m2.get("zc").toString().equals("0") && !m2.get("sqzdl").toString().equals("0")) {                String sql = new BigDecimal(m2.get("sqzdl").toString()).divide(new BigDecimal(m2.get("zc").toString()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();                m2.put("sql",sql+"%");            } else {                m2.put("sql","0%");            }//       通过率            if (StringUtils.isNotBlank(m2.get("sqzdl").toString()) && StringUtils.isNotBlank(m2.get("sqdtgl").toString()) && !m2.get("sqdtgl").toString().equals("0") && !m2.get("sqzdl").toString().equals("0")) {                String tgl = new BigDecimal(m2.get("sqdtgl").toString()).divide(new BigDecimal(m2.get("sqzdl").toString()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();                m2.put("tgl",tgl+"%");            } else {                m2.put("tgl","0%");            }//        放款率            if (StringUtils.isNotBlank(m2.get("zc").toString()) && StringUtils.isNotBlank(m2.get("fkl").toString()) && !m2.get("zc").toString().equals("0") && !m2.get("fkl").toString().equals("0")) {                String fkl = new BigDecimal(m2.get("fkl").toString()).divide(new BigDecimal(m2.get("zc").toString()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();                m2.put("fkls",fkl+"%");            } else {                m2.put("fkls","0%");            }            if (StringUtils.isNotBlank(m2.get("yqrs").toString()) && StringUtils.isNotBlank(m2.get("fkl").toString()) && !m2.get("fkl").toString().equals("0") && !m2.get("yqrs").toString().equals("0")) {                String yql = new BigDecimal(m2.get("yqrs").toString()).divide(new BigDecimal(m2.get("fkl").toString()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();                m2.put("yql",yql + "%");            } else {                m2.put("yql","0%");            }        }        return new PageUtils(page);    }    /**     * 渠道商 用户统计日 自定义sql     */    public Page<Map<String, Object>> channelUserTj(Page<Map<String, Object>> page, Wrapper<Channel> wrapper) {        SqlHelper.fillWrapper(page, wrapper);        page.setRecords(this.baseMapper.channelUserTj(page, wrapper));        return page;    }    /**     * 渠道商 用户统计 总     */    public PageUtils channelTotalTj(Map<String, Object> params) {        params.put("page",(Integer.valueOf(params.get("page").toString())-1)*Integer.valueOf(params.get("limit").toString()));        params.put("limit",Integer.valueOf(params.get("limit").toString()));        if(params.get("channelId")!=null && "".equals(params.get("channelId"))){            params.put("channelId","");        }       List<Tj> map = channelMapper.channelTotalTj(params);        Integer count=channelMapper.channelTotalTjCount(params);        for (Tj t:map){            //认证率            if (StringUtils.isNotBlank(t.getZc()) && StringUtils.isNotBlank(t.getRzcg()) && !t.getZc().equals("0") && !t.getRzcg().equals("0")) {                String rzl = new BigDecimal(t.getRzcg()).divide(new BigDecimal(t.getZc()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();                t.setRzl(rzl + "%");            } else {                t.setRzl("0%");            }            //申请率            if (StringUtils.isNotBlank(t.getZc()) && StringUtils.isNotBlank(t.getSqshdl()) && !t.getZc().equals("0") && !t.getSqshdl().equals("0")) {                String sql = new BigDecimal(t.getSqshdl()).divide(new BigDecimal(t.getZc()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();                t.setSql(sql + "%");            } else {                t.setSql(0 + "%");            }//       通过率            if (StringUtils.isNotBlank(t.getSqshdl()) && StringUtils.isNotBlank(t.getSqdtgl()) && !t.getSqshdl().equals("0") && !t.getSqdtgl().equals("0")) {                String tgl = new BigDecimal(t.getSqdtgl()).divide(new BigDecimal(t.getSqshdl()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();                t.setTgl(tgl + "%");            } else {                t.setTgl(0 + "%");            }//        放款率            if (StringUtils.isNotBlank(t.getZc()) && StringUtils.isNotBlank(t.getFkl()) && !t.getZc().equals("0") && !t.getFkl().equals("0")) {                String fkl = new BigDecimal(t.getFkl()).divide(new BigDecimal(t.getZc()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();                t.setFkls(fkl + "%");            } else {                t.setFkls(0 + "%");            }            if (StringUtils.isNotBlank(t.getYqrs()) && StringUtils.isNotBlank(t.getFkl()) && !t.getFkl().equals("0") && !t.getYqrs().equals("0")) {                String yql = new BigDecimal(t.getYqrs()).divide(new BigDecimal(t.getFkl()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();                t.setYql(yql + "%");            } else {                t.setYql(0 + "%");            }        }        Page page=new Page();        if (map!=null){            page.setTotal(count);        }else{            page.setTotal(0);        }        page.setSize(Integer.valueOf(params.get("limit").toString()));        page.setRecords(map);        return new PageUtils(page);    }    /**     * 渠道商 用户统计(全部时间查询统计) 日     */    public Page<Map<String, Object>> channelUserTjNew(Page<Map<String, Object>> page, Wrapper<Channel> wrapper) {        SqlHelper.fillWrapper(page, wrapper);        page.setRecords(this.baseMapper.channelUserTjNew(page, wrapper));        return page;    }    public void setChannelSum(Map<String, Object> m1, ChannelSum map) {        Integer zc = 0, rz = 0, wrz = 0, rzcg = 0, rzsb = 0, fkrs = 0, fkrss = 0, sqrs = 0, sqrss = 0, tgrs = 0, hzrs = 0, yqrs = 0;        map.setZc(m1.get("zc").toString());        map.setRzrs(m1.get("rz").toString());        map.setWrz(m1.get("wrz").toString());        map.setRzcg(m1.get("rzcg").toString());        map.setRzsb(m1.get("rzsb").toString());        map.setFkrs(m1.get("fkrs").toString());        map.setFkrss(m1.get("fkrss").toString());        map.setSqrs(m1.get("sqrs").toString());        map.setSqrss(m1.get("sqrss").toString());        map.setTgrs(m1.get("tgrs").toString());        map.setHzrs(m1.get("hzrs").toString());        map.setYqrs(m1.get("yqrs").toString());    }    public void setChannelSum0(ChannelSum map) {        Integer zc = 0, rz = 0, wrz = 0, rzcg = 0, rzsb = 0, fkrs = 0, fkrss = 0, sqrs = 0, sqrss = 0, tgrs = 0, hzrs = 0, yqrs = 0;        map.setZc(zc.toString());        map.setRzrs(rz.toString());        map.setWrz(wrz.toString());        map.setRzcg(rzcg.toString());        map.setRzsb(rzsb.toString());        map.setFkrs(fkrs.toString());        map.setFkrss(fkrss.toString());        map.setSqrs(sqrs.toString());        map.setSqrss(sqrss.toString());        map.setTgrs(tgrs.toString());        map.setHzrs(hzrs.toString());        map.setHzrs(hzrs.toString());        map.setYqrs(yqrs.toString());    }    /**     * 渠道商 用户统计日 自定义sql     */    /*public Page<Map<String, Object>> channelTotalTj(Page<Map<String, Object>> page, Wrapper<Channel> wrapper) {        SqlHelper.fillWrapper(page, wrapper);        page.setRecords(this.baseMapper.channelTotalTj(page, wrapper));        return page;    }*/    /**     * 渠道统计 日和总     */    public ChannelSum channelTotalTjsORDays(ChannelSum channelSum) {        String zc = channelSum.getZc();        String fkrs = channelSum.getFkrs();//放款人数        String fkrss = channelSum.getFkrss();//放款量        String rzcg = channelSum.getRzcg();        String sqrs = channelSum.getSqrs();//申请人数        String sqrss = channelSum.getSqrss();//申请量        String tgrs = channelSum.getTgrs();//通过量        String hzrs = channelSum.getHzrs();//坏账量        String yqrs = channelSum.getYqrs();//逾期量//        认证率        if (StringUtils.isNotBlank(zc) && StringUtils.isNotBlank(rzcg) && !zc.equals("0") && !rzcg.equals("0")) {            String rzl = new BigDecimal(rzcg).divide(new BigDecimal(zc), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();            channelSum.setRzl(rzl + "%");        } else {            channelSum.setRzl(0 + "%");        }//      申请率        if (StringUtils.isNotBlank(zc) && StringUtils.isNotBlank(sqrs) && !zc.equals("0") && !sqrs.equals("0")) {            String sql = new BigDecimal(sqrs).divide(new BigDecimal(zc), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();            channelSum.setSql(sql + "%");        } else {            channelSum.setSql(0 + "%");        }//       通过率        if (StringUtils.isNotBlank(sqrss) && StringUtils.isNotBlank(tgrs) && !sqrss.equals("0") && !tgrs.equals("0")) {            String tgl = new BigDecimal(tgrs).divide(new BigDecimal(sqrss), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();            channelSum.setTgl(tgl + "%");        } else {            channelSum.setTgl(0 + "%");        }//        放款率        if (StringUtils.isNotBlank(zc) && StringUtils.isNotBlank(fkrs) && !zc.equals("0") && !fkrs.equals("0")) {            String fkl = new BigDecimal(fkrs).divide(new BigDecimal(zc), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();            channelSum.setFkl(fkl + "%");        } else {            channelSum.setFkl(0 + "%");        }  /*      if(StringUtils.isNotBlank(tgrs)&&StringUtils.isNotBlank(fkrss)&&!tgrs.equals("0")&&!fkrss.equals("0")){            String fkl = new BigDecimal(fkrss).divide(new BigDecimal(tgrs),2,BigDecimal.ROUND_HALF_UP)                    .multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();            mp.put("fkl",fkl+"%");        }else{            mp.put("fkl",0+"%");        }*///        累计坏账率        if (StringUtils.isNotBlank(hzrs) && StringUtils.isNotBlank(fkrss) && !hzrs.equals("0") && !fkrss.equals("0")) {            String hzl = new BigDecimal(hzrs).divide(new BigDecimal(fkrss), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();            channelSum.setHzl(hzl + "%");        } else {            channelSum.setHzl(0 + "%");        }//        累计逾期率        if (StringUtils.isNotBlank(yqrs) && StringUtils.isNotBlank(fkrss) && !yqrs.equals("0") && !fkrss.equals("0")) {            String yql = new BigDecimal(yqrs).divide(new BigDecimal(fkrss), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();            channelSum.setYql(yql + "%");        } else {            channelSum.setYql(0 + "%");        }        return channelSum;    }    /**     * 渠道统计 日和总     */    public void channelTotalTjsORDays(Map<String, Object> mp) {        String zc = String.valueOf(mp.get("zc"));        String fkrs = String.valueOf(mp.get("fkrs"));//放款人数        String fkrss = String.valueOf(mp.get("fkrss"));//放款量        String rzcg = String.valueOf(mp.get("rzcg"));        String sqrs = String.valueOf(mp.get("sqrs"));//申请人数        String sqrss = String.valueOf(mp.get("sqrss"));//申请量        String tgrs = String.valueOf(mp.get("tgrs"));//通过量        String hzrs = String.valueOf(mp.get("hzrs"));//坏账量        String yqrs = String.valueOf(mp.get("yqrs"));//逾期量//        认证率        if (StringUtils.isNotBlank(zc) && StringUtils.isNotBlank(rzcg) && !zc.equals("0") && !rzcg.equals("0")) {            String rzl = new BigDecimal(rzcg).divide(new BigDecimal(zc), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();            mp.put("rzl", rzl + "%");        } else {            mp.put("rzl", 0 + "%");        }//      申请率        if (StringUtils.isNotBlank(zc) && StringUtils.isNotBlank(sqrs) && !zc.equals("0") && !sqrs.equals("0")) {            String sql = new BigDecimal(sqrs).divide(new BigDecimal(zc), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();            mp.put("sql", sql + "%");        } else {            mp.put("sql", 0 + "%");        }//       通过率        if (StringUtils.isNotBlank(sqrss) && StringUtils.isNotBlank(tgrs) && !sqrss.equals("0") && !tgrs.equals("0")) {            String tgl = new BigDecimal(tgrs).divide(new BigDecimal(sqrss), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();            mp.put("tgl", tgl + "%");        } else {            mp.put("tgl", 0 + "%");        }//        放款率        if (StringUtils.isNotBlank(zc) && StringUtils.isNotBlank(fkrs) && !zc.equals("0") && !fkrs.equals("0")) {            String fkl = new BigDecimal(fkrs).divide(new BigDecimal(zc), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();            mp.put("fkl", fkl + "%");        } else {            mp.put("fkl", 0 + "%");        }  /*      if(StringUtils.isNotBlank(tgrs)&&StringUtils.isNotBlank(fkrss)&&!tgrs.equals("0")&&!fkrss.equals("0")){            String fkl = new BigDecimal(fkrss).divide(new BigDecimal(tgrs),2,BigDecimal.ROUND_HALF_UP)                    .multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();            mp.put("fkl",fkl+"%");        }else{            mp.put("fkl",0+"%");        }*///        累计坏账率        if (StringUtils.isNotBlank(hzrs) && StringUtils.isNotBlank(fkrss) && !hzrs.equals("0") && !fkrss.equals("0")) {            String hzl = new BigDecimal(hzrs).divide(new BigDecimal(fkrss), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();            mp.put("hzl", hzl + "%");        } else {            mp.put("hzl", 0 + "%");        }//        累计逾期率        if (StringUtils.isNotBlank(yqrs) && StringUtils.isNotBlank(fkrss) && !yqrs.equals("0") && !fkrss.equals("0")) {            String yql = new BigDecimal(yqrs).divide(new BigDecimal(fkrss), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100")).stripTrailingZeros().toPlainString();            mp.put("yql", yql + "%");        } else {            mp.put("yql", 0 + "%");        }    }    /**     * 渠道商 用户统计     * end     */    /**     * 渠道回款率     */    public List<Map<String, Object>> channelOrderPayback(Map<String, Object> params) {        String time1 = (String) params.get("time1");        String time2 = (String) params.get("time2");        List<Object> ids = Lists.newArrayList();        if (params.get("ids") instanceof ArrayList) {            ids = (List<Object>) params.get("ids");        }        List<Map<String, Object>> maps = baseMapper.channelOrderPayback(new EntityWrapper<Channel>().in(!ids.isEmpty(), "c.id", ids).between(StringUtils.isNotBlank(time1) && StringUtils.isNotBlank(time2), "o.upt_datetime", time1, time2).groupBy("c.id"));        return maps;    }    public static void main(String[] args) {        Long a = 1L;        Long b = 2L;        Long c = 3L;        Long d = 45555L;        List<Object> bbb = null;        String bbbb = null;//        Map<>        List<Object> alist = Lists.newArrayList();        alist.add(a);        alist.add(b);        alist.add(c);        alist.add(d);        Object abc = "awad";        System.out.println(bbb instanceof ArrayList);        System.out.println(new BigDecimal(bbbb));    }    public Map<String, Object> channel(Map<String, Object> maps) {        //渠道名字        String name = (String) maps.get("name");        //注册人数        String count = String.valueOf(maps.get("c1"));        //认证人数        String count1 = String.valueOf(maps.get("c2"));        //认证失败人数        String count2 = String.valueOf(maps.get("c3"));        //认证成功人数        String count3 = String.valueOf(maps.get("c4"));        //未认证人数        String count4 = String.valueOf(maps.get("c5"));        //放款人数        String count5 = String.valueOf(maps.get("c6"));        //申请总人数        String counta6 = String.valueOf(maps.get("c7"));        //认证率        String count6 = "0";        if (StringUtils.isNotBlank(count) && !"0".equals(count)) {            count6 = new BigDecimal(count1).divide(new BigDecimal(count), 3, BigDecimal.ROUND_HALF_UP).stripTrailingZeros().toPlainString();        }        //认证通过率        String count7 = "0";        if (StringUtils.isNotBlank(count1) && !"0".equals(count1)) {            count7 = new BigDecimal(count3).divide(new BigDecimal(count1), 3, BigDecimal.ROUND_HALF_UP).stripTrailingZeros().toPlainString();        }        //成功放款率        String count8 = "0";        if (StringUtils.isNotBlank(count) && !"0".equals(count)) {            count8 = new BigDecimal(count5).divide(new BigDecimal(count), 3, BigDecimal.ROUND_HALF_UP).stripTrailingZeros().toPlainString();        }        Map<String, Object> result = Maps.newHashMap();        result.put("id", maps.get("id"));        result.put("name", name);        result.put("count", count);        result.put("count1", count1);        result.put("count2", count2);        result.put("count3", count3);        result.put("count4", count4);        result.put("count5", count5);        result.put("count6", count6);        result.put("count7", count7);        result.put("count8", count8);        return result;    }    /**     * 踢除用户     * http://www.ithao123.cn/content-7174367.html     */    private void kickOutUser(UsernamePasswordToken token) {        String loginName = token.getUsername();        Collection<Session> sessions = sessionDAO.getActiveSessions();        for (Session session : sessions) {            if (session.getTimeout() == 0) {                sessionDAO.delete(session);            }            if (loginName.equals(String.valueOf(session.getAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY)))) {                //设置session立即失效，即将其踢出系统                session.setTimeout(0);                logout();            }        }    }    /**     * 退出登录     */    public void logout() {        Subject subject = SecurityUtils.getSubject();        if (subject.isAuthenticated()) {            // session 会销毁，在SessionListener监听session销毁，清理权限缓存            subject.logout();        }    }}