package com.rongke.service.impl;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.mapper.SqlHelper;import com.baomidou.mybatisplus.mapper.Wrapper;import com.baomidou.mybatisplus.plugins.Page;import com.baomidou.mybatisplus.service.impl.ServiceImpl;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.rongke.commons.FailException;import com.rongke.commons.JsonCodeEnum;import com.rongke.enums.EvaluationEnum;import com.rongke.mapper.UserMapper;import com.rongke.model.*;import com.rongke.rediscluster.CacheUtil;import com.rongke.service.*;import com.rongke.utils.RequestUtil;import com.rongke.utils.ans.MapUtils;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.Query;import com.rongke.utils.ans.R;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import java.math.BigDecimal;import java.util.Arrays;import java.util.Date;import java.util.List;import java.util.Map;/** * @UserServiceImpl * @用户ServiceImpl * @version : Ver 1.0 */@Servicepublic class UserServiceImpl extends ServiceImpl<UserMapper, User> implements UserService {    @Resource    private UserMapper userMapper;    @Autowired    private CacheUtil redisClusterCache;    @Autowired    private EvaluationService evaluationService;//借贷记录    @Autowired    private UserContactService userContactService;//用户通讯录    @Autowired    private UserTabaoGoodsService userTabaoGoodsService;//淘宝购买记录    @Autowired    private UserTaobaoAddressService userTaobaoAddressService;//淘宝收货地址    @Autowired    private AuthenticationService authenticationService;//认证    @Autowired    private ChannelService channelService;//渠道    @Autowired    private TongdunAuditService tongdunAuditService;//贷前报告    /**     * @根据条件查找用户     * @param user     * @return     */    @Override    public List<User> selectByCondition(User user) {        return userMapper.selectByCondition(user);    }    @Override    public User selectCurrentUser() {        User user=null;        HttpServletRequest request = RequestUtil.getRequest();//获取请求        //请求方发送的token        String token = request.getHeader("x-client-token");        if (redisClusterCache.hasKey(token)) {//判断用户的缓存中是否有这个token            User usesr=new User();            usesr.setToken(token);            usesr.setStatus("正常");            user=userMapper.selectOne(usesr);            if(user==null){//判断数据库中是否有这个用户,如果没有删除key，抛出登录超时或未登录                try {                    redisClusterCache.delkey(token);                } catch (Exception e) {                    e.printStackTrace();                }                throw new FailException(JsonCodeEnum.OVERTIME.getMessage());            }        }else {            throw new FailException(JsonCodeEnum.OVERTIME.getMessage());        }        return user;    }    @Override    public List<User> findUserDateList(Map map) {        return userMapper.findUserDateList(map);    }    @Override    public Integer findUserDateListSize(Map map) {        return userMapper.findUserDateListSize(map);    }    @Override    public List<User> findChannelUserList(Map requestmap) {        return userMapper.findChannelUserList(requestmap);    }    /**     * 用户列表     */    public PageUtils userPage(Map<String, Object> params) {        return null;    }    /**     * 个人统计     */    public R visualizationEv(String userId) {        User user = this.selectById(userId);        if(user==null){            return R.error("用户不存在");        }        //真正申请次数        Integer count = evaluationService.selectCount(new EntityWrapper<Evaluation>().eq("user_id",userId).in("status",Arrays.asList("已打款","已完结")));        //打款次数        Integer payLoan = evaluationService.selectCount(new EntityWrapper<Evaluation>().eq("user_id",userId).in("status",Arrays.asList("已打款","已完结")));        //拒绝次数        Integer errcount = evaluationService.selectCount(new EntityWrapper<Evaluation>().eq("user_id",userId).in("status",Arrays.asList("审核拒绝","拒绝")));        //贷前信息 最新贷前报告        TongdunAudit tongdunAudit = tongdunAuditService.selectOne(new EntityWrapper<TongdunAudit>().eq("user_id", userId).orderDesc(Arrays.asList("id")));        String tongdun = "";        if(tongdunAudit!=null){            tongdun = tongdunAudit.getContent();        }        return R.ok().put("data",user).put("EVtotal",new MapUtils()                .put("count",count)                .put("payLoan",payLoan)                .put("errcount",errcount)                .put("tongdun",tongdun)        );    }    /**     * 借贷订单     */    public PageUtils userEvaluation(Map<String, Object> params) {        Page<Evaluation> page = evaluationService.selectPage(new Query<Evaluation>(params).getPage(), new EntityWrapper<Evaluation>()                .eq("user_id",params.get("userId"))                .orderDesc(Arrays.asList("gmt_datetime"))        );        return new PageUtils(page);    }    /**     *  查询用户通讯录     */    public PageUtils addressbook(Map<String, Object> param) {        Page<UserContact> page = userContactService.selectPage(new Query<UserContact>(param).getPage(),                new EntityWrapper<UserContact>()                        .eq("user_id",param.get("userId"))                        .orderDesc(Arrays.asList("call_count")));        return new PageUtils(page);    }    /**     *  淘宝购买记录     */    public PageUtils taobaoBuy(Map<String, Object> params) {        Page<UserTabaoGoods> page = userTabaoGoodsService.selectPage(new Query<UserTabaoGoods>(params).getPage(),                new EntityWrapper<UserTabaoGoods>()                        .eq("user_id",params.get("userId")));        return new PageUtils(page);    }    /**     *  淘宝购买记录     */    public PageUtils taobaoAddr(Map<String, Object> params) {        Page<UserTaobaoAddress> page = userTaobaoAddressService.selectPage(new Query<UserTaobaoAddress>(params).getPage(),                new EntityWrapper<UserTaobaoAddress>()                        .eq("user_id",params.get("userId")));        return new PageUtils(page);    }    /**     *  渠道：查询 个人负责的来源     */    public PageUtils channelRegistered(Map<String, Object> params) {        String time1 = (String) params.get("time1");        String time2 = (String) params.get("time2");        Page<User> page = this.selectPage(new Query<User>(params).getPage(), new EntityWrapper<User>()                .in("source", Arrays.asList(((String) params.get("source")).split(",")))                .between(StringUtils.isNotBlank(time1)&&StringUtils.isNotBlank(time2),"gmt_datetime",time1,time2).orderBy("gmt_datetime",false)        );        List<User> users = page.getRecords();        if(users!=null&&!users.isEmpty()){            List<String> userIds = Lists.newArrayList();            for(User u:users){                if(!userIds.contains(String.valueOf(u.getId()))){                    userIds.add(String.valueOf(u.getId()));                }            }            //认证通过            List<Authentication> authentications = authenticationService.selectList(new EntityWrapper<Authentication>()                    .eq("bank_card_auth", "1")                    .eq("phone_address_book_auth", "1")                    .eq("user_base_msg_auth", "1")                    .eq("phone_record_auth", "1")                    .eq("identity_auth", "1")                    .eq("taobao_auth", "1")                    .in("user_id", userIds)            );            //获得来源            List<Channel> channels = channelService.selectList(new EntityWrapper<Channel>().in("id", Arrays.asList(((String) params.get("source")).split(","))));            for(User u:users){                for(Authentication a:authentications){                    if(u.getId().equals(a.getUserId())){                        List<String> strings = Arrays.asList(a.getBankCardAuth(), a.getPhoneRecordAuth(), a.getUserBaseMsgAuth(), a.getPhoneRecordAuth(), a.getIdentityAuth(), a.getTaobaoAuth());                        if(strings.contains("0")){                            u.setAuthStatus("未认证");                        }                        if(strings.contains("3")){                            u.setAuthStatus("未认证");                        }                        if(strings.contains("2")){                            u.setAuthStatus("认证失败");                        }                        if(StringUtils.isBlank(u.getAuthStatus())){                            if(!strings.contains("0")&&!strings.contains("2")&&!strings.contains("3")){                                u.setAuthStatus("已认证");                            }                        }                    }                }                if(StringUtils.isBlank(u.getAuthStatus())){                    u.setAuthStatus("未认证");                }                for(Channel c:channels){                    if(u.getSource().equals(String.valueOf(c.getId()))){                        u.setSource(c.getName());                    }                }            }            return new PageUtils(users,page.getTotal(),page.getSize(),page.getCurrent());        }        return new PageUtils(null,0,10,1);    }    /**     * 个人渠道总统计     */    public List<Map<String,Object>> channelechart(Map<String, Object> params) {        List<Map<String,Object>> result = Lists.newArrayList();        List<Channel> channels = channelService.selectList(new EntityWrapper<Channel>().in("id", Arrays.asList(((String) params.get("source")).split(","))));        if(channels!=null&&!channels.isEmpty()){            for(Channel c:channels){                result.add(channel(c));            }        }        return result;    }    public PageUtils userListAuthPage(Map<String, Object> params) {        String search = (String) params.get("search");        if (StringUtils.isNotBlank(search)) {            search = "%" + search + "%";        }        String authStatus = (String) params.get("authStatus");//状态        String onAuth = (String) params.get("onAuth");//认证中项目        String failAuth = (String) params.get("failAuth");//认证失败项目        Wrapper<User> wq = new EntityWrapper<User>();        if (StringUtils.isNotBlank(authStatus)) {//订单状态            if ("未认证".equals(authStatus)) {                wq.eq("a.bank_card_auth", "0");                wq.eq("a.phone_address_book_auth", "0");                wq.eq("a.phone_record_auth", "0");                wq.eq("a.user_base_msg_auth", "0");                wq.eq("a.identity_auth", "0");                wq.eq("a.taobao_auth", "0");            } else if ("已认证".equals(authStatus)) {                wq.eq("a.bank_card_auth", "1");                wq.eq("a.phone_address_book_auth", "1");                wq.eq("a.phone_record_auth", "1");                wq.eq("a.user_base_msg_auth", "1");                wq.eq("a.identity_auth", "1");                wq.eq("a.taobao_auth", "1");            } else if ("认证失败".equals(authStatus)) {                if (StringUtils.isNotBlank(failAuth)) {                    int a = 0;                    try {                        a = Integer.parseInt(failAuth);                    } catch (NumberFormatException e) {                        e.printStackTrace();                    }                    switch (a) {                        case 1:                            wq.where("(a.bank_card_auth=2) ", "0");                            break;                        case 2:                            wq.where("(a.phone_address_book_auth=2)", "0");                            break;                        case 3:                            wq.where("(a.phone_record_auth =2 ) ", "0");                            break;                        case 4:                            wq.where("(a.user_base_msg_auth=2) ", "0");                            break;                        case 5:                            wq.where("(a.identity_auth=2 ) ", "0");                            break;                        case 6:                            wq.where("(a.taobao_auth=2) ", "0");                            break;                    }                }else{                    wq.where("a.bank_card_auth=2 or a.phone_address_book_auth =2 " +                            "or a.phone_record_auth =2 or a.user_base_msg_auth =2 " +                            "or  a.identity_auth =2  or taobao_auth=2 ", "0");                }            } else {                wq.where("a.bank_card_auth!=2 AND a.phone_address_book_auth !=2 " +                        "AND a.phone_record_auth !=2 AND a.user_base_msg_auth !=2 " +                        "and  a.identity_auth!=2  and taobao_auth!=2 and(a.bank_card_auth!=1 or " +                        "a.phone_address_book_auth !=1 or a.phone_record_auth !=1 " +                        "or a.user_base_msg_auth !=1 or a.identity_auth!=1 or a.taobao_auth!=1 )" +                        " and (a.bank_card_auth!=0 or a.phone_address_book_auth !=0 " +                        "or a.phone_record_auth !=0 or a.user_base_msg_auth !=0 or " +                        "a.identity_auth!=0 or a.taobao_auth!=0)", "0");                if (StringUtils.isNotBlank(onAuth)) {                    int a = 0;                    try {                        a = Integer.parseInt(onAuth);                    } catch (NumberFormatException e) {                        e.printStackTrace();                    }                    switch (a) {                        case 1:                            wq.where("(a.bank_card_auth=3 or a.bank_card_auth=0) ", "0");                            break;                        case 2:                            wq.where("(a.phone_address_book_auth=3 or a.phone_address_book_auth=0)", "0");                            break;                        case 3:                            wq.where("(a.phone_record_auth!=2 and a.phone_record_auth!=1) ", "0");                            break;                        case 4:                            wq.where("(a.user_base_msg_auth!=2 and a.user_base_msg_auth!=1) ", "0");                            break;                        case 5:                            wq.where("(a.identity_auth!=2 and a.identity_auth!=1) ", "0");                            break;                        case 6:                            wq.where("(a.taobao_auth!=2 and a.taobao_auth!=1) ", "0");                            break;                    }                }            }        } else {        }        String channelId = (String) params.get("channelId");        Page<User> page = userPage(new Query<User>(params).getPage(), wq                .eq(StringUtils.isNotBlank(channelId),"c.id",channelId)                .where(StringUtils.isNotBlank(search), "(u.real_name like {0} or u.phone like {1})", search, search)                .between(StringUtils.isNotBlank((String) params.get("time1")) && StringUtils.isNotBlank((String) params.get("time2")), "u.gmt_datetime", params.get("time1"), params.get("time2")));        return new PageUtils(page);    }    public Map<String,Object> channel(Channel channel){        List<User> users = userMapper.selectList(new EntityWrapper<User>().setSqlSelect("id").eq("source", channel.getId()));        if(!users.isEmpty()){            List<Long> ids = Lists.newArrayList();            for(User u:users){                ids.add(u.getId());            }            //注册人数            Integer count = users.size();            //认证人数            Integer count1 = authenticationService.authJoinUserCount(new EntityWrapper<Authentication>()                    .eq("user.source", channel.getId())                    .where("(authentication.bank_card_auth!={0} " +                            " or authentication.phone_address_book_auth!={1} " +                            " or authentication.user_base_msg_auth !={2}" +                            " or authentication.phone_record_auth != {3}" +                            " or authentication.identity_auth != {4}" +                            " or authentication.taobao_auth != {5})", "0","0","0","0","0","0")            );            //认证失败人数            Integer count2 = authenticationService.authJoinUserCount(new EntityWrapper<Authentication>()                    .where("(authentication.bank_card_auth={0} " +                            " or authentication.phone_address_book_auth={1} " +                            " or authentication.user_base_msg_auth ={2}" +                            " or authentication.phone_record_auth = {3}" +                            " or authentication.identity_auth = {4}" +                            " or authentication.taobao_auth = {5})", "2","2","2","2","2","2")                    .eq("user.source", channel.getId())            );            //认证成功人数            Integer count3 = authenticationService.authJoinUserCount(new EntityWrapper<Authentication>()                    .eq("authentication.bank_card_auth", "1")                    .eq("authentication.phone_address_book_auth", "1")                    .eq("authentication.user_base_msg_auth", "1")                    .eq("authentication.phone_record_auth", "1")                    .eq("authentication.identity_auth", "1")                    .eq("authentication.taobao_auth", "1")                    .eq("user.source",channel.getId()));            //未认证人数            Integer count4 = authenticationService.authJoinUserCount(new EntityWrapper<Authentication>()                    .eq("authentication.bank_card_auth", "0")                    .eq("authentication.phone_address_book_auth", "0")                    .eq("authentication.user_base_msg_auth", "0")                    .eq("authentication.phone_record_auth", "0")                    .eq("authentication.identity_auth", "0")                    .eq("authentication.taobao_auth", "0")                    .eq("user.source", channel.getId()));            //放款人数            int count5 = evaluationService.selectCount(new EntityWrapper<Evaluation>()                    .setSqlSelect("DISTINCT user_id")                    .where("user_id in (select id from user where source={0})", channel.getId())                    .where("(status = {0} or status = {1})", "已打款","已完结")            );            //申请总人数            int countss = evaluationService.selectCount(new EntityWrapper<Evaluation>()                    .setSqlSelect("DISTINCT user_id")                    .where("user_id in (select id from user where source={0})", channel.getId())                    .where("(status={0} or status={1} or status={2} or status={3})", "已打款","已完结","审核失败","拒绝")            );            //认证率            BigDecimal count6 = new BigDecimal(String.valueOf(count-count4)).divide(new BigDecimal(String.valueOf(count)),3,BigDecimal.ROUND_HALF_UP);            //认证通过率            BigDecimal count7 = new BigDecimal(String.valueOf(count3)).divide(new BigDecimal(String.valueOf(count)),3,BigDecimal.ROUND_HALF_UP);            //成功放款率            BigDecimal count8 = new BigDecimal("0");            if(count!=0){//注册人数不能为空//                count8 = new BigDecimal(String.valueOf(count5)).divide(new BigDecimal(String.valueOf(countss)),3,BigDecimal.ROUND_HALF_UP);                count8 = new BigDecimal(String.valueOf(count5)).divide(new BigDecimal(String.valueOf(count)),3,BigDecimal.ROUND_HALF_UP);            }            Map<String,Object> result = Maps.newHashMap();            result.put("name",channel.getName());            result.put("count",count);            result.put("count1",count1);            result.put("count2",count2);            result.put("count3",count3);            result.put("count4",count4);            result.put("count5",count5);            result.put("count6",count6);            result.put("count7",count7);            result.put("count8",count8);            return result;        }        Map<String,Object> result = Maps.newHashMap();        result.put("name",channel.getName());        result.put("count",0);        result.put("count1",0);        result.put("count2",0);        result.put("count3",0);        result.put("count4",0);        result.put("count5",0);        result.put("count6",0);        result.put("count7",0);        result.put("count8",0);        return result;    }    /**     * 自定义mybatis-plus sql查询 user包含认证状态     */    public Page<User> userPage(Page<User> page, Wrapper<User> eq) {        SqlHelper.fillWrapper(page, eq);        page.setRecords(this.baseMapper.userPage(page, eq));        return page;    }    public static void main(String[] args) {        BigDecimal a = new BigDecimal("0").divide(new BigDecimal("0"),3,BigDecimal.ROUND_HALF_UP);        System.out.println(a);    }}