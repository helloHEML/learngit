package com.rongke.service.impl;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.mapper.Wrapper;import com.baomidou.mybatisplus.plugins.Page;import com.baomidou.mybatisplus.service.impl.ServiceImpl;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.rongke.duntong.TongdunApi;import com.rongke.mapper.AuthenticationMapper;import com.rongke.model.Authentication;import com.rongke.model.SysDeciding;import com.rongke.model.UserContact;import com.rongke.model.UserPhone;import com.rongke.service.*;import com.rongke.utils.RRUtils;import com.rongke.utils.RSMohe;import com.rongke.utils.ans.Query;import com.rongke.utils.ans.R;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.Logger;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.math.BigDecimal;import java.util.Arrays;import java.util.Date;import java.util.List;import java.util.Map;/** * @AuthenticationServiceImpl * @用户认证ServiceImpl * @version : Ver 1.0 */@Servicepublic class AuthenticationServiceImpl extends ServiceImpl<AuthenticationMapper, Authentication> implements AuthenticationService {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private AuthenticationMapper authenticationMapper;    @Autowired    private UserService userService;    @Autowired    private UserPhoneService userPhoneService;//获得内容    @Autowired    private DictionaryDataService dictionaryDataService;//字典d    @Autowired    private UserContactService userContactService;//联系    @Autowired    private SysDecidingService sysDecidingService;//决策    /**     * @根据条件查找用户认证     * @param authentication     * @return     */    public List<Authentication> selectByCondition(Authentication authentication) {        return authenticationMapper.selectByCondition(authentication);    }    public Integer selectPreviousAuditorId(){        return authenticationMapper.selectPreviousAuditorId();    }    public List<Authentication> selectAuthenList() {        return authenticationMapper.selectAuthenList();    }    public List<Authentication> selectAuthenAdmiList(Map map) {        return authenticationMapper.selectAuthenAdmiList(map);    }    public List<Map> selectUserAuthenById(Map map) {        return authenticationMapper.selectUserAuthenById(map);    }    public Integer authJoinUserCount(Wrapper<Authentication> var1){        return authenticationMapper.authJoinUserCount(var1);    }    /**     *  未认证     */    public Page<Authentication> notUserAuth(Map<String, Object> params) {        Page<Authentication> page = this.selectPage(new Query<Authentication>(params).getPage(), new EntityWrapper<Authentication>()                .setSqlSelect("user_id as userId")                .where(StringUtils.isNotBlank((String) params.get("channelId")),"user_id in (select id from user where source={0})",(String) params.get("channelId"))                .where("(bank_card_auth != {0} " +                        " or  phone_address_book_auth != {1} " +                        " or  user_base_msg_auth != {2} " +                        " or  phone_record_auth != {3} " +                        " or  identity_auth != {4} " +                        " or  taobao_auth != {5}) ","1","1","1","1","1","1")                .orderDesc(Arrays.asList("gmt_datetime"))        );        return page;    }//    public void YysAuth(Long userId,String code,String key) {        public void YysAuth(Long userId) {        UserPhone u = userPhoneService.selectOne(new EntityWrapper<UserPhone>()                .eq("status","使用")                .eq("user_id", userId)                .orderDesc(Arrays.asList("gmt_datetime"))        );        if(u!=null){            Map<String, SysDeciding> jc = sysDecidingService.decidingType(1);            JSONObject resultJO = RSMohe.getAll(u.getTaskId());            if(resultJO.getIntValue("code")==0){                JSONObject data=resultJO.getJSONObject("data");                JSONObject taskData = resultJO.getJSONObject("data").getJSONObject("task_data");//返回内容                String phoneAge = dictionaryDataService.findValueByDictdataName("phoneAge");                JSONObject accountInfo = taskData.getJSONObject("account_info");//基础信息                String netAge = accountInfo.getString("net_age");//网龄                String marks=null;                Authentication auth = this.selectOne(new EntityWrapper<Authentication>().eq("user_id",userId));                if (netAge == null || netAge.equals("未知")){                    marks="手机入网年龄为未知，机审失败";                    auth.setPhoneRecordAuth("2");                    auth.setMarks(marks);                    this.updateById(auth);                }else{                    //记录账单信息                    StringBuffer billInfoBuffer = new StringBuffer(""); //需要存储入表的账单记录字段                    String billInfoString = taskData.getString("bill_info"); //账单费用                    List<String> billInfoList = JSON.parseArray(billInfoString, String.class);                    for (int i = 0; i < billInfoList.size(); i++) {                        JSONObject billInfoJson = JSON.parseObject(billInfoList.get(i));                        if (i != 0) {                            billInfoBuffer.append(",");                        }                        billInfoBuffer.append(billInfoJson.getString("bill_cycle") + ":" + billInfoJson.getString("bill_fee"));                    }                    u.setNetAge(netAge);                    u.setBillFee(billInfoBuffer.toString());                    u.setOperatorName(data.getString("channel_src"));                    u.setAccountStar(accountInfo.getString("credit_level"));                    u.setAccountStatus(accountInfo.getString("mobile_status"));                    u.setAutonym(accountInfo.getString("real_info"));                    u.setAccountIntegral(accountInfo.getString("credit_point"));                    userPhoneService.updateById(u);                    // 记录通话总时长和次数\                    EntityWrapper<UserContact> wrapperContact = new EntityWrapper<>();                    wrapperContact.eq("user_id", u.getUserId());                    List<UserContact> contacts = userContactService.selectList(wrapperContact);                    JSONArray callInfoArray = JSONObject.parseArray(taskData.getString("call_info"));/*                    List<String> ab = Lists.newArrayList();                    for(Object a:callInfoArray){                        JSONArray call_other_number1 = ((JSONObject) a).getJSONArray("call_record");                        for(Object call:call_other_number1){                            ab.add(((JSONObject)call).getString("call_other_number"));                        }                    }                    Map<String,Integer> maps = Maps.newHashMap();                    for(String abc:ab){                        if(maps.get(abc)==null){                            maps.put(abc,1);                        }else{                            maps.put(abc,maps.get(abc)+1);                        }                    }                    System.out.println(maps);                    List<UserContact> userContacts = Lists.newArrayList();                    for (Map.Entry<String, Integer> m:maps.entrySet()){                        UserContact userContact = new UserContact();                        userContact.setPhone(m.getKey());                        userContact.setCallCount(m.getValue());                        userContact.setUserId(u.getUserId());                        userContact.setEmergencyContact("正常联系人");                        userContact.setGmtDatetime(new Date());                        userContacts.add(userContact);                    }                    Integer chuangfu = 0;                    for (UserContact s:userContacts){                        for (UserContact c:contacts){                            if(s.getPhone().equals(c.getPhone())){                                Integer callCount = s.getCallCount();                                BeanUtils.copyProperties(c,s);                                s.setCallCount(callCount);                                chuangfu++;                            }                        }                    }*/                   if (callInfoArray.size() > 2) {                        callInfoArray.remove(0);                        callInfoArray.remove(0);                    }                    String callInfo = callInfoArray.toString();//                    List<String> ciList = JSON.parseArray(callInfo, String.class);                    //计算每个号码的联系次数                    String subString = "";                    String str = "call_other_number";                    if (!org.apache.commons.lang.StringUtils.isEmpty(callInfo)) {                        for (int idx = 0; (idx = callInfo.indexOf(str, idx)) != -1; idx += str.length()) {                            subString += callInfo.substring(idx, idx + str.length() + 14);                        }//                        System.out.print("subString="+subString);                    }                    Integer chuangfu = 0;                    for (UserContact userContact : contacts) {                        Integer callNum = 0; //记录总次数//                        callNum=StringUtils.countMatches(callInfo,userContact.getPhone());                        callNum = org.apache.commons.lang.StringUtils.countMatches(subString, userContact.getPhone());                        userContact.setCallCount(callNum);                        if(callNum!=0){                            chuangfu++;                        }                    }                    if(contacts.size()==0){                        chuangfu = 31;                    }else{                        chuangfu = contacts.size()-chuangfu;                    }                    //1.                    if(RRUtils.assertCode(yysNetworkAge(netAge,jc.get("yys_networkAge"),auth),"500")){return;}                    //2.                    if(RRUtils.assertCode(yysTheSame(chuangfu +"",jc.get("yys_theSame"),auth),"500")){return;}                    //3.                    if(RRUtils.assertCode(yysPhoneRepeat(u.getUserId(),jc.get("yys_phoneRepeat"),auth),"500")){return;}                    //4.                    if(RRUtils.assertCode(yysCallduration(callInfoArray,jc.get("yys_callduration"),auth),"500")){return;}                    //5.                    if(RRUtils.assertCode(yysAuth(accountInfo,jc.get("yys_auth"),auth),"500")){return;}                    if(!contacts.isEmpty()){                        userContactService.updateBatchById(contacts);                    }                    auth.setPhoneRecordAuth("1");                    this.updateById(auth);                }            }else{                //失败从新认证                Authentication auth =this.selectOne(new EntityWrapper<Authentication>().eq("user_id",userId));                if(auth!=null){                    auth.setUserBaseMsgAuth("0");                    auth.setPhoneRecordAuth("0");                    this.updateById(auth);                }            }        }    }    /**     * 实名认证     *  1.实名认证年龄大于     */    public R sfzSmrzAge(String netAge, SysDeciding deciding, Authentication auth){        if(deciding==null){            return R.ok();        }        if(deciding.getJcOpen()){            if(Integer.valueOf(netAge)>Integer.valueOf(deciding.getJcValue())){                if(deciding.getJcType()==1){//直接通过                    auth.setPhoneRecordAuth("1");                    this.updateById(auth);                    return R.ok();                }else if(deciding.getJcType()==2){//直接拒绝                    auth.setPhoneRecordAuth("2");                    auth.setMarks("实名认证超过最大年龄：" + deciding.getJcValue() + "岁；客户年龄:"+netAge+"岁");                    this.updateById(auth);                    return R.error("实名认证超过最大年龄：" + deciding.getJcValue() + "岁；客户年龄:"+netAge+"岁");                }            }        }        return R.ok();    }    /**     * 运营商 1.入网时间决策     * 不得小于设定时间     */    public R yysNetworkAge(String netAge,SysDeciding deciding,Authentication auth){        if(deciding==null){            return R.ok();        }        if(deciding.getJcOpen()){            if(netAge.equals("未知")){                auth.setPhoneRecordAuth("2");                auth.setMarks("手机入网时间未知");                this.updateById(auth);                return R.error("手机入网时间未知");            }            if((Integer.valueOf(netAge)<Integer.valueOf(deciding.getJcValue()))&&deciding.getJcType()==2){                auth.setPhoneRecordAuth("2");                auth.setMarks("手机入网年龄不足" + deciding.getJcValue() + "个月机审失败");                this.updateById(auth);                return R.error();            }        }        return R.ok();    }    /**     * 运营商 2.通话记录有效手机号与通讯录对比命中     *  N 个以上无效号码     */    public R yysTheSame(String wxCount,SysDeciding deciding,Authentication auth){        if(deciding==null){            return R.ok();        }        if(deciding.getJcOpen()){            if((Integer.valueOf(wxCount)>Integer.valueOf(deciding.getJcValue()))&&deciding.getJcType()==2){                auth.setPhoneRecordAuth("2");                auth.setMarks("通话记录有效手机号与通讯录对比命中:"+deciding.getJcValue()+"以上无效号码");                this.updateById(auth);                return R.error();            }        }        return R.ok();    }    /**     * 运营商 3.手机通讯录不重复号码低于     * N 个以上     */    public R yysPhoneRepeat(Long userId,SysDeciding deciding,Authentication auth){        if(deciding==null){            return R.ok();        }        int i = userContactService.selectList(new EntityWrapper<UserContact>()                .setSqlSelect("COALESCE(phone,0) as phone, COALESCE(count(id),0) as shu")                .eq("user_id", userId)                .groupBy("phone")                .having("shu={0}", "1")        ).size();        if(deciding.getJcOpen()){            if(i<Integer.valueOf(deciding.getJcValue())){                auth.setPhoneRecordAuth("2");                auth.setMarks("手机通讯录不重复号码低于:"+deciding.getJcValue());                this.updateById(auth);                return R.error();            }        }        return R.ok();    }    /**     * 运营商 4.平均通话时长低于     * N 秒     */    public R yysCallduration(JSONArray callI,SysDeciding deciding,Authentication auth){        if(deciding==null){            return R.ok();        }        if(deciding.getJcOpen()){            BigDecimal houer = new BigDecimal("0");            if(callI!=null){                for(Object c:callI){                    JSONObject call = (JSONObject) c;                    String total_call_time = call.getString("total_call_time");                    if(StringUtils.isNotBlank(total_call_time)){                        houer = houer.add(new BigDecimal(total_call_time));                    }                }                if(houer.compareTo(new BigDecimal("0"))==0&&houer.compareTo(new BigDecimal("0"))==-1){                    auth.setPhoneRecordAuth("2");                    auth.setMarks("通话记录为空");                    this.updateById(auth);                    return R.error();                }else if(houer.divide(new BigDecimal(""+callI.size()),0,BigDecimal.ROUND_HALF_UP).compareTo(new BigDecimal(deciding.getJcValue()))==-1){                    auth.setPhoneRecordAuth("2");                    auth.setMarks("平均通话时长低于:"+deciding.getJcValue()+"秒");                    this.updateById(auth);                    return R.error();                }            }else{//手机未实名认证                auth.setPhoneRecordAuth("2");                auth.setMarks("通话记录为空");                this.updateById(auth);                return R.error();            }        }        return R.ok();    }    /**     * 运营商 5.手机未实名认证     */    public R yysAuth(JSONObject account,SysDeciding deciding,Authentication auth){        if(deciding==null){            return R.ok();        }        if(deciding.getJcOpen()){            String realInfo = account.getString("real_info");            if("未登记".equals(realInfo)){                auth.setPhoneRecordAuth("2");                auth.setMarks("手机号未实名认证");                this.updateById(auth);                return R.error();            }        }        return R.ok();    }    /**     * 淘宝 1.芝麻分值大于     */    public R tbZmf(String zmf,SysDeciding deciding,Authentication auth){        if(deciding==null){            return R.ok();        }        if(deciding.getJcOpen()){            if(StringUtils.isNotBlank(zmf)&&!"未知".equals(zmf)){                if(Integer.valueOf(zmf)>Integer.valueOf(deciding.getJcValue())){                    if(deciding.getJcType()==1){//直接通过                        log.info("tbZmf, setPhoneRecordAuth 1 ");                        auth.setTaobaoAuth("1");                        this.updateById(auth);                    }else if(deciding.getJcType()==2){                        auth.setMarks("芝麻分大于:"+deciding.getJcValue());                        auth.setTaobaoAuth("2");                        this.updateById(auth);                        log.info("tbZmf, setPhoneRecordAuth 2 ");                    }                    return R.ok(1,"成功");                }            }        }        return R.ok();    }    /**     * 淘宝 2.花呗当期预期状态：已逾期     */    public R tbHbyq(JSONObject json,SysDeciding deciding,Authentication auth){        if(deciding==null){            return R.ok();        }        if(deciding.getJcOpen()){            if("1".equals(json.getString("huabei_overdue_status"))){                if(deciding.getJcType()==2){                    auth.setMarks("花呗当期预期状态：已逾期");                    auth.setTaobaoAuth("2");                    this.updateById(auth);                    log.info("tbHbyq, setPhoneRecordAuth 2 ");                    return R.error("未通过");                }            }        }        return R.ok("通过");    }    /**     * 淘宝 3.借呗当期逾期状态：已逾期     */    public R tbJbyq(JSONObject json,SysDeciding deciding,Authentication auth){        if(deciding==null){            return R.ok();        }        if(deciding.getJcOpen()){            if("1".equals(json.getString("jiebei_overdue_status"))){                if(deciding.getJcType()==2){                    log.info("tbJbyq, setPhoneRecordAuth 2 ");                    auth.setMarks("借呗当期逾期状态:已逾期");                    auth.setTaobaoAuth("2");                    this.updateById(auth);                    return R.error("借呗逾期未通过");                }            }        }        return R.ok("通过");    }    /**     * 淘宝 4.淘宝收货地址：无     */    public R tbTbdz(JSONArray json,SysDeciding deciding,Authentication auth){        if(deciding==null){            return R.ok();        }        if(deciding.getJcOpen()){            if(json==null||json.isEmpty()){                if(deciding.getJcType()==2){                    auth.setMarks("淘宝收货地址：无");                    auth.setTaobaoAuth("2");                    this.updateById(auth);                    return R.error("淘宝收货地址：无");                }            }        }        return R.ok("通过");    }    /**     * 淘宝 5.花呗额度小于     */    public R tbHbed(JSONObject json,SysDeciding deciding,Authentication auth){        if(deciding==null){            return R.ok();        }        if(deciding.getJcOpen()){            if(StringUtils.isNotBlank(json.getString("credit_quota"))&&!"未知".equals(json.getString("credit_quota"))){                String huabei = json.getString("credit_quota");                if(!"null".equals(huabei)){                    System.out.println(new BigDecimal(huabei).divide(new BigDecimal("100"),2,BigDecimal.ROUND_HALF_UP));                    if(new BigDecimal(huabei).divide(new BigDecimal("100"),2,BigDecimal.ROUND_HALF_UP)                            .compareTo(new BigDecimal(deciding.getJcValue()))==-1){                        if(deciding.getJcType()==1){                            auth.setTaobaoAuth("1");                            this.updateById(auth);                            return R.ok(1,"借呗额度直接通过");                        }else if(deciding.getJcType()==2){                            auth.setMarks("花呗额度大于"+deciding.getJcValue());                            auth.setTaobaoAuth("2");                            this.updateById(auth);                            return R.error("花呗额度大于"+deciding.getJcValue());                        }                    }                }            }        }        return R.ok("通过");    }    /**     * 淘宝 6.借呗额度小于     */    public R tbJbed(JSONObject json,SysDeciding deciding,Authentication auth){        if(deciding==null){            return R.ok();        }        if(deciding.getJcOpen()){            if(StringUtils.isNotBlank(json.getString("jiebei_quota"))&&!"未知".equals(json.getString("jiebei_quota"))){                String jiebei = json.getString("jiebei_quota");                if(!"null".equals(jiebei)&&!"未知".equals(jiebei)){                    if(new BigDecimal(jiebei).divide(new BigDecimal("100"),2,BigDecimal.ROUND_HALF_UP)                            .compareTo(new BigDecimal(deciding.getJcValue()))==-1){                        if(deciding.getJcType()==1){                            auth.setTaobaoAuth("1");                            this.updateById(auth);                            return R.ok(1,"借呗额度直接通过");                        }else if(deciding.getJcType()==2){                            auth.setMarks("借呗额度大于:"+deciding.getJcValue());                            auth.setTaobaoAuth("2");                            this.updateById(auth);                            return R.error("借呗额度大于");                        }                    }                }            }        }        return R.ok("通过");    }}