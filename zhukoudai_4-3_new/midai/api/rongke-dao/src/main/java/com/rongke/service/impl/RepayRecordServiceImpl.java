package com.rongke.service.impl;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.mapper.SqlHelper;import com.baomidou.mybatisplus.mapper.Wrapper;import com.baomidou.mybatisplus.plugins.Page;import com.baomidou.mybatisplus.service.impl.ServiceImpl;import com.google.common.collect.Lists;import com.rongke.mapper.RepayRecordMapper;import com.rongke.model.DataReport;import com.rongke.model.RepayRecord;import com.rongke.model.User;import com.rongke.service.RepayRecordService;import com.rongke.service.UserService;import com.rongke.utils.StringUtil;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.Query;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.annotation.Resource;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @RepayRecordServiceImpl * @还款记录ServiceImpl * @version : Ver 1.0 */@Servicepublic class RepayRecordServiceImpl extends ServiceImpl<RepayRecordMapper, RepayRecord> implements RepayRecordService {    @Resource    private RepayRecordMapper repayRecordMapper;    @Autowired    private UserService userService;    /**     * @根据条件查找还款记录     * @param repayRecord     * @return     */    @Override    public List<RepayRecord> selectByCondition(RepayRecord repayRecord) {        return repayRecordMapper.selectByCondition(repayRecord);    }    public List<RepayRecord> findListByOrderId(String orderId,Integer pageNo,Integer pageSize){        Map<String,Object> map = new HashMap();        map.put("orderId",orderId);        map.put("pageNo",pageNo);        map.put("pageSize",pageSize);        return repayRecordMapper.findListByOrderId(map);}    public Integer findListByOrderIdTotal(String orderId,Integer pageNo,Integer pageSize){        Map<String,Object> map = new HashMap();        map.put("orderId",orderId);        map.put("pageNo",pageNo);        map.put("pageSize",pageSize);        return repayRecordMapper.findListByOrderIdTotal(map);    }    @Override    public List<RepayRecord> selectRepayRecordList(Map map) {        return repayRecordMapper.selectRepayRecordList(map);    }    @Override    public Integer selectRepayRecordListSize(Map map) {        return repayRecordMapper.selectRepayRecordListSize(map);    }    @Override    public RepayRecord selectRepayRecordLimitOne(Map map1) {        return repayRecordMapper.selectRepayRecordLimitOne(map1);    }    /**     *  用户订单还款记录     */    public PageUtils oderUserRePay(Map<String, Object> params) {        Page<RepayRecord> repayRecordPage = this.selectPage(new Query<RepayRecord>(params).getPage(), new EntityWrapper<RepayRecord>()                .eq(StringUtils.isNotBlank((String) params.get("orderId")), "order_id", params.get("orderId"))        );        List<Long> userIds = Lists.newArrayList();        for(RepayRecord r:repayRecordPage.getRecords()){            if(!userIds.contains(r.getUserId())){                userIds.add(r.getUserId());            }        }        if(!userIds.isEmpty()){            List<User> users = userService.selectList(new EntityWrapper<User>().setSqlSelect("id,real_name as realName,phone").in("id", userIds));            for(RepayRecord r:repayRecordPage.getRecords()){                for(User u:users){                    if(r.getUserId()!=null&&r.getUserId().equals(u.getId())){                        r.setUser(u);                    }                }            }        }        return new PageUtils(repayRecordPage);    }    /**     * 还款明细     */    public PageUtils repayPage(Map<String, Object> params){        String time1 = (String) params.get("time1");        String time2 = (String) params.get("time2");        String name = (String) params.get("name");        if(StringUtils.isNotBlank(name)){            name = "%" + name + "%";        }        Page<Map<String, Object>> mapPage = repayPage(new Query<Map<String, Object>>(params).getPage(),new EntityWrapper<RepayRecord>()                .eq(StringUtils.isNotBlank((String)params.get("id")),"u.id",params.get("id"))                .where(StringUtils.isNotBlank(name),"(u.real_name like {0} or u.phone like {1})",name,name)                .between(StringUtils.isNotBlank(time1)&&StringUtils.isNotBlank(time2),"rr.gmt_datetime",time1,time2)        );        return new PageUtils(mapPage);    }    /**     * 自定义sql     */    public Page<Map<String,Object>> repayPage(Page<Map<String,Object>> page, Wrapper<RepayRecord> wrapper) {        SqlHelper.fillWrapper(page, wrapper);        page.setRecords(this.baseMapper.repayPage(page, wrapper));        return page;    }}