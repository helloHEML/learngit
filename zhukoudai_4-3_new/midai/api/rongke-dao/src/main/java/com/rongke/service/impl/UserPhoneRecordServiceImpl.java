package com.rongke.service.impl;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.service.impl.ServiceImpl;import com.rongke.mapper.UserPhoneRecordMapper;import com.rongke.model.Authentication;import com.rongke.model.User;import com.rongke.model.UserPhoneRecord;import com.rongke.rediscluster.CacheUtil;import com.rongke.service.AuthenticationService;import com.rongke.service.UserPhoneRecordService;import com.rongke.service.UserService;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;import java.util.Map;/** * @UserPhoneRecordServiceImpl * @用户通话记录ServiceImpl * @version : Ver 1.0 */@Servicepublic class UserPhoneRecordServiceImpl extends ServiceImpl<UserPhoneRecordMapper, UserPhoneRecord> implements UserPhoneRecordService {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private UserPhoneRecordMapper userPhoneRecordMapper;    @Autowired    private UserService userService;    @Autowired    private CacheUtil redisClusterCache;    @Autowired    private AuthenticationService authenticationService;    /**     * @根据条件查找用户通话记录     * @param userPhoneRecord     * @return     */    @Override    public List<UserPhoneRecord> selectByCondition(UserPhoneRecord userPhoneRecord) {        return userPhoneRecordMapper.selectByCondition(userPhoneRecord);    }    public List<UserPhoneRecord> selectByPage(Map<String,Object> map){        List<UserPhoneRecord> list = userPhoneRecordMapper.selectByPage(map);        return list;    }    public Integer selectCount(Map<String,Object> map){        Integer count = userPhoneRecordMapper.selectCount(map);        return count;    }    public List<UserPhoneRecord> selectByUserId(Map<String,Object> map){        return userPhoneRecordMapper.selectByUserId(map);    }    public List<String> selectConnTimeTop(Long userId){        return userPhoneRecordMapper.selectConnTimeTop(userId);    }    @Override    public void saveCall(List<UserPhoneRecord> userPhoneRecords) {        userPhoneRecordMapper.saveCall(userPhoneRecords);    }    public void resetYys(){        User user = userService.selectCurrentUser();        Long userId = user.getId();        String key = "yys"+userId;        if(!redisClusterCache.hasKey(key)){            Authentication authentication = authenticationService.selectOne(new EntityWrapper<Authentication>().eq("user_id",userId).eq("phone_record_auth","3"));            if (authentication != null){                authentication.setPhoneRecordAuth("0");                log.error("20+auth");                authenticationService.updateById(authentication);            }        }    }}