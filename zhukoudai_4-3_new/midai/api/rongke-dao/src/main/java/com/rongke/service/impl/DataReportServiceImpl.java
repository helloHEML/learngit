package com.rongke.service.impl;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.mapper.SqlHelper;import com.baomidou.mybatisplus.mapper.Wrapper;import com.baomidou.mybatisplus.plugins.Page;import com.baomidou.mybatisplus.service.impl.ServiceImpl;import com.google.common.collect.Maps;import com.rongke.mapper.DataReportMapper;import com.rongke.model.DataReport;import com.rongke.model.DataReportVo;import com.rongke.model.Evaluation;import com.rongke.model.RepayRecord;import com.rongke.service.DataReportService;import com.rongke.utils.DateUtils;import com.rongke.utils.StringUtil;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.Query;import com.rongke.utils.ans.R;import org.apache.commons.codec.digest.DigestUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.stereotype.Service;import javax.annotation.Resource;import java.math.BigDecimal;import java.util.Arrays;import java.util.List;import java.util.Map;/** * @DataReportServiceImpl * @ServiceImpl * @version : Ver 1.0 */@Servicepublic class DataReportServiceImpl extends ServiceImpl<DataReportMapper, DataReport> implements DataReportService {    @Resource    private DataReportMapper dataReportMapper;    /**     * 今日新增会员人数     * @return     */    public Integer selectTodayMemberCount(String day){        return dataReportMapper.selectTodayMemberCount(day);    }    /**     * 今日新增注册人数     * @return     */    public Integer selectTodayRegisterCount(String day){        return dataReportMapper.selectTodayRegisterCount(day);    }    /**     * 今日放款金额     * @return     */    public String selectTodayMoneyOut(String day){        return dataReportMapper.selectTodayMoneyOut(day);    }    /**     * 今日还款金额     * @return     */    public String selectTodayMoneyIn(String day){        return dataReportMapper.selectTodayMoneyIn(day);    }    /**     * 根据年份查询     * @param year     * @return     */    public List<Map> moneyInListByYear(String year){        return dataReportMapper.moneyInListByYear(year);    }    /**     * 根据年份查询出款     * @param year     * @return     */    public List<Map> moneyOutListByYear(String year){        return dataReportMapper.moneyOutListByYear(year);    }    /**     * 财务日报表统计     * @param     * @return     */    public List<DataReportVo> findDailyStatement(Map<String,Object> map){        return dataReportMapper.findDailyStatement(map);    }    public List<DataReportVo> findRepayRecordGroupTime(Map<String,Object> map){return dataReportMapper.findRepayRecordGroupTime(map);}    public List<DataReportVo> findRepayRecordOverdue(Map<String,Object> map){return dataReportMapper.findRepayRecordOverdue(map);}//    public List<DataReportVo> findOverdueMoneyGroupTime(Map<String,Object> map){return dataReportMapper.findOverdueMoneyGroupTime(map);}    /**     * 客服审核统计     * @return     */    public List<DataReportVo> findUserAuditStatement(){return dataReportMapper.findUserAuditStatement();}    /**     * 客服审核统计(未通过)     * @return     */    public List<DataReportVo> findUserAuditStatementNo(){return dataReportMapper.findUserAuditStatementNo();}    /**     * 放款审核统计     * @return     */    public List<DataReportVo> payMoneyAuditStatement(){return dataReportMapper.payMoneyAuditStatement();}    /**     * 放款审核统计(未通过)     * @return     */    public List<DataReportVo> payMoneyAuditStatementNo(){return dataReportMapper.payMoneyAuditStatementNo();}    /**     *  统计首页人数相关     */    public R tjHome() {        //人数统计 tgl        Map<String, Object> user = baseMapper.tjuserCount();        if(user!=null){            String zz = String.valueOf(user.get("zz"));            String zr = String.valueOf(user.get("zr"));            if(StringUtils.isNotBlank(zz)&&StringUtils.isNotBlank(zr)){                if(!"0".equals(zr)&&!"0".equals(zz)){                    BigDecimal tgl = new BigDecimal(zr).divide(new BigDecimal(zz),3,BigDecimal.ROUND_HALF_UP);                    user.put("tgl",tgl.stripTrailingZeros().toPlainString());                }else{                    user.put("tgl",0);                }            }        }        Map<String, Object> orderMoney = baseMapper.tjevaCount();        return R.ok().put("user",user).put("order",orderMoney);    }    /**     * 首页echarts 年统计     */    public R tjHomeYear(Map<String,Object> params) {        String time = (String) params.get("time");        String time1 = "";        String time2 = "";        if(StringUtils.isNotBlank(time)){            time1 =  time.substring(0,5)+"01";            time2 =  time.substring(0,5)+"12";        }        return HomeDate(baseMapper.tjHomeYear(new EntityWrapper<DataReport>()                .between(StringUtils.isNotBlank(time1),"a1.date",                        time1                        ,time2)));    }    /**     * 首页echarts 月 统计     */    public R tjHomeMonth(Map<String,Object> params) {        String time = (String) params.get("time");        String time1 = "";        String time2 = "";        if(StringUtils.isNotBlank(time)){             time1 =  time.substring(0,8)+"01";             time2 =  time.substring(0,8)+"31";        }        return HomeDate(baseMapper.tjHomeMonth(new EntityWrapper<DataReport>()                .between(StringUtils.isNotBlank(time1),"a1.date",                        time1                        ,time2)));    }    /**     * 首页echarts统计 处理     */    public R HomeDate( List<Map<String,Object>> response){        if(response.isEmpty()){            return R.ok().put("data","").put("dk","").put("dk","");        }        int i = 0;        Object [] date = new Object[response.size()];        Object [] dk = new Object[response.size()];        Object [] hk = new Object[response.size()];        for(Map<String,Object> r:response){            date[i] = r.get("date");            dk[i] = r.get("dk");            hk[i] = r.get("hk");            i++;        }        return R.ok().put("data",date).put("dk",dk).put("hk",hk);    }    /**     * 财务日报统计     */    public PageUtils financeReportPage(Map<String, Object> params) {        String time1 = (String) params.get("time1");        String time2 = (String) params.get("time2");        if(StringUtils.isBlank(time1)||StringUtils.isBlank(time2)){            time2 = DateUtils.nowDate(DateUtils.YYYY_MM_DD);            time1 = time2.substring(0,8)+"01";        }        Page<Map<String, Object>> page = financeReportPage(new Query<Map<String, Object>>(params).getPage(), new EntityWrapper<DataReport>().between(StringUtils.isNotBlank(time1) && StringUtils.isNotBlank(time2),                "td.date", time1, time2).orderDesc(Arrays.asList("td.date")));        for (Object obj:page.getRecords()){        }        return new PageUtils(page);    }    /**     * 财务报表统计 自定义sql     */    public Page<Map<String, Object>> financeReportPage(Page<Map<String, Object>> page, Wrapper<DataReport> var2) {        SqlHelper.fillWrapper(page, var2);        page.setRecords(this.baseMapper.financeReportPage(page, var2));        return page;    }    /**     * 订单还款率统计     */    public PageUtils TJrepaymentRate(Map<String,Object> params){        String time1 = (String) params.get("time1");        String time2 = (String) params.get("time2");        if(StringUtils.isBlank(time1)||StringUtils.isBlank(time2)){            time2 = DateUtils.nowDate(DateUtils.YYYY_MM_DD);            time1 = time2.substring(0,8)+"01";        }        Page<Map<String, Object>> page = TJrepaymentRate(new Query<Map<String,Object>>(params).getPage(), new EntityWrapper<DataReport>()                .between(StringUtils.isNotBlank(time1) && StringUtils.isNotBlank(time2),                        "a.date", time1, time2).orderDesc(Arrays.asList("a.date")));        for(Map<String, Object> p:page.getRecords()){            TJrepaymentRateCL(p);        }        return new PageUtils(page);    }    /**     * 订单还款率统计 自定义sql     */    public Page<Map<String, Object>> TJrepaymentRate(Page<Map<String, Object>> page, Wrapper<DataReport> var2) {        SqlHelper.fillWrapper(page, var2);        page.setRecords(this.baseMapper.TJrepaymentRate(page, var2));        return page;    }    /**     * 订单还款率统计 处理     */    public Map<String, Object> TJrepaymentRateCL(Map<String, Object> params){        String hkss = String.valueOf(params.get("hkss"));        String yqwh = String.valueOf(params.get("yqwh"));        String one = String.valueOf(params.get("one"));        String two = String.valueOf(params.get("two"));        String three = String.valueOf(params.get("three"));        String four = String.valueOf(params.get("four"));        String five = String.valueOf(params.get("five"));        String six = String.valueOf(params.get("six"));        String seven = String.valueOf(params.get("seven"));        if("0".equals(hkss)){            params.put("zyq","0%");            return params;        }        //1        if("0".equals(one)){            params.put("one","0%");        }else{            BigDecimal oneB = new BigDecimal(one).divide(new BigDecimal(hkss),2,BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100"));            params.put("one",oneB.stripTrailingZeros().toPlainString()+"%");        }        //2        if("0".equals(two)){            params.put("two","0%");        }else{            BigDecimal twoB = new BigDecimal(two).divide(new BigDecimal(hkss),2,BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100"));            params.put("two",twoB.stripTrailingZeros().toPlainString()+"%");        }        //3        if("0".equals(three)){            params.put("three","0%");        }else{            BigDecimal threeB = new BigDecimal(three).divide(new BigDecimal(hkss),2,BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100"));            params.put("three",threeB.stripTrailingZeros().toPlainString()+"%");        }        //4        if("0".equals(four)){            params.put("four","0%");        }else{            BigDecimal fourB = new BigDecimal(four).divide(new BigDecimal(hkss),2,BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100"));            params.put("four",fourB.stripTrailingZeros().toPlainString()+"%");        }        //5        if("0".equals(five)){            params.put("five","0%");        }else{            BigDecimal fiveB = new BigDecimal(five).divide(new BigDecimal(hkss),2,BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100"));            params.put("five",fiveB.stripTrailingZeros().toPlainString()+"%");        }        //6        if("0".equals(six)){            params.put("six","0%");        }else{            BigDecimal sixB = new BigDecimal(six).divide(new BigDecimal(hkss),2,BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100"));            params.put("six",sixB.stripTrailingZeros().toPlainString()+"%");        }        //7        if("0".equals(seven)){            params.put("seven","0%");        }else{            BigDecimal sevenB = new BigDecimal(seven).divide(new BigDecimal(hkss),2,BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100"));            params.put("seven",sevenB.stripTrailingZeros().toPlainString()+"%");        }        //yqwh        if(!"0".equals(yqwh)&&!"0".equals(hkss)){            BigDecimal yqwhB = new BigDecimal(yqwh).divide(new BigDecimal(hkss),2,BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100"));            params.put("zyq",yqwhB.stripTrailingZeros().toPlainString()+"%");        }else{            params.put("zyq","0%");        }        return params;    }    /**     * 首页用户统计     * v2     */    public R newTJCard() {        Map<String, Object> user = baseMapper.newTJHomeUser();        Map<String, Object> orderPay = baseMapper.newTJOrderOrPay();        HomeV2UserCard(user,orderPay);        return R.ok().put("user",user).put("orderPay",orderPay);    }    /**     * 首页统计echarts1     * v2     */    public R newTJCardEcharts(){        Map<String, Object> result = baseMapper.newTJCardEcharts();        if(result==null){            result = Maps.newHashMap();            result.put("t1","0");            result.put("t2","0");            result.put("t3","0");            result.put("t4","0");            result.put("t5","0");            result.put("t6","0");            result.put("t7","0");            result.put("t8","0");            result.put("t9","0");            result.put("t10","0");        }        return R.ok().put("data",result);    }    /**     * 首页     * v2     */    public void HomeV2UserCard(Map<String,Object> user,Map<String,Object> orderPay){        if(user!=null&&user.get("jrzc")!=null){            BigDecimal jrzc = new BigDecimal(String.valueOf(user.get("jrzc")));            BigDecimal jrrz = new BigDecimal(String.valueOf(user.get("jrrz")));            BigDecimal zrzc = new BigDecimal(String.valueOf(user.get("zrzc")));            BigDecimal zrrz = new BigDecimal(String.valueOf(user.get("zrrz")));            //下降            if(jrzc.compareTo(zrzc)==-1){                BigDecimal multiply = zrzc.divide(zrzc, 2, BigDecimal.ROUND_HALF_UP).subtract(jrzc.divide(zrzc, 2, BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100"));                user.put("iszc","2");                user.put("zcl",multiply.stripTrailingZeros().toPlainString()+"%");            }else if(jrzc.compareTo(zrzc)==0){                user.put("iszc","3");            }else if(jrzc.compareTo(zrzc)==1){                user.put("iszc","1");                BigDecimal multiply = jrzc.divide(jrzc, 2, BigDecimal.ROUND_HALF_UP).subtract(zrzc.divide(jrzc, 2, BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100"));                user.put("zcl",multiply.stripTrailingZeros().toPlainString()+"%");            }            if(jrrz.compareTo(zrrz)==-1){                BigDecimal multiply = zrrz.divide(zrrz, 2, BigDecimal.ROUND_HALF_UP).subtract(jrrz.divide(zrrz, 2, BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100"));                user.put("isrz","2");                user.put("rzl",multiply.stripTrailingZeros().toPlainString()+"%");            }else if(jrrz.compareTo(zrrz)==0){                user.put("isrz","3");            }else if(jrrz.compareTo(zrrz)==1){                user.put("isrz","1");                BigDecimal multiply = jrrz.divide(jrrz, 2, BigDecimal.ROUND_HALF_UP).subtract(zrrz.divide(jrrz, 2, BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100"));                user.put("rzl",multiply.stripTrailingZeros().toPlainString()+"%");            }        }        if(orderPay!=null&&orderPay.get("jrfk")!=null){            BigDecimal jrfk = new BigDecimal(String.valueOf(orderPay.get("jrfk")));            BigDecimal jrhk = new BigDecimal(String.valueOf(orderPay.get("jrhk")));            BigDecimal zrfk = new BigDecimal(String.valueOf(orderPay.get("zrfk")));            BigDecimal zrhk = new BigDecimal(String.valueOf(orderPay.get("zrhk")));            if(jrfk.compareTo(zrfk)==-1){                BigDecimal multiply = zrfk.divide(zrfk, 2, BigDecimal.ROUND_HALF_UP).subtract(jrfk.divide(zrfk, 2, BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100"));                orderPay.put("isfk","2");                orderPay.put("fkl",multiply.stripTrailingZeros().toPlainString()+"%");            }else if(jrfk.compareTo(zrfk)==0){                orderPay.put("isfk","3");            }else if(jrfk.compareTo(zrfk)==1){                orderPay.put("isfk","1");                BigDecimal multiply = jrfk.divide(jrfk, 2, BigDecimal.ROUND_HALF_UP).subtract(zrfk.divide(jrfk, 2, BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100"));                orderPay.put("fkl",multiply.stripTrailingZeros().toPlainString()+"%");            }            if(jrhk.compareTo(zrhk)==-1){                BigDecimal multiply = zrhk.divide(zrhk, 2, BigDecimal.ROUND_HALF_UP).subtract(jrhk.divide(zrhk, 2, BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100"));                orderPay.put("ishk","2");                orderPay.put("hkl",multiply.stripTrailingZeros().toPlainString()+"%");            }else if(jrhk.compareTo(zrhk)==0){                orderPay.put("ishk","3");            }else if(jrhk.compareTo(zrhk)==1){                orderPay.put("ishk","1");                BigDecimal multiply = jrhk.divide(jrhk, 2, BigDecimal.ROUND_HALF_UP).subtract(zrhk.divide(jrhk, 2, BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100"));                orderPay.put("hkl",multiply.stripTrailingZeros().toPlainString()+"%");            }        }    }}