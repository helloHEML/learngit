package com.rongke.service.impl;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.mapper.Wrapper;import com.baomidou.mybatisplus.plugins.Page;import com.baomidou.mybatisplus.service.impl.ServiceImpl;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.rongke.enums.EvaluationEnum;import com.rongke.enums.OrderStatusEnum;import com.rongke.enums.StatusEnum;import com.rongke.mapper.EvaluationMapper;import com.rongke.mapper.OrderMapper;import com.rongke.mapper.ParamSettingMapper;import com.rongke.model.*;import com.rongke.service.*;import com.rongke.utils.DateUtils;import com.rongke.utils.ans.MapUtils;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.Query;import com.rongke.utils.ans.R;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.xml.crypto.Data;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.util.*;/** * @OrderServiceImpl * @订单ServiceImpl * @version : Ver 1.0 */@Servicepublic class OrderServiceImpl extends ServiceImpl<OrderMapper, Order> implements OrderService {    @Autowired    private OrderMapper orderMapper;    @Autowired    private ParamSettingMapper paramSettingMapper;    @Autowired    private EvaluationMapper evaluationMapper;    @Autowired    private AdminService adminService;    @Autowired    private UserService userService;    @Autowired    private EvaluationService evaluationService;//审核单    @Autowired    private RepayRecordService repayRecordService;//还款记录    @Autowired    private ParamSettingService paramSettingService;//借贷协议    @Autowired    private ChannelService channelService;    /**     * @param order     * @return     * @根据条件查找订单     */    public List<Order> selectByCondition(Order order) {        return orderMapper.selectByCondition(order);    }    public List<Order> selectOrderPage(Map selectmap) {        return orderMapper.selectOrderPage(selectmap);    }    public Integer selectOrderPageSize(Map selectmap) {        return orderMapper.selectOrderPageSize(selectmap);    }    public List<Order> selectOrderNotPage(Map map) {        return orderMapper.selectOrderNotPage(map);    }    public Order orderStatus(Map<String,Object> params){        Order order = this.selectOne(new EntityWrapper<Order>().setSqlSelect("case when status='已完结' then '已完结' when DATEDIFF(gmt_datetime,NOW())<-1 then '已付租' when DATEDIFF(gmt_datetime,NOW())=-1 then '待付租' when DATEDIFF(gmt_datetime,NOW())=-1 then '已逾期' end as 'status' ")                .eq(StringUtils.isNotBlank((String)params.get("evaluationId")),"evaluation_id", params.get("evaluationId"))        );        return order;    }    public Order selectPayOrder(Long orderId, Integer days) {        Order order = orderMapper.selectById(orderId);        Date date = DateUtils.dayAdd(days - 1);        Evaluation evaluation = evaluationMapper.selectById(order.getEvaluationId());        ParamSetting ps = paramSettingMapper.selectById(evaluation.getParamSettingId());        Date gmtDateTime = order.getGmtDatetime();                      //创建时间        Date uptDateTime = order.getUptDatetime();                      //付款时间        BigDecimal price = evaluation.getRentMoney();                   //评估价格        Integer decreaseDay = Integer.valueOf(ps.getDecreaseDay());     //日租金递减触发天数条件        BigDecimal decreaseproPortion = new BigDecimal(ps.getDecreaseproPortion()); //日租金递减比例        BigDecimal rentDayPortion = new BigDecimal(ps.getRentDayMoney());           //日租金比例        BigDecimal rentDayLeastPortion = new BigDecimal(ps.getLeastRentDayMoney()); //最低日租金比例        Integer borrowDays = DateUtils.differentDays(gmtDateTime, date);        //计算总共租赁天数        Integer uptDays = DateUtils.differentDays(gmtDateTime, uptDateTime);    //已经还款多少天        Integer count = 0;        if(borrowDays!=0){            count= borrowDays % decreaseDay == 0 ? borrowDays / decreaseDay - 1 : borrowDays / decreaseDay; //递减次数        }        Integer uptcount=0;        if(uptDays!=0){            uptcount = uptDays % decreaseDay == 0 ? uptDays / decreaseDay - 1 : uptDays / decreaseDay;//上次还款时间处在哪个递减区间段        }        BigDecimal uptProton = rentDayPortion.subtract(decreaseproPortion.multiply(new BigDecimal(uptcount)));//上次还款租金比率        int n = count - uptcount;        BigDecimal totalDayMoney = null;//上次还款到现在应还租金        BigDecimal nProton = null;        if (n == 0) {            totalDayMoney = uptProton.multiply(price).multiply(new BigDecimal(days));        }        for (int i = 1; i <= n; i++) {            nProton = uptProton.subtract(decreaseproPortion.multiply(new BigDecimal(i)));            if (nProton.compareTo(rentDayLeastPortion) < 0) {                nProton = rentDayLeastPortion;            }            if (n == 1) {                totalDayMoney = new BigDecimal((uptcount + 1) * decreaseDay - uptDays).multiply(uptProton).add(nProton.multiply(new BigDecimal(borrowDays - (uptcount + 1) * decreaseDay))).multiply(price);                break;            }            if (i == 1) {                totalDayMoney = new BigDecimal((uptcount + 1) * decreaseDay - uptDays).multiply(uptProton).add(nProton.multiply(new BigDecimal(decreaseDay))).multiply(price);            } else if (i == n) {                totalDayMoney = totalDayMoney.add(new BigDecimal(borrowDays - count * decreaseDay).multiply(nProton).multiply(price));            } else {                totalDayMoney = totalDayMoney.add(nProton.multiply(price).multiply(new BigDecimal(decreaseDay)));            }        }        order.setOweTotalMoney(totalDayMoney.setScale(2, BigDecimal.ROUND_HALF_UP).toString());        return order;    }    public Integer selectLastCollectionAdminId() {        return orderMapper.selectLastCollectionAdminId();    }    public List<Order> selectNeedPayOrdersList() {        return orderMapper.selectNeedPayOrdersList();    }    public List<Order> selectPayFailOrderList() {        return orderMapper.selectPayFailOrderList();    }    public List<Order> selectPayFailOrderListToday() {        return orderMapper.selectPayFailOrderListToday();    }    public BigDecimal selectOverTimeMoney(Long orderId) {        Order order=orderMapper.selectOrderById(orderId);        Evaluation evaluation=order.getEvaluation();        ParamSetting ps=evaluation.getParamSetting();        Integer days = DateUtils.differentDays(order.getUptDatetime(),new Date()) - 1;  //计算连续逾期天数        Integer punishday=Integer.valueOf(ps.getPunishmentOvertimeDay());        String punishovertimeMoney=ps.getPunishmentOvertimeMoney();        String overtimeMoney=ps.getOvertimeMoney();        BigDecimal price = evaluation.getRentMoney();        Integer overtimeDay = Integer.valueOf(ps.getOvertimeDay());//收取超时费用的逾期天数        BigDecimal totalMoney=null;//超时费        if(days > punishday){ //计算惩罚性超时费            //超时费用            BigDecimal overtimePrice=price.multiply(new BigDecimal(overtimeMoney)).multiply(new BigDecimal(overtimeDay));            //惩罚性超时费            BigDecimal punishmentPrice =price.multiply(new BigDecimal(punishovertimeMoney)).multiply(new BigDecimal(days+1-punishday));            totalMoney=overtimePrice.add(punishmentPrice).setScale(2,BigDecimal.ROUND_HALF_UP);        }else if (days > overtimeDay){ //计算超时费            totalMoney = price.multiply(new BigDecimal(overtimeMoney)).multiply(new BigDecimal(days+1)).setScale(2,BigDecimal.ROUND_HALF_UP);        }else {            totalMoney=new BigDecimal("0");        }        return totalMoney;    }    @Override    public R orderRenewal(Long orderId, String number) {        Order order = this.selectById(orderId);        if(StringUtils.isBlank(number)){            return R.error("还款金额不能为空");        }        if(order==null){            return R.error("订单不存在无法续期");        }        if(order.getUptDatetime()==null){            return R.error("待出款无法手动续期");        }        Evaluation evaluation = evaluationService.selectById(order.getEvaluationId());        if(evaluation == null){            return R.error("申请单不存在");        }        BigDecimal money = new BigDecimal("0");        long days = DateUtils.getDistanceDays(DateUtils.dateSimpleSFM(order.getUptDatetime()), DateUtils.nowDate());        Integer day = 0;        RepayRecord repayRecord=new RepayRecord();        if(days>1){//逾期            ParamSetting paramSetting = paramSettingService.selectById(evaluation.getParamSettingId());            if(paramSetting==null){                paramSetting = new ParamSetting();                paramSetting.setOvertimeMoney("0.06");            }            money = money.add(evaluation.getRentMoney().multiply(new BigDecimal(paramSetting.getOvertimeMoney())).multiply(new BigDecimal(String.valueOf(days-1))));            money = money.add(order.getDayRent().multiply(new BigDecimal("7")));            day = Integer.valueOf(String.valueOf(days-1));            order.setUptDatetime(DateUtils.dayAdd(day+6,order.getUptDatetime()));            repayRecord.setType(2);        }else{            money = money.add(order.getDayRent().multiply(new BigDecimal("7")));            day = 6;            order.setUptDatetime(DateUtils.dayAdd(day,order.getUptDatetime()));            repayRecord.setType(1);        }        if(new BigDecimal(number).compareTo(money)!=0){            return R.error("【续期金额错误】正确金额为："+money.stripTrailingZeros().toPlainString());        }        repayRecord.setUserId(evaluation.getUserId());        repayRecord.setOrderId(order.getId());        repayRecord.setMoney(new BigDecimal(number));        repayRecord.setDays(day);        repayRecord.setPayType(1);        repayRecord.setGmtDatetime(new Date());        repayRecord.setUptDatetime(new Date());        this.updateById(order);        repayRecordService.insert(repayRecord);        //添加还款记录        return R.ok("续期成功");    }    /**     * 查询所有订单列表     */    public PageUtils orderPage(Map<String, Object> params) {        String time1 = (String) params.get("time1");        String time2 = (String) params.get("time2");        String status = (String) params.get("status");        String adminId = (String) params.get("adminId");//催讨        String search =  (String)params.get("search");        String jknum = (String) params.get("jknum");        String channelId = (String) params.get("channelId");        String updTime1 = (String) params.get("time3");        String updTime2 = (String) params.get("time4");        String daikouStatus = (String) params.get("daikouStatus");        List<Long> userIds = Lists.newArrayList();        List<Long> evaIds = Lists.newArrayList();//用户对应审核单        List<User> users = Lists.newArrayList(); //接待人员信息        Wrapper<User> pq = new EntityWrapper<User>()                .setSqlSelect("id,real_name as realName,phone,source");        if (StringUtils.isNotBlank(search) || StringUtils.isNotBlank(channelId) ){            if (StringUtils.isNotBlank(search) && StringUtils.isNotBlank(channelId)) {                search = "%" + search + "%";                pq.eq("source", channelId);                pq.where("real_name like {0} or phone like {1}", search, search);            } else if (StringUtils.isBlank(search) && StringUtils.isNotBlank(channelId)) {                pq.eq("source", channelId);            } else if (StringUtils.isNotBlank(search) && StringUtils.isBlank(channelId)) {                search = "%" + search + "%";                pq.where("real_name like {0} or phone like {1}", search, search);            }            users = userService.selectList(pq);            for(User u:users){                if(!userIds.contains(u.getId())){                    userIds.add(u.getId());                }            }            if(!userIds.isEmpty()){                List<Evaluation> evaluations = evaluationService.selectList(new EntityWrapper<Evaluation>().in("user_id", userIds));                for(Evaluation e:evaluations){                    evaIds.add(e.getId());                }            }        }        Wrapper<Order> wq = new EntityWrapper<Order>()                .in(!evaIds.isEmpty(), "evaluation_id", evaIds);        if(StringUtils.isNotBlank(time1)&&StringUtils.isNotBlank(time2)){            time1 = DateUtils.dayAdd(-1, (String) params.get("time1"));            time2 = DateUtils.dayAdd(-1, (String) params.get("time2"));            wq.between(StringUtils.isNotBlank(time1) && StringUtils.isNotBlank(time2), "upt_datetime", time1, time2);        }        if (StringUtils.isNotBlank(updTime1) && StringUtils.isNotBlank(updTime2)) {            time1 = DateUtils.dayAdd(-1, (String) params.get("time3"));            time2 = DateUtils.dayAdd(-1, (String) params.get("time4"));            wq.where(StringUtils.isNotBlank(time1) && StringUtils.isNotBlank(time2), "DATE_FORMAT(gmt_datetime,'%Y-%m-%d') BETWEEN DATE_FORMAT({0},'%Y-%m-%d') and DATE_FORMAT({1},'%Y-%m-%d')", time1, time2);        }        if(StringUtils.isNotBlank(adminId)){            wq.eq(StringUtils.isNotBlank(adminId),"admin_id",adminId);        }        if (StringUtils.isNotBlank(jknum)) {            wq.eq(StringUtils.isNotBlank(jknum), "hm_time", jknum);        }        if (StringUtils.isNotBlank(daikouStatus)) {            wq.eq(StringUtils.isNotBlank(daikouStatus), "daikou_status", daikouStatus);        }        if(StringUtils.isNotBlank(status)){//订单状态            if("已付租".equals(status)){                wq.where("DATEDIFF(upt_datetime,now()) >= {0}","0");            }else if("待付租".equals(status)){                wq.where("DATEDIFF(upt_datetime,now()) = {0}","-1");            }else if("已欠租".equals(status)){                wq.where("DATEDIFF(upt_datetime,now()) < {0}","-1");                wq.orderAsc(Arrays.asList("upt_datetime"));            }else if("已完结".equals(status)){                wq.eq(StringUtils.isNotBlank(status),"status","已完结");            }            if(!"已完结".equals(status)){                wq.ne(StringUtils.isNotBlank(status),"status","已完结");            }            //排序            if(!"已欠租".equals(status)){                wq.orderDesc(Arrays.asList("upt_datetime"));            }        }else{            wq.orderDesc(Arrays.asList("upt_datetime"));        }        Page<Order> orderPage = this.selectPage(new Query<Order>(params).getPage(),wq);        List<Integer> adminIds = Lists.newArrayList();//催款人员        List<Long> evaluationIds = Lists.newArrayList();//订单对应审核单信息        for(Order o:orderPage.getRecords()){            if(o.getAdminId()!=null&&!adminIds.contains(o.getAdminId())){                adminIds.add(o.getAdminId());            }            if(o.getEvaluationId()!=null&&!evaluationIds.contains(o.getEvaluationId())){                evaluationIds.add(o.getEvaluationId());            }        }        List<Admin> adminList = Lists.newArrayList();        if(!adminIds.isEmpty()){            adminList = adminService.selectList(new EntityWrapper<Admin>().setSqlSelect("id,name").in("id", adminIds));        }        List<Evaluation> evaluations = Lists.newArrayList();        if(!evaluationIds.isEmpty()){            evaluations = evaluationService.selectList(new EntityWrapper<Evaluation>()                    .in("id", evaluationIds)            );            if(!evaluations.isEmpty()){//设置借贷人员                if(userIds.isEmpty()){//没有进行个人查询就获得所有审核单的内容                    for(Evaluation e:evaluations){                        if(e.getUserId()!=null&&!userIds.contains(e.getUserId())){                            userIds.add(e.getUserId());                        }                    }                    if(!userIds.isEmpty()){                        users = userService.selectBatchIds(userIds);                    }                }                //设置人员                if(!users.isEmpty()){                    for(Evaluation e:evaluations){                        for(User u:users){                            if(e.getUserId()!=null&&e.getUserId().equals(u.getId())){                                if(u.getSource()!=null){                                    Channel channel = channelService.selectById(u.getSource());                                    if(channel==null){                                        channel = channelService.selectOne(new EntityWrapper<Channel>().eq("name", u.getSource()));                                    }                                    u.setSource(channel.getName());                                }                                e.setUser(u);                            }                        }                    }                }            }        }        for(Order o:orderPage.getRecords()){            if(!adminIds.isEmpty()){                for(Admin a:adminList){//设置催收人员                    if(o.getAdminId()!=null&&o.getAdminId().equals(a.getId())){                        o.setAdmin(a);                    }                }            }            if(!evaluations.isEmpty()){                for(Evaluation e:evaluations){//设置订单对应的审核单                    if(o.getEvaluationId()!=null&&o.getEvaluationId().equals(e.getId())){                        o.setEvaluation(e);                    }                }            }            orderStatusFilter(o);            String encryptionXx = (String) params.get("encryptionXx");            if(!o.getStatus().equals(OrderStatusEnum.PENDING_MONEY.getTypeName())&&StringUtils.isNotBlank(encryptionXx)&&encryptionXx.equals("1")){                o.getEvaluation().getUser().setPhone(o.getEvaluation().getUser().getPhone().replaceAll("(\\d{3})\\d{4}(\\d{4})","$1****$2"));            }        }        return new PageUtils(orderPage);    }    /**     * 订单统计 （数据权限）卡片使用     * @Ans     */    public R orderAdminTJ(Map<String, Object> params) {        Integer adminId = (Integer)params.get("adminId");//用户ID        Wrapper<Order> eq = new EntityWrapper<Order>()                .where("(e.status={0} or e.status={1})", EvaluationEnum.PASS.getTypeName(),EvaluationEnum.END.getTypeName());        if(adminId!=null){            eq.eq( adminId!=null,"o.admin_id",adminId);        }        Map<String, Object> TJ = baseMapper.orderAdminTJ(eq);        System.out.println(TJ);        return R.ok().put("data",TJ);    }    /**     * 订单统计     */    /**     * 订单总统计 用于曲线图     * @Ans     * TODO     */    public R orderStatistics(Map<String, Object> params){        String type = (String) params.get("type");//1年 2月        String time = (String) params.get("time");//时间        Integer adminId = (Integer)params.get("adminId");//用户ID        List<Order> orders = Lists.newArrayList();        Wrapper<Order> orderWrapper = new EntityWrapper<Order>()                .where("(e.status={0} or e.`status`={1})", EvaluationEnum.PASS.getTypeName(),EvaluationEnum.END.getTypeName());        if(adminId!=null){            orderWrapper.eq(adminId!=null,"o.admin_id",adminId);        }        if("1".equals(type)){//年            if(StringUtils.isNotBlank(time)){//判断查询是否存在不存在就直接查询所有年                orderWrapper.where("DATE_FORMAT(o.gmt_datetime,'%Y') = DATE_FORMAT({0},'%Y')",time);            }            orderWrapper.groupBy("DATE_FORMAT(o.gmt_datetime,'%Y-%m')");            orders = baseMapper.orderTJYear(orderWrapper);        }else if("2".equals(type)){//月            if(StringUtils.isNotBlank(time)){//判断查询是否存在不存在就直接查询所有年                orderWrapper.where("DATE_FORMAT(o.gmt_datetime,'%Y-%m') = DATE_FORMAT({0},'%Y-%m')",time);            }            orderWrapper.groupBy("DATE_FORMAT(o.gmt_datetime,'%Y-%m-%d')");            orders = baseMapper.orderTJMonth(orderWrapper);        }        return R.ok().put("data",orderSqxt(orders));    }    /**     *  统计操作 曲线图操作     *    {     name:'订单总金额',     type:'line',     stack: '总量',     data:[12008, 132, 101, 134, 90, 230, 210]     },     @Ans     */    public  Map<String,Object> orderSqxt(List<Order> orders){        Map<String,Object> tjMoneyConut = Maps.newHashMap();    //订单总金额        Map<String,Object> tjCollectMoney = Maps.newHashMap();  //已收总额        Map<String,Object> tjRealPay = Maps.newHashMap();       //真实打款        Map<String,Object> tjOverdueMoney = Maps.newHashMap();  //剩余未收        tjMoneyConut.put("name","订单总金额");        tjCollectMoney.put("name","已收金额");        tjRealPay.put("name","实际打款");        tjOverdueMoney.put("name","剩余未收");        tjMoneyConut.put("type","line");        tjCollectMoney.put("type","line");        tjRealPay.put("type","line");        tjOverdueMoney.put("type","line");        tjMoneyConut.put("stack","总量");        tjCollectMoney.put("stack","总量");        tjRealPay.put("stack","总量");        tjOverdueMoney.put("stack","总量");        String [] data = new String[orders.size()];        BigDecimal [] tjMoneyConuts = new BigDecimal[orders.size()];        BigDecimal [] tjCollectMoneys = new BigDecimal[orders.size()];        BigDecimal [] tjRealPays = new BigDecimal[orders.size()];        BigDecimal [] tjOverdueMoneys = new BigDecimal[orders.size()];        Integer i = 0;        for(Order o:orders){            data[i] = o.getTjDate();            tjMoneyConuts[i]=o.getTjMoneyConut();            tjCollectMoneys[i]=o.getTjCollectMoney();            tjRealPays[i]=o.getTjRealPay();            tjOverdueMoneys[i]=o.getTjOverdueMoney();            i++;        }        tjMoneyConut.put("data",tjMoneyConuts);        tjCollectMoney.put("data",tjCollectMoneys);        tjRealPay.put("data",tjRealPays);        tjOverdueMoney.put("data",tjOverdueMoneys);        List<Map<String,Object>> list = Lists.newArrayList();        list.add(tjMoneyConut);        list.add(tjCollectMoney);        list.add(tjRealPay);        list.add(tjOverdueMoney);        return new MapUtils().put("series",list).put("data",data);    }    /**     *  计算订单列表状态以及金额     */    public void orderStatusFilter(Order order){        if(StatusEnum.OVER.getTypeName().equals(order.getStatus())||order.getUptDatetime()==null){//完结订单            order.setRefundTime("无");//应还时间            order.setOvertimeMoney("0");//超时费费用            order.setOweTotalMoney("0");// 合计应还金额            Evaluation evaluation = order.getEvaluation();            order.setOweRentMoney(evaluation.getRentMoney().stripTrailingZeros().toPlainString());//借款金额            order.setOweRentTime("0");//欠租天数            if (order.getUptDatetime() != null) {                if(!DateUtils.dateSimple(order.getUptDatetime()).equals(DateUtils.dateSimple(order.getGmtDatetime()))){                    order.setTotalDays(String.valueOf(DateUtils.getDistanceDays(DateUtils.dateSimple(order.getGmtDatetime()), DateUtils.dateSimple(order.getUptDatetime())) + 2));//总借款天数                }else{                    order.setTotalDays(String.valueOf(1));//总借款天数                }            } else {                order.setTotalDays("未知");//借款天数            }        }else if(!OrderStatusEnum.NOT_ARRIVAL.getTypeName().equals(order.getStatus())){//不是待出款单子            long i = DateUtils.getDistanceDays(DateUtils.dateSimple(order.getUptDatetime()),DateUtils.dateSimple(new Date()));            if(i<=1){//未逾期                Evaluation evaluation = order.getEvaluation();                order.setOvertimeMoney("0");//超时费费用                order.setOweTotalMoney(evaluation.getRentMoney().stripTrailingZeros().toPlainString());// 合计应还金额                order.setOweRentMoney(evaluation.getRentMoney().stripTrailingZeros().toPlainString());//借款金额                order.setOweRentTime("0");//欠租天数                order.setRefundTime(DateUtils.dateSimple(DateUtils.dayAdd(1, order.getUptDatetime())));//还款时间                if (order.getUptDatetime() != null) {                    if(!DateUtils.dateSimple(order.getUptDatetime()).equals(DateUtils.dateSimple(order.getGmtDatetime()))){                        order.setTotalDays(String.valueOf(DateUtils.getDistanceDays(DateUtils.dateSimple(order.getGmtDatetime()), DateUtils.dateSimple(order.getUptDatetime())) + 2));//总借款天数                    }else{                        order.setTotalDays(String.valueOf(1));//总借款天数                    }                } else {                    order.setTotalDays("未知");                }                if(i<1){                    order.setStatus("已付租");                }else if(i==1){                    order.setStatus("待付租");                }            }else if(i>1){//逾期了开始计算金额                order.setOweRentTime(String.valueOf(i-1));//欠租天数                order.setRefundTime(DateUtils.dateSimple(DateUtils.dayAdd(1,order.getUptDatetime())));//还款时间                //计算超时费                if(order.getEvaluation()!=null){                    //超时逾期费设置                    Evaluation evaluation = order.getEvaluation();                    //获得申请单参数                    ParamSetting paramSetting = evaluation.getParamSetting();                    if(paramSetting==null){                        paramSetting = paramSettingService.selectById(evaluation.getParamSettingId());                    }                    BigDecimal money = (evaluation.getRentMoney()).multiply(new BigDecimal(paramSetting.getOvertimeMoney())).multiply(new BigDecimal(order.getOweRentTime()));                    if (money.compareTo(new BigDecimal("5000")) == 1) {                        money = new BigDecimal("5000");                    }                    order.setOweRentMoney(evaluation.getRentMoney().stripTrailingZeros().toPlainString());//借贷多少                    order.setOvertimeMoney(money.stripTrailingZeros().toPlainString());//超时费费用                    BigDecimal zong = money.add(evaluation.getRentMoney());                    order.setOweTotalMoney(zong.stripTrailingZeros().toPlainString());//合计应还金额                    //借贷总时间                    long i1 = DateUtils.getDistanceDays(DateUtils.dateSimple(order.getGmtDatetime()), DateUtils.dateSimple(order.getUptDatetime())) + 2;                    order.setTotalDays(String.valueOf(i1));//总借款天数                    order.setStatus("已欠租");                }            }        }    }    /**     * 催收手动分配     */    public R collectionUrge(Map<String,Object> params){        adminService.findLoginUser();        if(StringUtils.isBlank((String)params.get("orderIds"))){            return R.error("参数不足");        }        String [] orderIds = ((String) params.get("orderIds")).split(",");        String type = (String) params.get("type");        Order order = new Order();        if(StringUtils.isBlank(type)||type.equals("1")){            order.setAdminId(0);        }else{            if(StringUtils.isBlank((String) params.get("adminIds"))){                return R.error("参数不足");            }            String [] adminId = ((String) params.get("adminIds")).split(",");            order.setAdminId(Integer.valueOf(adminId[0]));        }        this.update(order,new EntityWrapper<Order>().in("id",Arrays.asList(orderIds)));        return R.ok();    }    /****     * 报表统计     * */    public OrderSum orderCount() {        OrderSum orderSum = new OrderSum();        Map map1 = null;        Map mapsql=new HashMap();        mapsql.put("loancount","2");//查询老用户生成的订单        mapsql.put("startime",addOneDay(-1));//开始计算时间区间 轴距开始点        mapsql.put("endtime",addOneDay(0));//时间轴距结束范围        mapsql.put("deadline",addOneDay(6));//时间轴距结束        mapsql.put("deadlineend",addOneDay(7));        map1 = orderMapper.CXDDYHJEDHK(mapsql);        if (map1.get("sum_amount") != null && !"".equals(map1.get("sum_amount"))) {            orderSum.setSum_amount(map1.get("sum_amount").toString());        } else {            orderSum.setSum_amount("0");        }        if (map1.get("sum_qk") != null && !"".equals(map1.get("sum_qk"))) {            orderSum.setSum_qk(map1.get("sum_qk").toString());        } else {            orderSum.setSum_qk("0");        }             //查询新的        mapsql.put("loancount","1");        map1 = orderMapper.CXDDYHJEDHK(mapsql);        if (map1.get("sum_amount") != null && !"".equals(map1.get("sum_amount"))) {            orderSum.setNew_sum_amount(map1.get("sum_amount").toString());        } else {            orderSum.setNew_sum_amount("0");        }        if (map1.get("sum_qk") != null && !"".equals(map1.get("sum_qk"))) {            orderSum.setSum_new_qk(map1.get("sum_qk").toString());        } else {            orderSum.setSum_new_qk("0");        }        //查询按时还款笔数金额        mapsql.put("loancount","2");//查询老用户生成的订单        Map map2=orderMapper.HKBSORASHKJEORBL(mapsql);        if (map2.get("ASHKBS") != null && !"".equals(map2.get("ASHKBS"))) {            orderSum.setAmount(map2.get("ASHKBS").toString());        } else {            orderSum.setAmount("0");        }        if (map2.get("ANSHKJE") != null && !"".equals(map2.get("ANSHKJE"))) {            orderSum.setQk(map2.get("ANSHKJE").toString());        } else {            orderSum.setQk("0");        }        //查询新的        mapsql.put("loancount","1");//查询老用户生成的订单        map2 = orderMapper.HKBSORASHKJEORBL(mapsql);        if (map2.get("ASHKBS") != null && !"".equals(map2.get("ASHKBS"))) {            orderSum.setNew_amount(map2.get("ASHKBS").toString());        } else {            orderSum.setNew_amount("0");        }        if (map2.get("ANSHKJE") != null && !"".equals(map2.get("ANSHKJE"))) {            orderSum.setNew_qk(map2.get("ANSHKJE").toString());        } else {            orderSum.setNew_qk("0");        }        //按时还款比总         Map map3=orderMapper.ASHKBCOUNT(mapsql);        if (map3.get("ASHKBSCOUNT")!=null && !"".equals(map3.get("ASHKBSCOUNT"))){            BigDecimal bigDecimal=new BigDecimal(map3.get("ASHKBSCOUNT").toString());            if (!"0".equals(orderSum.getAmount())) {                orderSum.setAshkb(bigDecimal.divide(new BigDecimal(orderSum.getAmount())).multiply(new BigDecimal(100)).setScale(2, BigDecimal.ROUND_HALF_UP).toString()+"%");            }else{                orderSum.setAshkb("0%");            }            if (!"0".equals(orderSum.getNew_amount())) {                orderSum.setNew_ashkb(bigDecimal.divide(new BigDecimal(orderSum.getNew_amount())).multiply(new BigDecimal(100)).setScale(2, BigDecimal.ROUND_HALF_UP).toString()+"%");            }else{                orderSum.setNew_ashkb("0%");            }        }else{            orderSum.setNew_ashkb("0%");            orderSum.setAshkb("0%");        }        //查询三天        Map mapsqlBl=new HashMap();        mapsqlBl.put("loancount","2");//查询老用户生成的订单        mapsqlBl.put("startime",addOneDay(-1));//开始计算时间区间 轴距开始点        mapsqlBl.put("endtime",addOneDay(0));//时间轴距结束范围        mapsqlBl.put("deadline",addOneDay(5));//时间轴距结束        mapsqlBl.put("enddeadline",addOneDay(10)); //三天        //查询老用户        Map map5=orderMapper.YQSANT(mapsqlBl);        //查询新用户        mapsqlBl.put("loancount","1");//查询老用户生成的订单        Map map6=orderMapper.YQSANT(mapsqlBl);        String valuemap5=(map5.get("YQST")!=null && map5.get("YQST")!="")?map5.get("YQST").toString():"0";        String valuemap6=(map6.get("YQST")!=null && map6.get("YQST")!="")?map6.get("YQST").toString():"0";        //计算预期比率       BigDecimal bigDecimal3=new BigDecimal(valuemap5);       if (bigDecimal3.compareTo(BigDecimal.ZERO)==1){           //老用户还款比           if (!"0".equals(valuemap5)){               orderSum.setStwhdsb(bigDecimal3.divide(new BigDecimal(valuemap5)).multiply(new BigDecimal(100)).toString()+"%");           }else{               orderSum.setStwhdsb("0%");           }           if (!"0".equals(valuemap6)){               //新用户还款比               orderSum.setNew_stwhdsb(bigDecimal3.divide(new BigDecimal(valuemap6)).multiply(new BigDecimal(100)).toString()+"%");           }else{               //新用户还款比               orderSum.setNew_stwhdsb("0%");           }       }else{           //老用户还款比           orderSum.setStwhdsb("0%");           //新用户还款比           orderSum.setNew_stwhdsb("0%");       }        //查询七天        mapsqlBl.put("loancount","2");//查询老用户生成的订单        mapsqlBl.put("enddeadline",addOneDay(14)); //七天        //查询老用户        Map map7=orderMapper.YQSANT(mapsqlBl);        //查询新用户        mapsqlBl.put("loancount","1");//查询老用户生成的订单        Map map8=orderMapper.YQSANT(mapsqlBl);        String valuemap7=(map7.get("YQST")!=null && map7.get("YQST")!="")?map7.get("YQST").toString():"0";        String valuemap8=(map8.get("YQST")!=null && map8.get("YQST")!="")?map8.get("YQST").toString():"0";        //计算预期比率        BigDecimal bigDecimal4=new BigDecimal(valuemap7);        if (bigDecimal4.compareTo(BigDecimal.ZERO)==1){            if(!"0".equals(valuemap7)){                //老用户还款比                orderSum.setQtwhdsb(bigDecimal4.divide(new BigDecimal(valuemap7)).multiply(new BigDecimal(100)).toString()+"%");            }else{                orderSum.setQtwhdsb("0%");            }            if(!"0".equals(valuemap8)){                //新用户还款比                orderSum.setNew_qtwhdsb(bigDecimal4.divide(new BigDecimal(valuemap8)).multiply(new BigDecimal(100)).toString()+"%");            }else {                //新用户还款比                orderSum.setNew_qtwhdsb("0%");            }            }else{            //老用户还款比            orderSum.setQtwhdsb("0%");            //新用户还款比            orderSum.setNew_qtwhdsb("0%");        }        //三十天        mapsqlBl.put("loancount","2");//查询老用户生成的订单        mapsqlBl.put("enddeadline",addOneDay(37)); //三十天        //查询老用户        Map map9=orderMapper.YQSANT(mapsqlBl);        //查询新用户        mapsqlBl.put("loancount","1");//查询老用户生成的订单        Map map10=orderMapper.YQSANT(mapsqlBl);        String valuemap9=(map9.get("YQST")!=null && map9.get("YQST")!="")?map9.get("YQST").toString():"0";        String valuemap10=(map10.get("YQST")!=null && map10.get("YQST")!="")?map10.get("YQST").toString():"0";        //计算预期比率        BigDecimal bigDecimal5=new BigDecimal(valuemap9);        if (bigDecimal5.compareTo(BigDecimal.ZERO)==1){            if(!"0".equals(valuemap9)){                //老用户还款比                orderSum.setSstwhds(bigDecimal5.divide(new BigDecimal(valuemap9)).multiply(new BigDecimal(100)).toString()+"%");            }else{                orderSum.setSstwhds("0%");            }            if(!"0".equals(valuemap10)){                //新用户还款比                orderSum.setNew_sstwhds(bigDecimal5.divide(new BigDecimal(valuemap10)).multiply(new BigDecimal(100)).toString()+"%");            }else {                //新用户还款比                orderSum.setNew_sstwhds("0%");            }           }else{            //老用户还款比            orderSum.setSstwhds("0%");            //新用户还款比            orderSum.setNew_sstwhds("0%");        }        orderSum.setDate(addOneDay(-1));//生成前一天时间        orderSum.setGeDatetime(new Date());        return orderSum;    }    public String addOneDay(Integer num)    {        String add = null;        try {            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");            Calendar begin=Calendar.getInstance();            begin.setTime(new Date());            begin.add(Calendar.DAY_OF_MONTH,num);            add = df.format(begin.getTime());        } catch (Exception e) {        // TODO: handle exception            e.printStackTrace();        }        System.out.println("得到当前时间:"+add);        return add;    }    /****     * 报表统计     * */    public PageUtils orderSelectAll(Map params) {        params.put("pageNo", (Integer.valueOf(params.get("page").toString()) - 1) * Integer.parseInt(params.get("limit").toString()));        params.put("pageSize", Integer.parseInt(params.get("limit").toString()));        List<OrderSum> orderSumList = orderMapper.selectReport(params);        Integer count = orderMapper.selectReportCount(params);        if (orderSumList.size() != 0) {            for (OrderSum orderSum : orderSumList) {                if ("0".equals(orderSum.getSum_amount())) {                    orderSum.setStwhdsb("0%");                    orderSum.setQtwhdsb("0%");                    orderSum.setSstwhds("0%");                    orderSum.setAshkb("0%");                    orderSum.setOrdersCount("0%");                } else {                    BigDecimal b1 = new BigDecimal(orderSum.getStwhdsb()).divide(new BigDecimal(orderSum.getSum_amount()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100));                    BigDecimal b2 = new BigDecimal(orderSum.getQtwhdsb()).divide(new BigDecimal(orderSum.getSum_amount()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100));                    BigDecimal b3 = new BigDecimal(orderSum.getSstwhds()).divide(new BigDecimal(orderSum.getSum_amount()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100));                    BigDecimal b4 = new BigDecimal(orderSum.getAmount()).divide(new BigDecimal(orderSum.getSum_amount()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100));                    orderSum.setStwhdsb(new BigDecimal(orderSum.getStwhdsb()).divide(new BigDecimal(orderSum.getSum_amount()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100)).toString() + "%");                    orderSum.setQtwhdsb(new BigDecimal(orderSum.getQtwhdsb()).divide(new BigDecimal(orderSum.getSum_amount()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100)).toString() + "%");                    orderSum.setSstwhds(new BigDecimal(orderSum.getSstwhds()).divide(new BigDecimal(orderSum.getSum_amount()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100)).toString() + "%");                    orderSum.setAshkb(new BigDecimal(orderSum.getAmount()).divide(new BigDecimal(orderSum.getSum_amount()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100)).toString() + "%");                    orderSum.setOrdersCount(b1.add(b2).add(b3).add(b4).toString() + "%");                }                if ("0".equals(orderSum.getNew_sum_amount())) {                    orderSum.setNew_stwhdsb("0%");                    orderSum.setNew_qtwhdsb("0%");                    orderSum.setNew_sstwhds("0%");                    orderSum.setNew_ashkb("0%");                    orderSum.setXinOrders("0%");                } else {                    BigDecimal b1 = new BigDecimal(orderSum.getNew_stwhdsb()).divide(new BigDecimal(orderSum.getNew_sum_amount()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100));                    BigDecimal b2 = new BigDecimal(orderSum.getNew_qtwhdsb()).divide(new BigDecimal(orderSum.getNew_sum_amount()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100));                    BigDecimal b3 = new BigDecimal(orderSum.getNew_sstwhds()).divide(new BigDecimal(orderSum.getNew_sum_amount()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100));                    BigDecimal b4 = new BigDecimal(orderSum.getNew_amount()).divide(new BigDecimal(orderSum.getNew_sum_amount()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100));                    orderSum.setNew_stwhdsb(new BigDecimal(orderSum.getNew_stwhdsb()).divide(new BigDecimal(orderSum.getNew_sum_amount()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100)).toString() + "%");                    orderSum.setNew_qtwhdsb(new BigDecimal(orderSum.getNew_qtwhdsb()).divide(new BigDecimal(orderSum.getNew_sum_amount()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100)).toString() + "%");                    orderSum.setNew_sstwhds(new BigDecimal(orderSum.getNew_sstwhds()).divide(new BigDecimal(orderSum.getNew_sum_amount()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100)).toString() + "%");                    orderSum.setNew_ashkb(new BigDecimal(orderSum.getNew_amount()).divide(new BigDecimal(orderSum.getNew_sum_amount()), 2, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100)).toString() + "%");                    orderSum.setXinOrders(b1.add(b2).add(b3).add(b4).toString() + "%");                }            }        }        Page<OrderSum> page = new Page<OrderSum>();        page.setRecords(orderSumList);        page.setTotal(count);        page.setSize(Integer.parseInt(params.get("limit").toString()));        page.setCurrent(Integer.valueOf(params.get("page").toString()));        return new PageUtils(page);    }    /**     * 更新其余字段     *///    @Override//    public void updateOther(Order order) {//        Map<String,Object> map = new HashMap<>();//        map.put("id",order.getId());//        map.put("uptDatetime",order.getUptDatetime());//        map.put("status",order.getStatus());//        map.put("contractAdress",order.getContractAdress());//        orderMapper.updateOther(map);//    }////    /**//     * 更新所有金额字段//     *///    @Override//    public void updateDaikou(Order order) {//        Map<String,Object> map = new HashMap<>();//        map.put("id",order.getId());//        map.put("daikouStatus",order.getDaikouStatus());//        orderMapper.updateDaikou(map);//    }}