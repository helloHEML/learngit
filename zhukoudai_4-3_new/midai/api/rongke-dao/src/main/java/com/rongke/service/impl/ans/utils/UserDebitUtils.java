package com.rongke.service.impl.ans.utils;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.rongke.model.ans.TblAccountEntity;import com.rongke.model.ans.UserDebitEntity;import com.rongke.utils.DateUtils;import com.rongke.utils.ans.AListUtils;import com.rongke.utils.ans.MapUtils;import com.rongke.utils.ans.StringEncodingUtil;import java.math.BigDecimal;import java.util.Arrays;import java.util.Date;import java.util.List;import java.util.Map;public class UserDebitUtils {    /**     * 得出 Borrower 借款人 Contributor 出款人     */    public static Map<String,Object> getBorrowerORContributor(TblAccountEntity account, UserDebitEntity debit){        Map<String,Object> Borrower = new MapUtils();//出借人        Map<String,Object> Contributor = new MapUtils();//出款人        if(debit.getWechatuserId()==account.getAccountId()){//自己添加的借条            //判断借款还是出款            if(debit.getType().equals("1")){//借款条                //借款人                Borrower.put("fromId",account.getAccountId());                Borrower.put("fromName",account.getAccountName());                Borrower.put("fromHeadUrl",account.getAccountHeadurl());                //出款人                Contributor.put("fromId",debit.getTargetid());                Contributor.put("fromName",debit.getTargetname());                Contributor.put("fromHeadUrl",debit.getFromHeadUrl());            }else{//出款条                //借款人                Borrower.put("fromId",debit.getTargetid());                Borrower.put("fromName",debit.getTargetname());                Borrower.put("fromHeadUrl",debit.getFromHeadUrl());                //出款人                Contributor.put("fromId",account.getAccountId());                Contributor.put("fromName",account.getAccountName());                Contributor.put("fromHeadUrl",account.getAccountHeadurl());            }        }else{//别人的借条            if(debit.getType().equals("1")){//借款条                //借款人                Borrower.put("fromId",debit.getTargetid());                Borrower.put("fromName",debit.getWechatuserName());                Borrower.put("fromHeadUrl",debit.getFromHeadUrl());                //出款人                Contributor.put("fromId",account.getAccountId());                Contributor.put("fromName",account.getAccountName());                Contributor.put("fromHeadUrl",account.getAccountHeadurl());            }else{//出款条                //借款人                Borrower.put("fromId",account.getAccountId());                Borrower.put("fromName",account.getAccountName());                Borrower.put("fromHeadUrl",account.getAccountHeadurl());                //出款人                Contributor.put("fromId",debit.getTargetid());                Contributor.put("fromName",debit.getWechatuserName());                Contributor.put("fromHeadUrl",debit.getFromHeadUrl());            }        }        return new MapUtils().put("Borrower",Borrower).put("Contributor",Contributor);    }    /**     *  借条信用工具类     * @param borrow   借入     * @param lend     借出     * @return     */    public static Map<String,Object> Credit(List<UserDebitEntity> borrow,List<UserDebitEntity> lend){        //借贷记录（借入 借出）        Map<String,Object> accumulative = new MapUtils().put("title","累计金额");        Map<String,Object> numberDebit = new MapUtils().put("title","累计笔数");        Map<String,Object> numberPeople = new MapUtils().put("title","累计人数");        Map<String,Object> sunday = new MapUtils().put("title","日还比例");        Map<String,Object> borrowMoney = new MapUtils().put("title","当前金额");        //逾期记录（钱 次数）        Map<String,Object> beoverdue = new MapUtils().put("title","逾期占比");//百分比        Map<String,Object> numberBeoverdueCount = new MapUtils().put("title","累计逾期");//钱        Map<String,Object> beoverduePeople = new MapUtils().put("title",">=七天预期");        Map<String,Object> beoverduebeoverdue = new MapUtils().put("title","当前逾期");//算今日的        //累计金额        Map<String, Object> borrowMap = totalAmount(borrow);//借入        Map<String, Object> lendMap = totalAmount(lend);//借入        accumulative.put("enter",borrowMap.get("money"));//借入        accumulative.put("come",lendMap.get("money"));//借出        //累计笔数        numberDebit.put("enter",borrowMap.get("i"));//借入        numberDebit.put("come",lendMap.get("i"));//借出        //累计人数        numberPeople.put("enter",totalPeople(borrow));//借入        numberPeople.put("come",totalPeople(lend));//借出        //日还比例        sunday.put("enter",String.valueOf(sunday(borrow)).equals("0.00")?"0%":String.valueOf(sunday(borrow))+"%");//借入        sunday.put("come",sunday(lend)+"%");//借出        //当前金额        borrowMoney.put("enter",borrowMap.get("dmoney"));//借入        borrowMoney.put("come",lendMap.get("dmoney"));//借出        //逾期比例/逾期次数比例/累计逾期/累计次数/>=七天逾期钱/>=七天逾期次数/当前逾期钱百分比/当前逾期次数百分比        //逾越记录        Map<String, Object> beoverdueRecord = beoverdue(borrow);        //逾期占比        beoverdue.put("money",beoverdueRecord.get("data1")); //金额        beoverdue.put("time",beoverdueRecord.get("data2"));//次数        //累计逾期        numberBeoverdueCount.put("money",beoverdueRecord.get("data3")); //金额        numberBeoverdueCount.put("time",beoverdueRecord.get("data4"));//次数        //>=7 七天预期        beoverduePeople.put("money",beoverdueRecord.get("data5")); //金额        beoverduePeople.put("time",beoverdueRecord.get("data6"));//次数        //当前逾期        beoverduebeoverdue.put("money",beoverdueRecord.get("data7")); //金额        beoverduebeoverdue.put("time",beoverdueRecord.get("data8"));//次数        return new MapUtils().put("debit",Arrays.asList(accumulative,numberDebit,numberPeople,sunday,borrowMoney))                .put("beoverdue",Arrays.asList(beoverdue,numberBeoverdueCount,beoverduePeople,beoverduebeoverdue));    }    /**     * 累计金额/累计次数/当前金额     */    public static Map<String,Object> totalAmount(List<UserDebitEntity> borrow){        BigDecimal money = new BigDecimal("0.00");        int i = 0;        BigDecimal dm = new BigDecimal("0.00");        for (UserDebitEntity u:borrow){            if(u.getMoney()!=null){                if(u.getDebitstatus()==2){                    //当前为未还完 的借入金额                    dm = dm.add(u.getMoney());                }else{                    //一还完                }                money = money.add(u.getMoney());                i+=1;            }        }        return new MapUtils().put("money",money.setScale(2).toString()).put("i",i).put("dmoney",dm.setScale(2).toString());    }    /**     * 累计人数     */    public static int totalPeople(List<UserDebitEntity> borrow){        int total = 0;        List<Long> ID = Lists.newArrayList();        for (UserDebitEntity u:borrow){            if(u.getType().equals("1")){                ID.add(u.getTargetid());            }else{                ID.add(u.getWechatuserId());            }        }        List list = AListUtils.removeStringListDupli(ID);        return list.size();    }    /**     * 日还比例     */    public static BigDecimal sunday(List<UserDebitEntity> borrow){        if(borrow.size()==0){            return new BigDecimal("0");        }        BigDecimal total = new BigDecimal(String.valueOf(borrow.size()));        BigDecimal you = new BigDecimal("0");        for(UserDebitEntity u:borrow){            if(u.getOverTime()!=null&& DateUtils.DaysubDay(DateUtils.dateSimpleSFM(u.getOverTime()),DateUtils.dateSimpleSFM(new Date()))==0){                you = you.add(new BigDecimal("1"));            }        }        if(Double.valueOf(total.toString())<=0){            return total;        }        return you.divide(total,2,BigDecimal.ROUND_HALF_UP).setScale(2);    }    /**     * 借入     * 逾期比例/逾期次数比例/累计逾期/累计次数/>=七天逾期钱/>=七天逾期次数/当前逾期钱百分比/当前逾期次数百分比     * /30天待还金额/     */    public static Map<String,Object> beoverdue(List<UserDebitEntity> borrow){        BigDecimal totalMoney = new BigDecimal("0.00");//逾期总金额        BigDecimal money = new BigDecimal("0.00");//逾期金额        BigDecimal qmoney = new BigDecimal("0.00");//大于七天逾期金额        BigDecimal dmoney = new BigDecimal("0.00");//当前逾期金额        int i = 0;   //逾期次数        int zi = borrow.size();//借入总次数        int qc = 0;//>=七天逾期次数        int dc = 0;//>当前逾期次数        for(UserDebitEntity u:borrow){            totalMoney = totalMoney.add(u.getMoney());            if(u.getEndTime()!=null&&u.getDebitstatus()!=1&&u.getDebitstatus()!=3){                if(u.getDebitstatus()==2){                    //还款中查看是否还款                    if(DateUtils.DaysubDay(DateUtils.dateSimpleSFM(u.getEndTime()),DateUtils.dateSimpleSFM(new Date()))>0){                        money = money.add(u.getMoney());//记录 累计逾期钱                        i +=1;//记录累计逾期次数                        dmoney = dmoney.add(u.getMoney());//记录 当前逾期金额                        dc +=1;//记录 当前逾期次数                    }                    if(DateUtils.DaysubDay(DateUtils.dateSimpleSFM(u.getEndTime()),DateUtils.dateSimpleSFM(new Date()))>=7){                        qmoney = qmoney.add(u.getMoney());//记录>=7天 逾期钱                        qc +=1;//记录>7天次数  逾期次数                    }                }else{                    if(DateUtils.DaysubDay(DateUtils.dateSimpleSFM(u.getEndTime()),DateUtils.dateSimpleSFM(u.getOverTime()))>0){                        money = money.add(u.getMoney());                        i +=1;                    }                    if(DateUtils.DaysubDay(DateUtils.dateSimpleSFM(u.getEndTime()),DateUtils.dateSimpleSFM(u.getOverTime()))>=7){                        qmoney = qmoney.add(u.getMoney());//记录>=7天 逾期钱                        qc +=1;//记录>7天次数  逾期次数                    }                }            }        }        //逾期金额比例        String mb = null;        if(Double.valueOf(totalMoney.toString())<=0){            mb = "0";        }else{            mb = money.divide(totalMoney,2,BigDecimal.ROUND_HALF_UP).setScale(2).toString();        }        if(mb.equals("0.00")){            mb = "0";        }        //逾期次数比例        String iz ="0";        if(zi!=0){            iz = new BigDecimal(String.valueOf(i)).divide(new BigDecimal(String.valueOf(zi)),2,BigDecimal.ROUND_HALF_UP).setScale(2).toString();            if(iz.equals("0.00")){                iz ="0";            }        }        //累计逾期        String lm = money.setScale(2).toString();        //累计次数 i        //>=七天逾期钱        String qm = qmoney.setScale(2).toString();        //>=七天逾期次数 qc        //当前逾期金额        String dm = dmoney.setScale(2).toString();        //当前逾期金额 dc        return new MapUtils().put("data1",mb+"%").put("data2",iz+"%").put("data3",lm).put("data4",i)                .put("data5",qm).put("data6",qc).put("data7",dm).put("data8",dc);    }    public static void main(String[] args) {        List<UserDebitEntity> borrow = Lists.newArrayList();        UserDebitEntity u = new UserDebitEntity();        u.setMoney(new BigDecimal("122.00"));        u.setTargetid((long) 456465);        u.setType("1");        UserDebitEntity u2 = new UserDebitEntity();        u2.setMoney(new BigDecimal("122.00"));        u2.setTargetid((long) 456465);        u2.setType("1");        borrow.add(u);        borrow.add(u2);        System.out.println(borrow.toString());        System.err.println(totalPeople(borrow));        System.err.println(System.currentTimeMillis());//        genId();    }    public static String genId(String machineId){        String orderId =                machineId +                        (System.currentTimeMillis() + "").substring(1) +                        (System.nanoTime() + "").substring(7, 10);        System.out.println(orderId);        return orderId;    }    /**     *  累计总 剩下应还钱数  总/7日内/30日内     */    public static Map<String,Object> StillORCollect(List<UserDebitEntity> list){        BigDecimal z = new BigDecimal("0.00");//总        BigDecimal q = new BigDecimal("0.00");//七天，七天内        BigDecimal s = new BigDecimal("0.00");//三十日，三十日内        for(UserDebitEntity u:list){            z = z.add(u.getSurplusMoney());//记录 总            if(DateUtils.DaysubDay(DateUtils.dateSimpleSFM(u.getStartTime()),DateUtils.dateSimpleSFM(u.getEndTime()))<=7){                q = q.add(u.getSurplusMoney());            }            if(DateUtils.DaysubDay(DateUtils.dateSimpleSFM(u.getStartTime()),DateUtils.dateSimpleSFM(u.getEndTime()))<=30){//                s = s.add()            }        }        return new MapUtils();    }}