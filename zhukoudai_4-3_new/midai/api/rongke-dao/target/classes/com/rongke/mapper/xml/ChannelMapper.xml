<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.rongke.mapper.ChannelMapper">    <resultMap type="com.rongke.model.Channel" id="rmChannel">        <id property="id" column="id"/>        <result property="loginName" column="loginName"/>        <result property="name" column="name"/>        <result property="linkUrl" column="linkUrl"/>        <result property="proportion" column="proportion"/>        <result property="password" column="password"/>        <result property="token" column="token"/>        <result property="memberCount" column="memberCount"/>        <result property="applyMoney" column="applyMoney"/>        <result property="outMoney" column="outMoney"/>        <result property="profit" column="profit"/>        <result property="status" column="status"/>    </resultMap>    <resultMap type="com.rongke.model.Channel" id="mChannel">        <id property="id" column="Channel_id"/>        <result property="loginName" column="channel_loginName"/>        <result property="name" column="channel_name"/>        <result property="linkUrl" column="channel_linkUrl"/>        <result property="proportion" column="channel_proportion"/>        <result property="password" column="channel_password"/>        <result property="token" column="channel_token"/>        <result property="memberCount" column="channel_memberCount"/>        <result property="applyMoney" column="channel_applyMoney"/>        <result property="outMoney" column="channel_outMoney"/>        <result property="profit" column="channel_profit"/>        <result property="status" column="channel_status"/>    </resultMap>    <sql id="mChannelPkSql">        channel.id AS channel_id,        channel.login_name AS channel_loginName,        channel.name AS channel_name,        channel.link_url AS channel_linkUrl,        channel.proportion AS channel_proportion,        channel.password AS channel_password,        channel.token AS channel_token,        channel.member_count AS channel_memberCount,        channel.apply_money AS channel_applyMoney,        channel.out_money AS channel_outMoney,        channel.profit AS channel_profit,        channel.status AS channel_status    </sql>    <sql id="mChannelSql">        id AS id,        login_name AS loginName,        name AS name,        link_url AS linkUrl,        proportion AS proportion,        password AS password,        token AS token,        member_count AS memberCount,        apply_money AS applyMoney,        out_money AS outMoney,        profit AS profit,        status AS status    </sql>    <select id="selectByCondition" parameterType="Channel" resultMap="rmChannel">        select        <include refid="mChannelSql"></include>        from channel        <where>            <if test="id!= null">                AND id=#{id}            </if>            <if test="loginName!= null">                AND login_name=#{loginName}            </if>            <if test="name!= null">                AND name=#{name}            </if>            <if test="linkUrl!= null">                AND link_url=#{linkUrl}            </if>            <if test="proportion!= null">                AND proportion=#{proportion}            </if>            <if test="password!= null">                AND password=#{password}            </if>            <if test="token!= null">                AND token=#{token}            </if>            <if test="memberCount!= null">                AND member_count=#{memberCount}            </if>            <if test="applyMoney!= null">                AND apply_money=#{applyMoney}            </if>            <if test="outMoney!= null">                AND out_money=#{outMoney}            </if>            <if test="profit!= null">                AND profit=#{profit}            </if>            <if test="status!= null">                AND status=#{status}            </if>        </where>    </select>    <!--查询渠道商统计-->    <select id="channelUserTj" resultType="java.util.Map">        select        DATE_FORMAT(ux.gmt_datetime,'%Y-%m-%d') as 'date',        ux.source as 'cid',        count(DISTINCT ux.id)as 'zc',        count(DISTINCT case when a.bank_card_auth!=0 or phone_address_book_auth!=0 or user_base_msg_auth!=0 or phone_record_auth!=0 or identity_auth!=0 or taobao_auth!=0 then ux.id else null end) as 'rz',        count(DISTINCT case when a.bank_card_auth=0 and a.phone_address_book_auth=0 and a.user_base_msg_auth=0 and a.phone_record_auth=0 and a.identity_auth=0 and a.taobao_auth=0 then ux.id else null end ) 	as 'wrz',        count(DISTINCT case when a.bank_card_auth=1 and a.phone_address_book_auth=1 and a.user_base_msg_auth=1 and a.phone_record_auth=1 and a.identity_auth=1 and a.taobao_auth=1 then ux.id else null end ) 	as 'rzcg',        count(DISTINCT case when a.bank_card_auth=2 or a.phone_address_book_auth=2 or a.user_base_msg_auth=2 or a.phone_record_auth=2 or a.identity_auth=2 or a.taobao_auth=2 then ux.id else null end ) as 'rzsb',        count(case when e.status!='申请中' then ux.id else null end) as 'sqzdl',        count(case when e.status='已完结' or e.status='已打款' or e.status='待打款' then ux.id else null end) as 'sqdtgl',        count(case when o.hm_time=1 then o.id else null end) as 'fkl',        count(case when DATEDIFF(NOW(),o.upt_datetime)>30 and o.status != '已完结' and o.hm_time=1 then ux.id else null end) as 'hzrs',        count(case when DATEDIFF(NOW(),o.upt_datetime)>1 and o.status !='已完结' and o.hm_time=1 then ux.id else null end) as 'yqrs'        from        `user` ux	LEFT JOIN authentication a on ux.id = a.user_id LEFT JOIN evaluation e on e.user_id=ux.id LEFT JOIN orders o on o.evaluation_id=e.id        <where>            ${ew.sqlSegment}        </where>        group by DATE_FORMAT(ux.gmt_datetime,'%Y-%m-%d')        order by `date` DESC    </select>    <!-- 统计渠道总计的全部渠道的时间查询 -->    <select id="channelUserTjNew" resultType="java.util.Map">        select        u.source as 'cid',        DATE_FORMAT(u.gmt_datetime,'%Y-%m-%d') as 'date',        count(DISTINCT u.id)as 'zc',        count(DISTINCT case when a.bank_card_auth!=0 or phone_address_book_auth!=0 or user_base_msg_auth!=0 or        phone_record_auth!=0 or identity_auth!=0 or taobao_auth!=0 then u.id else null end) as 'rz',        count(DISTINCT case when a.bank_card_auth=0 and a.phone_address_book_auth=0 and a.user_base_msg_auth=0 and        a.phone_record_auth=0 and a.identity_auth=0 and a.taobao_auth=0 then u.id else null end ) as 'wrz',        count(DISTINCT case when a.bank_card_auth=1 and a.phone_address_book_auth=1 and a.user_base_msg_auth=1 and        a.phone_record_auth=1 and a.identity_auth=1 and a.taobao_auth=1 then u.id else null end ) as 'rzcg',        count(DISTINCT case when a.bank_card_auth=2 or a.phone_address_book_auth=2 or a.user_base_msg_auth=2 or        a.phone_record_auth=2 or a.identity_auth=2 or a.taobao_auth=2 then u.id else null end ) as 'rzsb',        count(DISTINCT case when e.`status`='已打款' or e.`status`='已完结' then u.id else null end ) as 'fkrs',        count(case when e.`status`='已打款' or e.`status`='已完结' then u.id else null end ) as 'fkrss',        count(DISTINCT case when e.id is not null then u.id else null end) as 'sqrs',        count(case when e.id is not null then u.id else null end) as 'sqrss',        count(case when e.`status`='已打款' or e.`status`='待打款' or e.`status`='已完结' then u.id else null end) as 'tgrs',        count(case when DATEDIFF(NOW(),o.upt_datetime)>30 and o.status != '已完结' then u.id else null end) as 'hzrs',        count(case when DATEDIFF(NOW(),o.upt_datetime)>1 and o.status != '已完结' then u.id else null end) as 'yqrs'        from        `user` u        LEFT JOIN authentication a on u.id = a.user_id        LEFT JOIN evaluation e on u.id = e.user_id LEFT JOIN orders o on o.evaluation_id=e.id        <where>            ${ew.sqlSegment}        </where>        GROUP BY ux.source    </select>    <select id="channelTotalTj" resultType="com.rongke.model.Tj">        select        a.id,        a.`name`,        b.zc,        b.rzrs as 'rz',        b.rzcg,        b.rzsb,        b.wrz,        d.gmt_datetimess as 'gmt_datetimess',        d.*,        c.*        from (        select        channel.id,        channel.`name`        FROM channel        <if test="channelId!=null and channelId!=''">            WHERE channel.id=#{channelId}        </if>        GROUP BY channel.id        )a        LEFT JOIN (        select        u.source as 'bid',        count(u.id) as'zc',        count(case when a.bank_card_auth!=0 or phone_address_book_auth!=0 or user_base_msg_auth!=0 or        phone_record_auth!=0 or identity_auth!=0 or taobao_auth!=0 then u.id else null end) as 'rzrs',        count(case when a.bank_card_auth=2 or a.phone_address_book_auth=2 or a.user_base_msg_auth=2 or        a.phone_record_auth=2 or a.identity_auth=2 or a.taobao_auth=2 then u.id else null end ) as 'rzsb',        count(case when a.bank_card_auth=1 and a.phone_address_book_auth=1 and a.user_base_msg_auth=1 and        a.phone_record_auth=1 and a.identity_auth=1 and a.taobao_auth=1 then u.id else null end ) as 'rzcg',        count(case when a.bank_card_auth=0 and a.phone_address_book_auth=0 and a.user_base_msg_auth=0 and        a.phone_record_auth=0 and a.identity_auth=0 and a.taobao_auth=0 then u.id else null end ) as 'wrz'        from `user` u JOIN authentication a on u.id=a.user_id        where u.source is NOT null        GROUP BY u.source        ) b on a.id = b.bid        LEFT JOIN (        select        u.source as 'cid',        count(distinct u.id) as'sqshdl',        count(case when e.status='已完结' or e.status='已打款' or e.status='待打款' then u.id else null end) as'sqdtgl'        from evaluation e LEFT JOIN `user` u on e.user_id=u.id        where u.source is not null and e.status!='申请中'        GROUP BY u.source        ) c on a.id = c.cid        LEFT JOIN (        select        u.source as 'did',        u.gmt_datetime as 'gmt_datetimess',        count(case when o.hm_time=1 then o.id else null end) as 'fkl',        count(case when DATEDIFF(NOW(),o.upt_datetime)>30 and o.status != '已完结' and o.hm_time=1 then u.id else null end) as 'hzrs',        count(case when DATEDIFF(NOW(),o.upt_datetime)>1 and o.status != '已完结' and o.hm_time=1 then u.id else null end)        as 'yqrs'        from `user` u JOIN authentication a on u.id=a.user_id        LEFT JOIN evaluation e on u.id = e.user_id LEFT JOIN orders o on o.evaluation_id=e.id        where u.source is NOT null        GROUP BY u.source        ) d on a.id = d.did        WHERE 1=1        <if test="time1!=null and time1!='' and time2!=null and time2!=''">            and d.gmt_datetimess BETWEEN #{time1} and #{time2}        </if>        LIMIT ${page},${limit}    </select>    <select id="channelTotalTjCount" resultType="java.lang.Integer">        select        count(a.id)        from (        select        channel.id,        channel.`name`        FROM channel        <if test="channelId!=null and channelId!=''">            WHERE channel.id=#{channelId}        </if>        GROUP BY channel.id        )a        LEFT JOIN (        select        u.source as 'bid',        count(u.id) as'zc',        count(case when a.bank_card_auth!=0 or phone_address_book_auth!=0 or user_base_msg_auth!=0 or        phone_record_auth!=0 or identity_auth!=0 or taobao_auth!=0 then u.id else null end) as 'rzrs',        count(case when a.bank_card_auth=2 or a.phone_address_book_auth=2 or a.user_base_msg_auth=2 or        a.phone_record_auth=2 or a.identity_auth=2 or a.taobao_auth=2 then u.id else null end ) as 'rzsb',        count(case when a.bank_card_auth=1 and a.phone_address_book_auth=1 and a.user_base_msg_auth=1 and        a.phone_record_auth=1 and a.identity_auth=1 and a.taobao_auth=1 then u.id else null end ) as 'rzcg',        count(case when a.bank_card_auth=0 and a.phone_address_book_auth=0 and a.user_base_msg_auth=0 and        a.phone_record_auth=0 and a.identity_auth=0 and a.taobao_auth=0 then u.id else null end ) as 'wrz'        from `user` u JOIN authentication a on u.id=a.user_id        where u.source is NOT null        GROUP BY u.source        ) b on a.id = b.bid        LEFT JOIN (        select        u.source as 'cid',        count(distinct u.id) as'sqshdl',        count(case when e.status='已完结' or e.status='已打款' or e.status='待打款' then u.id else null end) as'sqdtgl'        from evaluation e LEFT JOIN `user` u on e.user_id=u.id        where u.source is not null and e.status!='申请中'        GROUP BY u.source        ) c on a.id = c.cid        LEFT JOIN (        select        u.source as 'did',        u.gmt_datetime as 'gmt_datetimess',        count(case when o.hm_time=1 then o.id else null end) as 'fkl',        count(case when DATEDIFF(NOW(),o.upt_datetime)>30 and o.status != '已完结' and o.hm_time=1 then u.id else null end) as 'hzrs',        count(case when DATEDIFF(NOW(),o.upt_datetime)>1 and o.status != '已完结' and o.hm_time=1 then u.id else null end)        as 'yqrs'        from `user` u JOIN authentication a on u.id=a.user_id        LEFT JOIN evaluation e on u.id = e.user_id LEFT JOIN orders o on o.evaluation_id=e.id        where u.source is NOT null        GROUP BY u.source        ) d on a.id = d.did        WHERE 1=1        <if test="time1!=null and time1!='' and time2!=null and time2!=''">            and d.gmt_datetimess BETWEEN #{time1} and #{time2}        </if>    </select>    <select id="channelOrderPayback" resultType="java.util.Map">        select c.id,c.name,count(DISTINCT o.id) as 'zh',        count(DISTINCT case when o.`status`!='已完结' and rr.id is not NULL then o.id when o.`status`='已完结' then o.id else        null end ) as 'yh',        count(DISTINCT case when o.`status`!='已完结' and rr.id is null then o.id else null end)as 'wh'        from channel c LEFT JOIN (select id,source from user where source is not null) u on c.id = u.source        LEFT JOIN (SELECT id,user_id from evaluation where status ='已打款' or status ='已完结') e on u.id = e.user_id LEFT        JOIN orders o on e.id = o.evaluation_id LEFT JOIN repay_record rr on rr.id = o.id        <where>            ${ew.sqlSegment}        </where>    </select></mapper>