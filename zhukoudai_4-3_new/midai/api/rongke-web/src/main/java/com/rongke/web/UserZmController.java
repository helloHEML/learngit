package com.rongke.web;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.mapper.EntityWrapper;/*import com.rongke.baiqishi.RiskDecisionController;*/import com.rongke.commons.JsonResp;import com.rongke.commons.PageDto;import com.rongke.enums.StatusEnum;import com.rongke.model.*;import com.rongke.service.*;import com.rongke.utils.HttpClientUtil;import com.rongke.utils.ans.R;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @UserZmController * @Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/userZm")@Transactional@CrossOriginpublic class UserZmController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private UserZmService userZmService;    @Autowired    private UserIdentityService userIdentityService;    @Autowired    private AdminService adminService;    @Autowired    private AuthenticationService authenticationService;    @Autowired    private AdminRoleService adminRoleService;    /**     * @添加     * @param userZm     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addUserZm(@RequestBody UserZm userZm){        log.debug("添加");        userZm.setGmtDatetime(new Date());        userZmService.insert(userZm);        return JsonResp.ok(userZm);    }    /**     * @修改     * @param userZm     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateUserZm(@RequestBody UserZm userZm){        log.debug("修改");        userZm.setUptDatetime(new Date());        userZmService.updateById(userZm);        return JsonResp.ok(userZm);    }    /**     * @根据id查找     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectUserZm(Long id){        log.debug("查找");        UserZm userZm = userZmService.selectById(id);        return JsonResp.ok(userZm);    }    /**     * @白骑士回调接口     * @param jsonObject     * @return 返回值JsonResp     */    @RequestMapping(value="/baiqishiback", method = RequestMethod.POST)    public Map baiqishiback(@RequestBody JSONObject jsonObject){/*        log.debug("查找");        Map response=new HashMap();        System.out.print("白骑士回调数据："+jsonObject);        String msgCode=jsonObject.getString("msgCode"); //返回码CCOM1000 成功 CCOM3074 缓存成功CCOM3016 采集数据失败        String msgDesc=jsonObject.getString("msgDesc");//数据返回描述        String dataType=jsonObject.getString("dataType");//数据类型        String name=jsonObject.getString("name");        String mobile=jsonObject.getString("mobile");        String certNo=jsonObject.getString("certNo");//身份证        if(msgCode!=null && !msgCode.equals("CCOM3016")){            //获取原始数据            EntityWrapper<UserIdentity> ew=new EntityWrapper<>();            ew.eq("identity_num",certNo);            ew.eq("status",StatusEnum.USED.getTypeName());            UserIdentity identity=userIdentityService.selectOne(ew);            Map request=new HashMap();            request.put("partnerId", RiskDecisionController.partnerId);            request.put("verifyKey", RiskDecisionController.verifyKey);            request.put("name",name);            request.put("mobile", mobile);            request.put("certNo", certNo);            String url="https://credit.baiqishi.com/clweb/api/zm/getoriginal";            String result = HttpClientUtil.sendPostSSLRequest(url, JSONObject.toJSONString(request),"UTF-8","application/json");            JSONObject resultJson=JSONObject.parseObject(result);            if(resultJson.getString("resultCode").equals("CCOM1000")){//成功                JSONObject data=resultJson.getJSONObject("data");                JSONObject zmDetailInfo=data.getJSONObject("zmDetailInfo");                UserZm userZm=new UserZm();                userZm.setResultCode("CCOM1000");                userZm.setRealName(zmDetailInfo.getString("realCheckName"));                userZm.setHuabeiAvailAmount(zmDetailInfo.getString("huabeiAvailAmount"));                userZm.setJiebeiAmount(zmDetailInfo.getString("jiebeiAmount"));                userZm.setUserId(identity.getUserId());                userZm.setHuabeiTotalAmount(zmDetailInfo.getString("huabeiTotalAmount"));                userZm.setStatus(StatusEnum.USED.getTypeName());                userZm.setZmScore(zmDetailInfo.getString("zmScore"));                userZm.setGmtDatetime(new Date());                userZmService.insert(userZm);                EntityWrapper<Authentication> authew=new EntityWrapper<>();                authew.eq("user_id",identity.getUserId());                Authentication authentication=new Authentication();                authentication.setZmAuth("1");                authenticationService.update(authentication,authew);            }else {//失败                UserZm userZm=new UserZm();                userZm.setUserId(identity.getUserId());                userZm.setResultCode(resultJson.getString("resultCode"));                userZm.setGmtDatetime(new Date());                userZm.setStatus(StatusEnum.UNUSED.getTypeName());                userZmService.insert(userZm);            }            System.out.print("原始数据："+result);            response.put("resultCode","CCOM1000");            response.put("resultDesc","处理成功");            return response;        }else {            response.put("resultCode","CCOM3016");            response.put("resultDesc","失败");            return response;        }*/        return null;    }    /**     * @分页查询手机认证     * @param     * @return 返回值JsonResp     */    @RequestMapping(value="/findByPage", method = RequestMethod.GET)    public JsonResp findByPage(Integer pageNo, Integer pageSize, String phone, String realName, String time){        log.debug("分页查询手机认证");        Admin admin=adminService.findLoginUser();        AdminRole adminRole=adminRoleService.selectById(admin.getAdminRoleId());        Map<String,Object> map = new HashMap<>();        map.put("pageNo",(pageNo-1)*pageSize);        map.put("pageSize",pageSize);        map.put("phone",phone);        map.put("realName",realName);        map.put("status", StatusEnum.USED.getTypeName());        String time1="",time2="";        if(time!=null && !"".equals(time)){            String[] array = time.split("~");            time1 = array[0];            time2 = array[1];        }        map.put("time1",time1);        map.put("time2",time2);        Integer count = null;        List<UserZm> list = null;        if(adminRole!=null && adminRole.getType()==1) {//如果是审核员角色则根据角色来查询数据            map.put("adminId",admin.getId());        }        count= userZmService.selectPartCount(map);        list=userZmService.selectPartByPage(map);        PageDto page=new PageDto(pageNo,pageSize,list,count);        Map responsemap=new HashMap();        responsemap.put("page",page);        responsemap.put("roleType",adminRole.getType());        return JsonResp.ok(responsemap);    }}