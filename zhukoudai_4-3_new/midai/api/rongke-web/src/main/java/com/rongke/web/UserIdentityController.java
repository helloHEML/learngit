package com.rongke.web;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.rongke.IdcardUtil.IdcardInfoExtractor;import com.rongke.commons.JsonResp;import com.rongke.commons.PageDto;import com.rongke.enums.DictdataNameEnum;import com.rongke.enums.FileType;import com.rongke.enums.StatusEnum;import com.rongke.model.*;import com.rongke.service.*;import com.rongke.utils.ConstantFactory;import com.rongke.utils.RRUtils;import com.rongke.utils.ans.R;import com.rongke.web.modules.cloud.OSSFactory;import com.rongke.youdun.UDNotifyResultProcessor;import org.apache.log4j.Logger;import org.apache.poi.xssf.usermodel.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.*;import static com.rongke.youdun.UDNotifyResultProcessor.CHARSET_UTF_8;/** * @UserIdentityController * @身份认证Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/userIdentity")@Transactional@CrossOriginpublic class UserIdentityController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private UserIdentityService userIdentityService;    @Autowired    private AuthenticationService authenticationService;    @Autowired    private UserService userService;    @Autowired    private AdminService adminService;    @Autowired    private AdminRoleService adminRoleService;    @Autowired    private DictionaryDataService dictionaryDataService;//字段数据    @Autowired    private SysDecidingService sysDecidingService;    /**     * @添加身份认证     * @param userIdentity     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addUserIdentity(@RequestBody UserIdentity userIdentity){        log.debug("添加身份认证");        userIdentity.setGmtDatetime(new Date());        userIdentityService.insert(userIdentity);        return JsonResp.ok(userIdentity);    }    /**     * 接收实名认证异步通知     */    @RequestMapping(value = "/userIdentityBack", method = RequestMethod.POST)    public void process(HttpServletRequest request, HttpServletResponse response) throws IOException {        log.debug("身份认证回调");        JSONObject reqObject = UDNotifyResultProcessor.getRequestJson(request);        JSONObject respJson = new JSONObject();        //验签        String sign = reqObject.getString("sign");        String sign_time = reqObject.getString("sign_time");        String partner_order_id = reqObject.getString("partner_order_id");        String pubKey = ConstantFactory.getConfig().getYhyPubKey();        String securityKey = ConstantFactory.getConfig().getYhySecurityKey();        String signMD5 = UDNotifyResultProcessor.getMD5Sign(partner_order_id, sign_time, pubKey,securityKey);        if (!sign.equals(signMD5)) {            System.err.println("异步通知签名错误");            respJson.put("code", "0");            respJson.put("message", "签名错误");        } else {            respJson.put("code", "1");            respJson.put("message", "收到通知");            //TODO 异步执行商户自己的业务逻辑(以免阻塞返回导致通知多次)            Thread asyncThread = new Thread("asyncDataHandlerThread") {                public void run() {//                    System.out.println("异步执行商户自己的业务逻辑...");                    try {                        String auth_result = reqObject.getString("auth_result");                        String partner_order_id = reqObject.getString("partner_order_id");                        Long userId = new Long(partner_order_id.split("_")[1]);                        if (null != auth_result && auth_result.equals("T")) {                            String idNumber=reqObject.getString("id_number");                            //检测 册该身份证号有没有认证过  防止同一个人使用两个手机号注                            EntityWrapper<UserIdentity>  uiew=new EntityWrapper<>();                            uiew.eq("identity_num",idNumber);                            //年龄在35以后直接拒绝掉                            IdcardInfoExtractor ie = new IdcardInfoExtractor(idNumber);                            Integer age=ie.getAge();                            String sfrzage = dictionaryDataService.findValueByDictdataName(DictdataNameEnum.SFMAXAGE.getTypeName());                            Integer personalAge = Integer.valueOf(sfrzage);//                            if(age>personalAge){//                                EntityWrapper<Authentication> wrapper = new EntityWrapper<>();//                                wrapper.eq("user_id",userId);//                                Authentication authentication=new Authentication();//                                authentication.setIdentityAuth("2");//                                authentication.setMarks("用户年龄为："+age+"大于机审核绝"+personalAge);//                                authenticationService.update(authentication,wrapper);//                                return;//                            }                            System.out.println("*****************************决策*****************************");                            Authentication user_id = authenticationService.selectOne(new EntityWrapper<Authentication>().eq("user_id", userId));                            Map<String, SysDeciding> stringSysDecidingMap = sysDecidingService.decidingType(3);                            R r = authenticationService.sfzSmrzAge(String.valueOf(age), stringSysDecidingMap.get("sfz_smrzAge"), user_id);                            if(RRUtils.assertCode(r,"500")){                                return ;                            }                            System.out.println("*****************************决策 end *****************************");                            UserIdentity userIden=userIdentityService.selectOne(uiew);                            if(userIden!=null && !userIden.getUserId().equals(userId)){                                EntityWrapper<Authentication> wrapper = new EntityWrapper<>();                                wrapper.eq("user_id",userId);                                Authentication authentication=new Authentication();                                authentication.setIdentityAuth("2");                                authentication.setMarks("同一身份证不能认证于两个不同的手机号");                                authenticationService.update(authentication,wrapper);                            }else {                                UserIdentity userIdentity = new UserIdentity();                                userIdentity.setUserId(userId);                                userIdentity.setUserName(reqObject.getString("id_name"));                                userIdentity.setIdentityNum(idNumber);                                userIdentity.setGmtDatetime(new Date());                                //得到解密后的base64码上传                                String identityFrontBase64 = reqObject.getString("idcard_front_photo");                                String identityBackBase64 = reqObject.getString("idcard_back_photo");                                String faceUrlBase64 = reqObject.getString("living_photo");                                userIdentity.setIdentityFront(OSSFactory.build().uploadSuffixBase64(identityFrontBase64, ".jpg"));//正面                                userIdentity.setIdentityBack(OSSFactory.build().uploadSuffixBase64(identityBackBase64, ".jpg"));//反面                                userIdentity.setFaceUrl(OSSFactory.build().uploadSuffixBase64(faceUrlBase64, ".jpg"));//人脸照片//                                for (int i = 0; i < 3; i++) {//                                    String fileName = UUID.randomUUID().toString();//                                    Base64Picture base64Picture = new Base64Picture();//                                    FileType fileType=FileType.USER_LOGO;//                                    // 文件存储目录//                                    String filePath = fileType.getAbsolutePath();//                                    File rootFolder = new File(filePath);//                                    if (!rootFolder.exists()) {//                                        rootFolder.mkdirs();//                                    }//                                    String realFileName = UUID.randomUUID().toString()//                                            .replaceAll("-", "");//                                    String originalFileName = fileName+".jpg";//                                    int index = originalFileName.lastIndexOf('.');//                                    realFileName += originalFileName.substring(index);//                                    String uPath=filePath + File.separator + realFileName;//                                    String savePath = fileType.getFileUrl() + "/"+ realFileName;//                                    if (i == 0) {//                                        base64Picture.GenerateImage(identityFrontBase64,uPath);//                                        userIdentity.setIdentityFront(savePath);//                                    }else if(i == 1){//                                        base64Picture.GenerateImage(identityBackBase64,uPath);//                                        userIdentity.setIdentityBack(savePath);//                                    }else {//                                        base64Picture.GenerateImage(faceUrlBase64,uPath);//                                        userIdentity.setFaceUrl(savePath);//                                    }//                                }                                //判断之前有没有认证过                                EntityWrapper<UserIdentity> ew=new EntityWrapper<>();                                ew.eq("user_id",userId);                                ew.eq("status", StatusEnum.USED.getTypeName());                                List<UserIdentity> userIdentityOlds=userIdentityService.selectList(ew);                                if(!userIdentityOlds.isEmpty()){                                    for (UserIdentity ui:userIdentityOlds) {                                        ui.setStatus(StatusEnum.UNUSED.getTypeName());                                    }                                    userIdentityService.updateBatchById(userIdentityOlds);                                }                                userIdentity.setStatus(StatusEnum.USED.getTypeName());                                userIdentityService.insert(userIdentity);                                EntityWrapper<Authentication> wrapper = new EntityWrapper<>();                                wrapper.eq("user_id",userId);                                Authentication authentication=new Authentication();                                authentication.setIdentityAuth("1");                                authenticationService.update(authentication,wrapper);                                //存入真实姓名                                EntityWrapper<User> ewu=new EntityWrapper<>();                                ewu.eq("id",userId);                                User user = new User();                                user.setRealName(reqObject.getString("id_name"));                                userService.update(user,ewu);                            }                        }                    } catch (Exception e) {                        e.printStackTrace();                    }                }            };            asyncThread.start();        }        //返回结果        response.setCharacterEncoding(CHARSET_UTF_8);        response.setContentType("application/json; charset=utf-8");        response.getOutputStream().write(respJson.toJSONString().getBytes(CHARSET_UTF_8));    }    /**     * @根据id查找     * @param userIdentity     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectUserIdentity(UserIdentity userIdentity){        log.debug("查找");        Map map=new HashMap();        map.put("userId",userIdentity.getUserId());        UserIdentity identity = userIdentityService.selectUserInentityData(map);        return JsonResp.ok(identity);    }    /**     * @param     * @return 返回值JsonResp     * @修改     */    @RequestMapping(value = "/findByPage", method = RequestMethod.GET)    public JsonResp findByPage(Integer pageNo, Integer pageSize,String realName,String phone,String time){        log.debug("分页查询认证信息");        Admin admin=adminService.findLoginUser();        AdminRole adminRole= adminRoleService.selectById(admin.getAdminRoleId());//        if(cacheUtil.hHasKey("admin","1")){//            adminRole=(AdminRole) cacheUtil.hget("admin","1");//        }else {//            adminRole=adminRoleService.selectById(admin.getAdminRoleId());//            if(adminRole.getType()==1){//                cacheUtil.hset("admin","1",adminRole);//放入缓存//            }//        }        Map<String,Object> map = new HashMap<>();        map.put("pageNo",(pageNo-1)*pageSize);        map.put("pageSize",pageSize);        map.put("phone",phone);        map.put("realName",realName);        map.put("status",StatusEnum.USED.getTypeName());        String time1="",time2="";        if(time!=null && !"".equals(time)){            String[] array = time.split("~");            time1 = array[0];            time2 = array[1];        }        map.put("time1",time1);        map.put("time2",time2);        Integer total = null;        List<UserIdentity> list =null;        if(adminRole!=null && adminRole.getType()==1){//如果是审核员角色则根据角色来查询数据            map.put("adminId",admin.getId());            total=userIdentityService.selectPartCount(map);            list= userIdentityService.selectPartByPage(map);        }else {            total=userIdentityService.selectCount(map);            list= userIdentityService.selectByPage(map);        }        PageDto pageDto = new PageDto(pageNo,pageSize,list,total);        return JsonResp.ok(pageDto);    }    /**     * @param     * @return 生成excel     */    @RequestMapping(value = "/makeExcle", method = RequestMethod.GET)    public JsonResp makeExcle(HttpServletRequest request, HttpServletResponse response, String phone,String status,String realName,String time) throws IOException {        // TODO Auto-generated method stub        Map<String,Object> map = new HashMap<>();        map.put("phone",phone);        map.put("realName",realName);        map.put("status",status);        String time1="",time2="";        if(time!=null && !"".equals(time)){            String[] array = time.split("~");            time1 = array[0];            time2 = array[1];        }        map.put("time1",time1);        map.put("time2",time2);        List<UserIdentity> list = userIdentityService.selectByPage(map);        if (list.isEmpty()) {            return JsonResp.fa("未选择导出数据");        }        XSSFWorkbook excelbook = new XSSFWorkbook(); //创建workBook        XSSFSheet excelSheet = excelbook.createSheet();//创建sheet表        XSSFRow excelRow = excelSheet.createRow(0);//创建第一行        XSSFCellStyle headerStyle = excelbook.createCellStyle();//设置 居中        headerStyle.setAlignment(XSSFCellStyle.ALIGN_CENTER);        //接下来是创建 列标题 ,cell的起始值是 0,可创建n个列标题        String[] Title = { "账号", "姓名", "身份证号", "认证时间"};        for(int a=0;a<Title.length;a++){            XSSFCell cell = excelRow.createCell(a);            cell.setCellStyle(headerStyle);//居中            cell.setCellValue(Title[a]);        }        //接下来遍历List,并写入EXCEL中        for(int i = 0; i < list.size(); i++) {            //创建行,行号应从1开始,因为表头行(列标题)占据了第0行            excelRow = excelSheet.createRow(i + 1);            //将该行每一列的数据写入,可写n列            UserIdentity userIdentity = list.get(i); // List 的起始值是0            excelRow.createCell(0).setCellValue(userIdentity.getUser().getPhone());            excelRow.createCell(1).setCellValue(userIdentity.getUser().getRealName());            excelRow.createCell(2).setCellValue(userIdentity.getIdentityNum());            excelRow.createCell(3).setCellValue(new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(userIdentity.getGmtDatetime()));        }        String fileanme = "身份认证";        String date = new SimpleDateFormat("yyyyMMdd").format(new Date());        FileType fileType = FileType.XLS;        String path = fileType.getAbsolutePath();        String filePath = path + File.separator+fileanme+date+".xls";        log.info("filePath"+filePath);        EvaluationController.writeExcel(request,response, excelbook, filePath, "文件名");//具体导出的方法        String url = request.getRequestURL().toString().split("api")[0]+"/pic/xls/"+File.separator+fileanme+date+".xls";        return JsonResp.ok(url);    }}