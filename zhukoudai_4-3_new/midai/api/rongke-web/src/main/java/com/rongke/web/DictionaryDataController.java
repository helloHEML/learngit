package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.rongke.commons.JsonResp;import com.rongke.enums.DictdataNameEnum;import com.rongke.enums.StatusEnum;import com.rongke.model.DictionaryData;import com.rongke.model.ParamSetting;import com.rongke.service.DictionaryDataService;import com.rongke.service.ParamSettingService;import com.rongke.utils.ans.R;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.*;/** * @DictionaryDataController * @Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/dictionaryData")@Transactional@CrossOriginpublic class DictionaryDataController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private DictionaryDataService dictionaryDataService;    @Autowired    private ParamSettingService paramSettingService;//    @Autowired//    private CacheUtil cacheUtil;    /**     * @添加     * @param dictionaryData     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addDictionaryData(@RequestBody DictionaryData dictionaryData){        log.debug("添加");        dictionaryData.setGmtDatetime(new Date());        dictionaryDataService.insert(dictionaryData);        return JsonResp.ok(dictionaryData);    }    /**     * @修改     * @param dictionaryData     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateDictionaryData(@RequestBody DictionaryData dictionaryData){        log.debug("修改");        dictionaryData.setUptDatetime(new Date());        dictionaryDataService.updateById(dictionaryData);        return JsonResp.ok(dictionaryData);    }    /**     * @根据id查找     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectDictionaryData(Long id){        log.debug("查找");        DictionaryData dictionaryData = dictionaryDataService.selectById(id);        return JsonResp.ok(dictionaryData);    }    /**     * @根据条件查找     * @param dictionaryData     * @return 返回值JsonResp     */    @RequestMapping(value = "/selectByCondition", method = RequestMethod.POST)    public JsonResp selectDictionaryDataByCondition(@RequestBody DictionaryData dictionaryData){        log.debug("根据条件查找");        if(dictionaryData==null)            return JsonResp.toFail("参数不能为空");        List<DictionaryData> dictionaryDataList=dictionaryDataService.selectByCondition(dictionaryData);        return JsonResp.ok(dictionaryDataList);    }    /**     * @更新字典设置     * @param     * @return 返回值JsonResp     */    @RequestMapping(value = "/updateAll", method = RequestMethod.POST)    public JsonResp updateAll(@RequestBody Map<String,Object> map){        log.debug("更新字典设置");        List<DictionaryData> list = new ArrayList<>();        for (String key : map.keySet()) {            DictionaryData data = new DictionaryData();            data.setDictdataName(key);            data.setDictdataValue(map.get(key).toString());            list.add(data);        }        dictionaryDataService.updateListByDictdataName(list);        EntityWrapper<ParamSetting> wrapper = new EntityWrapper<>();        wrapper.eq("status", StatusEnum.USED.getTypeName());        ParamSetting paramSetting1 = paramSettingService.selectOne(wrapper);        if(paramSetting1!=null){            paramSetting1.setStatus(StatusEnum.UNUSED.getTypeName());            paramSettingService.updateById(paramSetting1);        }        ParamSetting paramSetting = new ParamSetting();        paramSetting.setAssessMoney(list.get(0).getDictdataValue());        paramSetting.setCashPledge(list.get(1).getDictdataValue());        paramSetting.setRentDayMoney(list.get(2).getDictdataValue());//        paramSetting.setDecreaseDay(list.get(3).getDictdataValue());//        paramSetting.setDecreaseproPortion(list.get(4).getDictdataValue());//        paramSetting.setLeastRentDayMoney(list.get(5).getDictdataValue());        paramSetting.setOvertimeDay(list.get(3).getDictdataValue());        paramSetting.setPunishmentOvertimeDay(list.get(4).getDictdataValue());        paramSetting.setOvertimeMoney(list.get(5).getDictdataValue());        paramSetting.setPunishmentOvertimeMoney(list.get(6).getDictdataValue());        paramSetting.setStatus(StatusEnum.USED.getTypeName());        paramSettingService.insert(paramSetting);        //删除缓存//        if(cacheUtil.hasKey("phoneAge")){//            cacheUtil.delHasKey("phoneAge","1");//        }        return JsonResp.ok();    }    /**     * @查找全部     * @param     * @return 返回值JsonResp     */    @RequestMapping(value = "/selectAll", method = RequestMethod.GET)    public JsonResp selectAll(){        log.debug("查找全部");        List<DictionaryData> dictionaryDataList=dictionaryDataService.selectList(null);        return JsonResp.ok(dictionaryDataList);    }    /**     * @查找全部     * @param     * @return 返回值JsonResp     */    @RequestMapping(value = "/selectByDictName", method = RequestMethod.GET)    public JsonResp selectOneByName(){        log.debug("根据类型查询字典");        EntityWrapper<DictionaryData> wrapper = new EntityWrapper<>();        wrapper.eq("dict_name","phoneText");        List<DictionaryData> dictionaryDataList=dictionaryDataService.selectList(wrapper);        Map<String,Object> map = new HashMap<>();        for (DictionaryData data : dictionaryDataList) {            map.put(data.getDictdataName(),data.getDictdataValue());        }        return JsonResp.ok(map);    }    @RequestMapping("ansceshia")    public R zdffffffff(){        List<ParamSetting> paramSettings = paramSettingService.selectList(new EntityWrapper<ParamSetting>().where("id ({0})", "ffff"));        return R.ok().put("valueByDictdataName",paramSettings);    }}