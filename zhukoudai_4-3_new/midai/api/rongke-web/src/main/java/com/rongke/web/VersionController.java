package com.rongke.web;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.rongke.commons.JsonResp;import com.rongke.commons.PageDto;import com.rongke.enums.StatusEnum;import com.rongke.model.Version;import com.rongke.service.VersionService;import com.rongke.utils.ConstantFactory;import com.rongke.utils.ans.PageUtils;import com.rongke.web.ansutils.RestTemplateUtils;import com.rongke.web.config.URLConfig;import org.apache.commons.codec.digest.DigestUtils;import org.apache.commons.lang.ArrayUtils;import org.apache.commons.lang.StringUtils;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import org.springframework.web.client.RestTemplate;import java.io.UnsupportedEncodingException;import java.net.URLEncoder;import java.util.Arrays;import java.util.Collection;import java.util.Date;import java.util.Map;/** * @VersionController * @Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/version")@Transactional@CrossOriginpublic class VersionController {    private static final Logger log = Logger.getLogger(VersionController.class);    @Autowired    private VersionService versionService;    @Autowired    private RestTemplateUtils restTemplate;    /**     * @添加     * @param version     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addVersion(@RequestBody Version version){        log.debug("添加");        version.setGmtDatetime(new Date());        version.setStatus(StatusEnum.UNUSED.getTypeName());        versionService.insert(version);        return JsonResp.ok(version);    }    /**     * @修改     * @param version     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateVersion(@RequestBody Version version){        log.debug("修改");        version.setUptDatetime(new Date());        versionService.updateById(version);        return JsonResp.ok(version);    }    /**     * @删除     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/delete", method = RequestMethod.GET)    public JsonResp delete(@RequestParam Integer id){        log.debug("删除");        boolean b = versionService.deleteById(id);        if(b){            return JsonResp.ok();        }else{            return JsonResp.error500("删除失败");        }    }    /**     * @查询一条数据     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectOne(String id){        log.debug("查询："+id);        Version version = versionService.selectById(id);        return JsonResp.ok(version);    }    /**     * @更新版本     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/updateVersion", method = RequestMethod.GET)    public JsonResp updateVersion(String id){        log.debug("查询："+id);        Version version = versionService.selectById(id);        if(version.getStatus().equals(StatusEnum.USED.getTypeName())){            return JsonResp.ok(version);        }else{            EntityWrapper<Version> entityWrapper = new EntityWrapper<>();            entityWrapper.eq("type",version.getType());            entityWrapper.eq("status",StatusEnum.USED.getTypeName());            Version version1 = versionService.selectOne(entityWrapper);            if(version1 != null){                version1.setStatus(StatusEnum.UNUSED.getTypeName());                versionService.updateById(version1);            }            version.setStatus(StatusEnum.USED.getTypeName());            versionService.updateById(version);        }        return JsonResp.ok(version);    }    @RequestMapping(value="/selectAllVersionList", method = RequestMethod.GET)    public PageUtils userPage(@RequestParam Map<String,Object> params) {        PageUtils pageUtils =versionService.selectAllVersionList(params);        return pageUtils;    }    /**     * @获取最新版本     * type 类型 android ios     * @return 返回值JsonResp     *//*    @RequestMapping(value="/selectCurrentVersion", method = RequestMethod.GET)    public JsonResp selectVersion(String type){        log.debug("获取最新版本");        //从缓存中找  有就直接返回        Version version=null;//        Boolean hgetKey=cacheUtil.hHasKey("version",type);//        if(hgetKey){//             version=(Version) cacheUtil.hget("version",type);//            return JsonResp.ok(version);//        }        EntityWrapper<Version> ew=new EntityWrapper<>();        ew.eq("status", StatusEnum.USED.getTypeName());        ew.eq("type",type);        version = versionService.selectOne(ew);        String url = "https://fir.im/43gv";        if(type.equals("android")){            url = URLConfig.getInstance().getURLValue("android1");            RestTemplate restTemplate = new RestTemplate();            String result = restTemplate.getForObject(url, String.class);            url = URLConfig.getInstance().getURLValue("android2")+ JSON.parseObject(result).getString("download_token");        }else{//            url = URLConfig.getInstance().getURLValue("ios1");//            RestTemplate restTemplate = new RestTemplate();//            String result = restTemplate.getForObject(url, String.class);//            url = URLConfig.getInstance().getURLValue("ios3")+JSON.parseObject(result).getString("download_token");//            try {//                url = "itms-services://?action=download-manifest&url="+ URLEncoder.encode(url,"UTF-8");//            } catch (Exception e) {//                e.printStackTrace();//            }        }        version.setLink(url);        //放入缓存 1天//       Boolean tt=cacheUtil.hset("version",type,version,1*24*60*60L);        return JsonResp.ok(version);    }*/    /**     * @获取最新版本     * type 类型 android ios     * @return 返回值JsonResp     */    @RequestMapping(value="/selectCurrentVersion", method = RequestMethod.GET)    public JsonResp selectVersion(String type){        log.debug("获取最新版本");        //从缓存中找  有就直接返回        Version version=null;        EntityWrapper<Version> ew=new EntityWrapper<>();        ew.eq("status", StatusEnum.USED.getTypeName());        ew.eq("type",type);        version = versionService.selectOne(ew);        String url = "https://fir.im/xh57";        if(type.equals("android")){            url = ConstantFactory.getProconstant().getFirAndroidOne();            JSONObject result = restTemplate.get(url);            url = ConstantFactory.getProconstant().getFirAndroidTwo()+result.getString("download_token");        }else{            url = ConstantFactory.getProconstant().getFirIosOne();            JSONObject result = restTemplate.get(url);            url = ConstantFactory.getProconstant().getFirIosThree() + result.getString("download_token");            try {                url = "itms-services://?action=download-manifest&url="+ URLEncoder.encode(url,"UTF-8");            } catch (Exception e) {                log.info("下载异常");            }        }        version.setLink(url);        return JsonResp.ok(version);    }    public static void main(String[] args) {        System.out.println(DigestUtils.md5Hex("daishuqianbai888"));    }}