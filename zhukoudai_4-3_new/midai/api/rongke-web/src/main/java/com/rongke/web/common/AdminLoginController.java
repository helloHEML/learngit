package com.rongke.web.common;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.rongke.commons.JsonResp;import com.rongke.model.Admin;import com.rongke.service.AdminService;import com.rongke.utils.Md5;import org.apache.commons.lang3.builder.ReflectionToStringBuilder;import org.apache.commons.lang3.builder.ToStringStyle;import org.apache.log4j.Logger;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.*;import org.apache.shiro.subject.Subject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import java.util.Date;/** * Created by chengwenwen on 2016/10/18. */@RestController@RequestMapping(value = "/api/adminLogin")@CrossOriginpublic class AdminLoginController {    private Logger log = Logger.getLogger(this.getClass());   @Autowired    private AdminService adminService;    /**     * @后台登录     * @return 返回值JsonResp     */    @RequestMapping(value="/login", method = RequestMethod.POST)    public JsonResp login(Admin admin){        log.debug("后台登录");        String loginName=admin.getLoginName();        UsernamePasswordToken token = new UsernamePasswordToken(loginName, Md5.md5Encode(admin.getPassword()));        System.out.print("为验证登录用户而封装的Token：");        System.out.println(ReflectionToStringBuilder.toString(token, ToStringStyle.MULTI_LINE_STYLE));        //获取当前的Subject        Subject currentUser = SecurityUtils.getSubject();        try {            currentUser.login(token);        }catch(UnknownAccountException uae){            return JsonResp.fa("未知账户");        }catch(IncorrectCredentialsException ice){            return JsonResp.fa("密码不正确");        }catch(LockedAccountException lae){            return JsonResp.fa("账户已锁定");        }catch(ExcessiveAttemptsException eae){            return JsonResp.fa("用户名或密码错误次数过多");        }catch(AuthenticationException ae){            ae.printStackTrace();            return JsonResp.fa("用户名或密码不正确");        }        //验证是否登录成功        if(currentUser.isAuthenticated()){            EntityWrapper<Admin> ew=new EntityWrapper<>();            ew.eq("login_name",loginName);            Admin admin1=adminService.selectOne(ew);            admin1.setUptDatetime(new Date());            admin1.setToken(currentUser.getSession().getId().toString());            adminService.updateById(admin1);            return JsonResp.ok(admin1);        }else{            token.clear();            return JsonResp.fa("");        }    }    /**     * @修改后台登录     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/deleteAdmin", method = RequestMethod.GET)    public JsonResp deleteAdmin(Integer id){        log.debug("修改后台登录");        adminService.deleteById(id);        return JsonResp.ok();    }    /**     * @重置密码     * @param adminId     * @return 返回值JsonResp     */    @RequestMapping(value="/updatePassword", method = RequestMethod.GET)    public JsonResp updatePassword(Integer adminId){        log.debug("修改后台登录");        Admin admin=adminService.selectById(adminId);        admin.setPassword(Md5.md5Encode("123456"));        adminService.updateById(admin);        return JsonResp.ok();    }    /**     * @退出登录     * @return 返回值JsonResp     */    @RequestMapping(value="/logout", method = RequestMethod.GET)    public JsonResp logout(){        log.debug("退出登录");        adminService.logout();        return JsonResp.ok();    }}