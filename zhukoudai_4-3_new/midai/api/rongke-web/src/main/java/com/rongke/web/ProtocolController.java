package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.rongke.commons.JsonResp;import com.rongke.enums.StatusEnum;import com.rongke.model.Protocol;import com.rongke.service.ProtocolService;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.Date;import java.util.List;/** * @ProtocolController * @协议Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/protocol")@Transactional@CrossOriginpublic class ProtocolController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private ProtocolService protocolService;    /**     * @添加协议     * @param protocol     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addProtocol(@RequestBody Protocol protocol){        log.debug("添加协议");        protocol.setGmtDatetime(new Date());        protocolService.insert(protocol);        return JsonResp.ok(protocol);    }    /**     * @修改协议     * @param protocol     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateProtocol(@RequestBody Protocol protocol){        log.debug("修改协议");        EntityWrapper<Protocol> ew=new EntityWrapper<>();        ew.eq("type",protocol.getType());        ew.eq("status",StatusEnum.USED.getTypeName());        Protocol protocolOld=protocolService.selectOne(ew);        if(protocolOld!=null){            protocolOld.setUptDatetime(new Date());            protocolOld.setStatus(StatusEnum.UNUSED.getTypeName());            protocolService.updateById(protocolOld);        }        //从新插入一条        Protocol protocolNew=new Protocol();        protocolNew.setStatus(StatusEnum.USED.getTypeName());        protocolNew.setContent(protocol.getContent());        protocolNew.setType(protocol.getType());        protocolNew.setGmtDatetime(new Date());        protocolService.insert(protocolNew);        return JsonResp.ok();    }    /**     * @根据id查找协议     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectProtocol(Long id){        log.debug("查找协议");        Protocol protocol = protocolService.selectById(id);        return JsonResp.ok(protocol);    }    /**     * @根据条件查找协议     * @param protocol     * @return 返回值JsonResp     */    @RequestMapping(value = "/selectByCondition", method = RequestMethod.POST)    public JsonResp selectProtocolByCondition(@RequestBody Protocol protocol){        log.debug("根据条件查找协议");        if(protocol==null)            return JsonResp.toFail("参数不能为空");        List<Protocol> protocolList=protocolService.selectByCondition(protocol);        return JsonResp.ok(protocolList);    }    /**     * @根据类型查找     * @param type     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOneByType", method = RequestMethod.GET)    public JsonResp selectMsgModelByType(Integer type){        log.debug("根据类型查找");        EntityWrapper<Protocol> ew=new EntityWrapper<>();        ew.eq("type",type);        ew.eq("status",StatusEnum.USED.getTypeName());        Protocol protocol = protocolService.selectOne(ew);        return JsonResp.ok(protocol);    }    /**     * @根据类型查找     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOneById", method = RequestMethod.GET)    public JsonResp selectOneById(Long id){        log.debug("根据id查找");        Protocol protocol = protocolService.selectById(id);        return JsonResp.ok(protocol);    }    /**     * @关于我们     *    6代表关于我们     * @return 返回值JsonResp     */    @RequestMapping(value="/selectaboutUs", method = RequestMethod.GET)    public JsonResp selectaboutUs(){        log.debug("关于我们");        EntityWrapper<Protocol>  ew=new EntityWrapper<>();        ew.eq("type",6);        Protocol protocol = protocolService.selectOne(ew);        return JsonResp.ok(protocol);    }}