package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.google.common.collect.Lists;import com.rongke.commons.FailException;import com.rongke.commons.JsonCodeEnum;import com.rongke.commons.JsonResp;import com.rongke.commons.PageDto;import com.rongke.enums.FileType;import com.rongke.model.*;import com.rongke.service.*;import com.rongke.utils.ConstantFactory;import com.rongke.utils.HttpClientUtil;import com.rongke.utils.Md5;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.R;import com.rongke.web.ans.config.SysReader;import com.rongke.web.common.IPConfig;import org.apache.commons.codec.digest.DigestUtils;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.Logger;import org.apache.poi.xssf.usermodel.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.Base64Utils;import org.springframework.web.bind.annotation.*;import org.springframework.web.client.RestTemplate;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.math.BigDecimal;import java.net.URLEncoder;import java.text.SimpleDateFormat;import java.util.*;import static com.rongke.web.EvaluationController.writeExcel;/** * @ChannelController * @Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/channel")@Transactional@CrossOriginpublic class ChannelController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private ChannelService channelService;    @Autowired    private UserService userService;    @Autowired    private AdminRoleService adminRoleService;//角色    @Autowired    private ChannelRecordService channelRecordService;    @Autowired    private ChannelSumService channelSumService;    private final String accessUrl= ConstantFactory.getConfig().getAccessUrl();//用户签名    /**     * @添加     * @param channel     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addChannel(@RequestBody Channel channel){        log.debug("添加");        if (channel.getId() == null) {            Channel channel1 = channelService.selectOne(new EntityWrapper<Channel>()                    .or("name={0}",channel.getName())                    .or("login_name={0}",channel.getLoginName())            );            if(channel1!=null){                if(channel.getName().equals(channel1.getName()))return JsonResp.toFail("【渠道商】 名称已存在");                if(channel.getLoginName().equals(channel1.getLoginName()))return JsonResp.toFail("【渠道商】 账号已存在");            }            channel.setPassword(Md5.md5Encode(channel.getPassword()));        }else{            Channel channelOld = channelService.selectById(channel.getId());            channel.setPassword(channelOld.getPassword());        }        String linkUrl =accessUrl+ "?channelName="+ DigestUtils.md5Hex(channel.getLoginName());        channel.setLinkUrl(linkUrl);        channel.setEncryption(DigestUtils.md5Hex(channel.getLoginName()));//加密比对        channel.setStatus(1);        channelService.insertOrUpdate(channel);        return JsonResp.ok(channel);    }    /**     * @修改     * @param channel     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateChannel(@RequestBody Channel channel){        log.debug("修改");        channelService.updateById(channel);        return JsonResp.ok(channel);    }    /**     * @根据id查找     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectChannel(Long id){        log.debug("查找");        Channel channel = channelService.selectById(id);        return JsonResp.ok(channel);    }    /**     * @增加分享链接点击量     */    @RequestMapping(value="/addClickCount", method = RequestMethod.GET)    public JsonResp addClickCount(String channelName){        log.debug("增加分享链接点击量");        EntityWrapper<Channel> ew=new EntityWrapper<>();        ew.eq("login_name",new String(Base64Utils.decodeFromString(channelName)));        Channel channel = channelService.selectOne(ew);        channelService.updateById(channel);        return JsonResp.ok();    }    /**     * @param     * @return 返回值JsonResp     * @根据id查找管理员     */    @RequestMapping(value = "/login", method = RequestMethod.GET)    public JsonResp login(String userName, String password){        log.debug("登录");        return JsonResp.ok(channelService.channelLogin(userName,password));    }    /**     * @param     * @return 返回值JsonResp     * @获取当前登录渠道商     */    @RequestMapping(value = "/getThisLogin", method = RequestMethod.GET)    public JsonResp getThisLogin(){        log.debug("获取当前登录渠道商");        Channel channel = channelService.getCurentChannel();        return JsonResp.ok(channel);    }    /**     * @查找列表     * @param     * @return 返回值JsonResp     */    @RequestMapping(value="/selectList", method = RequestMethod.GET)//    @RequiresAuthentication    public JsonResp selectList(Integer pageNo, Integer pageSize, String loginName){        log.debug("查找列表");        Page page = new Page(pageNo,pageSize);        EntityWrapper<Channel> entityWrapper = new EntityWrapper<>();//        entityWrapper.eq("status",1);        if (!loginName.equals("")) {            entityWrapper.like("login_name",loginName);        }        page = channelService.selectPage(page,entityWrapper);        return JsonResp.ok(new PageDto(pageNo,pageSize,page.getRecords(),page.getTotal()));    }    /**     * @删除     * @param     * @return 返回值JsonResp     */    @RequestMapping(value="/deleteOne", method = RequestMethod.GET)    public JsonResp deleteOne(Long id,Integer i){        log.debug("删除");        Channel channel = channelService.selectById(id);        channel.setStatus(i);        channelService.updateById(channel);        return JsonResp.ok();    }    /**     * @渠道商查询自己的注册会员     * @param channelId(不为空说明后台查询指定   否则渠道商查询自己)     * @return 返回值JsonResp     */    @RequestMapping(value="/findMyMember", method = RequestMethod.GET)    public JsonResp findMyMember(Integer pageNo, Integer pageSize, String phone, String source, Long channelId,String time){        log.debug("渠道商查询自己的注册会员");        Page page = new Page(pageNo,pageSize);        Channel channel = null;        if (channelId == null) {            channel = channelService.getCurentChannel();        }else{            channel = channelService.selectById(channelId);        }        Map map=new HashMap();        map.put("phone",phone);        if(source!=null && !"".equals(source)){            map.put("source",source);        }else {            map.put("source",channel.getName());        }        String time1="",time2="";        if (time!=null && !"".equals(time)) {            String[] array = time.split("~");            time1 = array[0];            time2 = array[1];        }        map.put("time1",time1);        map.put("time2",time2);        map.put("startIndex",(pageNo-1)*pageSize);        map.put("size",pageSize);        List<User> userList = userService.findUserDateList(map);        Integer size=userService.findUserDateListSize(map);        return JsonResp.ok(new PageDto(pageNo,pageSize,userList,size));    }    /**     * @导出     * @param channelId(不为空说明后台查询指定   否则渠道商查询自己)     * @return 返回值JsonResp     */    @RequestMapping(value="/makeExcle", method = RequestMethod.GET)    public JsonResp makeExcle(String phone, String userName, Long channelId, String time, HttpServletRequest request, HttpServletResponse response) throws IOException {        log.debug("导出");        Channel channel = null;        if (channelId == null) {            channel = channelService.getCurentChannel();        }else {            channel = channelService.selectById(channelId);        }        Map map=new HashMap();        map.put("phone",phone);        map.put("userName",userName);        map.put("source",channel.getLoginName());        String time1="",time2="";        if (time!=null && !"".equals(time)) {            String[] array = time.split("~");            time1 = array[0];            time2 = array[1];        }        map.put("time1",time1);        map.put("time2",time2);        List<User> userList = userService.findUserDateList(map);        XSSFWorkbook excelbook = new XSSFWorkbook(); //创建workBook        XSSFSheet excelSheet = excelbook.createSheet();//创建sheet表        XSSFRow excelRow = excelSheet.createRow(0);//创建第一行        XSSFCellStyle headerStyle = excelbook.createCellStyle();//设置 居中        headerStyle.setAlignment(XSSFCellStyle.ALIGN_CENTER);        //接下来是创建 列标题 ,cell的起始值是 0,可创建n个列标题        String[] Title = { "用户手机号", "用户姓名", "认证状态", "注册日期", "注册来源"};        for(int a=0;a<Title.length;a++){            XSSFCell cell = excelRow.createCell(a);            cell.setCellStyle(headerStyle);//居中            cell.setCellValue(Title[a]);        }        //接下来遍历List,并写入EXCEL中        for(int i = 0,y= userList.size(); i<y;i++) {            //创建行,行号应从1开始,因为表头行(列标题)占据了第0行            excelRow = excelSheet.createRow(i + 1);            //将该行每一列的数据写入,可写n列            User user = userList.get(i); // List 的起始值是0            excelRow.createCell(0).setCellValue(user.getPhone());            excelRow.createCell(1).setCellValue(user.getRealName());            excelRow.createCell(2).setCellValue(user.getAuthStatus());            excelRow.createCell(3).setCellValue(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(user.getGmtDatetime()));            excelRow.createCell(4).setCellValue(user.getSource());        }        String fileanme = "引流注册会员列表";        String date = new SimpleDateFormat("yyyyMMdd").format(new Date());        FileType fileType = FileType.XLS;        String path = fileType.getAbsolutePath();        String filePath = path + File.separator+fileanme+date+".xls";        log.info("filePath"+filePath);        writeExcel(request,response, excelbook, filePath, "文件名");//具体导出的方法        String url = request.getRequestURL().toString().split("api")[0]+"/pic/xls/"+File.separator+fileanme+date+".xls";        return JsonResp.ok(url);    }    /**     * 以下方法     * @ANS     */    /**     *  下拉使用     */    @RequestMapping(value="/channelAll", method = RequestMethod.GET)    public R channelAll(){        List<Channel> channels = channelService.selectList(null);//        throw new FailException(JsonCodeEnum.OVERTIME.getMessage());        return R.ok().put("data",channels);    }    @RequestMapping(value="/channelPage", method = RequestMethod.GET)    public PageUtils channelPage(@RequestParam Map<String,Object> parems){        PageUtils pageUtils = channelService.channelPage(parems);        List<Channel> channels = (List<Channel>) pageUtils.getList();        List<Integer> roleIds = Lists.newArrayList();        if(!channels.isEmpty()){            for(Channel channel:channels){                if(channel.getPrincipal()!=0&&!roleIds.contains(channel.getPrincipal())){                    roleIds.add(channel.getPrincipal());                }            }            if(!roleIds.isEmpty()){                List<AdminRole> adminRoles = adminRoleService.selectList(new EntityWrapper<AdminRole>()                        .setSqlSelect("id,name")                        .in("id",roleIds)                );                for(Channel channel:channels){                    for(AdminRole role:adminRoles){                        if(channel.getPrincipal().equals(role.getId())){                            channel.setPrincipalName(role.getName());                        }                    }                }            }        }        return pageUtils;    }    @RequestMapping(value="/ANSadd", method = RequestMethod.POST)    public R add(@RequestBody Channel channel) throws UnsupportedEncodingException {        if(StringUtils.isBlank(channel.getName())){            return R.error("渠道商不能为空");        }        Channel channel1 = channelService.selectOne(new EntityWrapper<Channel>().eq("name", channel.getName()));        if(channel1!=null){            return R.error("该渠道已存在");        }        channel.setCreateTime(new Date());        channelService.insert(channel);        Channel channel2 = channelService.selectOne(new EntityWrapper<Channel>().eq("name",channel.getName()));        ChannelSum channelSum = new ChannelSum();        channelSum.setCid(channel2.getId());        channelSum.setName(channel2.getName());        channelSumService.channelSumAdd(channelSum);// 添加渠道商的时候给渠道统计表添加name        channel.setEncryption(DigestUtils.md5Hex(channel.getId()+""));        String url = accessUrl + "?channelName=" + channel.getEncryption();        channel.setLinkUrl(url);//        http://api.ft12.com/api.php?url=http%3a%2f%2fhsqb.qctech.vip/?channelName=c51ce410c124a10e0db5e4b97fc2af39&apikey=A131ww2125@ddd//        http://api.ft12.com/api.php?url=http%3A%2F%2Fhsqb.qctech.vip%2F%3FchannelName%3Dc51ce410c124a10e0db5e4b97fc2af39&apikey=A131ww2125@ddd        String linkUrl = "http://api.ft12.com/api.php?url=" +  URLEncoder.encode(url,"UTF-8") + "&apikey=A131ww2125@ddd";        String result = HttpClientUtil.get(linkUrl);        channel.setShortUrl(result);        channelService.updateById(channel);        return  R.ok();    }    @RequestMapping(value="/ANSupdate", method = RequestMethod.POST)    public R update(@RequestBody Channel channel) throws UnsupportedEncodingException {        if(StringUtils.isBlank(channel.getShortUrl())){            String linkUrl = "";            String url = "";            if(StringUtils.isBlank(channel.getEncryption())){                url = accessUrl + "?channelName=" + DigestUtils.md5Hex(channel.getId()+"");                linkUrl = "http://api.ft12.com/api.php?url=" +  URLEncoder.encode(url,"UTF-8") + "&apikey=A131ww2125@ddd";//                linkUrl = "http://api.ft12.com/api.php?url=" +accessUrl + "?channelName=" + DigestUtils.md5Hex(channel.getId()+"");            }else{                url = accessUrl + "?channelName=" + channel.getEncryption();                linkUrl = "http://api.ft12.com/api.php?url=" +  URLEncoder.encode(url,"UTF-8") + "&apikey=A131ww2125@ddd";//                linkUrl = "http://api.ft12.com/api.php?url=" +accessUrl + "?channelName=" + channel.getEncryption();            }            String result = HttpClientUtil.get(linkUrl);//            RestTemplate restTemplate = new RestTemplate();//            String result = restTemplate.getForObject(linkUrl, String.class);            channel.setShortUrl(result);        }        channel.setUpdateTime(new Date());        channelService.updateById(channel);        ChannelSum channelSum = channelSumService.selectOne(new EntityWrapper<ChannelSum>().eq("cid",channel.getId()));        channelSum.setName(channel.getName());        channelSumService.updateById(channelSum);        return R.ok();    }    @RequestMapping(value="/info/{userId}", method = RequestMethod.GET)    public R info(@PathVariable("userId") String userId){        Channel channel = channelService.selectById(userId);        return R.ok().put("data",channel);    }    @RequestMapping(value="/ANSdelete", method = RequestMethod.POST)    public R delete(@RequestBody Long[] ids){        channelService.deleteBatchIds(Arrays.asList(ids));        return R.ok();    }    /**     * 统计访问     */    @RequestMapping(value="/jiayi", method = RequestMethod.GET)    public R rest(HttpServletRequest request,String encryption){        Channel channel = channelService.selectOne(new EntityWrapper<Channel>().eq("encryption", encryption));        if(channel!=null){            channel.setMemberCount(channel.getMemberCount()+1);            channelService.updateById(channel);            ChannelRecord channelRecord=new ChannelRecord();            channelRecord.setChannelId(channel.getId());            channelRecord.setLoginTime(new Date());            String ip = IPConfig.getIpAddr(request);            channelRecord.setLoginIp(ip);            channelRecordService.insert(channelRecord);        }        return R.ok();    }    //禁用渠道    @RequestMapping(value="/dis/{channelId}", method = RequestMethod.GET)    public R disChannel(@PathVariable("channelId") String channelId){        Channel channel = channelService.selectById(channelId);        channel.setStatus(2);        channelService.updateById(channel);        return R.ok().put("data",channel);    }    //启用渠道    @RequestMapping(value="/open/{channelId}", method = RequestMethod.GET)    public R useChannel(@PathVariable("channelId") String channelId){        Channel channel = channelService.selectById(channelId);        channel.setStatus(1);        channelService.updateById(channel);        return R.ok().put("data",channel);    }    public static void main(String[] args) throws UnsupportedEncodingException {        String url = "http://hsqb.qctech.vip/" + "?channelName=" + "c51ce410c124a10e0db5e4b97fc2af39";        String linkUrl = "http://api.ft12.com/api.php?url=" +  URLEncoder.encode(url,"UTF-8") + "&apikey=A131ww2125@ddd";        String result22 = HttpClientUtil.get(linkUrl);        System.out.println(result22);    }}