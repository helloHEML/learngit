package com.rongke.web.config;import com.rongke.utils.RequestUtils;import com.rongke.utils.URLUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.stereotype.Controller;import javax.servlet.ServletContext;import javax.servlet.http.HttpServletRequest;import java.io.ByteArrayOutputStream;import java.util.Map;/** * 项目配置 */@Controllerpublic class ConfigUtil {        /**         * 控制层类名结尾         */        private String controllerFix = "Controller";        /**         * 工具模块基本报名         */        private static final String commonBasePackage = "com.rongke.web";        /**         * 工具模块业务报名         */        public static final String commonBottomPackage = commonBasePackage + ".upload";        private static char[] base64EncodeChars = new char[] { 'A', 'B', 'C', 'D',                'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',                'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd',                'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',                'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3',                '4', '5', '6', '7', '8', '9', '+', '/','=' };        private static byte[] base64DecodeChars = new byte[] { -1, -1, -1, -1, -1,                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,                -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59,                60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,                10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1,                -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,                38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1,                -1, -1 };    /**         * 页面访问地址          */        private String pageDomain;        public String getPageDomain() {            return pageDomain;        }        public void setPageDomain(String pageDomain) {            this.pageDomain = pageDomain;        }        /**         * URL分隔符         */        private String urlSplit = "|||";        /**         * 密钥对         */        private Map<String, String> keyPair;        public Map<String, String> getKeyPair() {            return keyPair;        }        public void setKeyPair(Map<String, String> keyPair) {            this.keyPair = keyPair;        }        public String getUrlSplit() {            return urlSplit;        }        public void setUrlSplit(String urlSplit) {            this.urlSplit = urlSplit;        }        public String getControllerFix() {            return controllerFix;        }        public void setControllerFix(String controllerFix) {            this.controllerFix = controllerFix;        }        private String fileUploadUri;        private String getFileUploadUri() {            return fileUploadUri;        }        public void setFileUploadUri(String fileUploadUri) {            this.fileUploadUri = fileUploadUri;        }        /**         * 项目名字         */        private String appName = ConfigUtil.class.getClassLoader().getResource(".").getFile();        /**         * 顶级域名         */        private String projectDomain;        public String getProjectDomain() {            return projectDomain;        }        public void setProjectDomain(String projectDomain) {            this.projectDomain = projectDomain;        }        /**         * 项目名字中文         */        private String appNameCH;        public String getAppNameCH() {            return appNameCH;        }        public Integer getPageSizeDefault() {            return pageSizeDefault;        }        public void setPageSizeDefault(Integer pageSizeDefault) {            this.pageSizeDefault = pageSizeDefault;        }        public void setAppNameCH(String appNameCH) {            this.appNameCH = appNameCH;        }        private Integer pageSizeDefault;        /**         * 登陆图片验证码存入会话key         */        private String loginPictureSessionKey;        /**         * 控制层扫描包路径         */        private String controllerPackagePath;        public String getControllerPackagePath() {            return controllerPackagePath;        }        public void setControllerPackagePath(String controllerPackagePath) {            this.controllerPackagePath = controllerPackagePath;        }        /**         * 登陆后存入cookie的令牌名字         */        private String loginTokenCookieName;        /**         * 登陆后存入cookie的令牌过期时间         */        private Integer loginTokenCookieExpirationTime;        /**         * 文件上穿路径         */        private String fileUploadPath;        /**         * 资源文件路径         */        private String resourcesPath = "/resources";        /**         * 资源文件远程地址         */        private String resourcePathRemote;        /**         * 跨域域名         */        private String CORSDomain = "*";        public String getCORSDomain() {            return CORSDomain;        }        public void setCORSDomain(String CORSDomain) {            this.CORSDomain = CORSDomain;        }        /**         * 接口地址         */        private String apiHost;        public String getApiHost() {            return apiHost;        }        public void setApiHost(String apiHost) {            this.apiHost = apiHost;        }        public String getResourcePathRemote() {            return resourcePathRemote;        }        public void setResourcePathRemote(String resourcePathRemote) {            this.resourcePathRemote = resourcePathRemote;        }        public String getFromEmail() {            return fromEmail;        }        public void setFromEmail(String fromEmail) {            this.fromEmail = fromEmail;        }        /**         * 邮件发送账号         */        private String fromEmail;        /**         * 最低购买金额         */        private Double buyAmountLowest;        public Double getBuyAmountLowest() {            return buyAmountLowest;        }        public void setBuyAmountLowest(Double buyAmountLowest) {            this.buyAmountLowest = buyAmountLowest;        }        public String getResourcesPath() {            return resourcesPath;        }        public void setResourcesPath(String resourcesPath) {            this.resourcesPath = resourcesPath;        }        private String getFileUploadPath() {            if (StringUtils.isBlank(fileUploadPath)) {                fileUploadPath = System.getProperty("user.home");            }            return fileUploadPath;        }        public void setFileUploadPath(String fileUploadPath) {            this.fileUploadPath = fileUploadPath;        }        public Integer getLoginTokenCookieExpirationTime() {            return loginTokenCookieExpirationTime;        }        public void setLoginTokenCookieExpirationTime(Integer loginTokenCookieExpirationTime) {            this.loginTokenCookieExpirationTime = loginTokenCookieExpirationTime;        }        public String getLoginTokenCookieName() {            return loginTokenCookieName;        }        public void setLoginTokenCookieName(String loginTokenCookieName) {            this.loginTokenCookieName = loginTokenCookieName;        }        public String getLoginPictureSessionKey() {            return loginPictureSessionKey;        }        public void setLoginPictureSessionKey(String loginPictureSessionKey) {            this.loginPictureSessionKey = loginPictureSessionKey;        }        public String getAppName() {            return appName;        }        public void setAppName(String appName) {            this.appName = appName;        }    /**         * 存入key值         *         * @param name 模块名         * @param key  唯一标识         * @return 唯一标识         */        public String settingKey(String name, String key) {            return getAppName() + ":" + name + key;        }        /**         * 文件上传访问地址         */        private String fileUploadHost;        private String getFileUploadHost() {            return fileUploadHost;        }        public void setFileUploadHost(String fileUploadHost) {            this.fileUploadHost = fileUploadHost;        }        /**         * 获取文件上传最终目录         *         * @param context 请求对象         * @return 目录         */        public String getUploadFinalDir(ServletContext context) {            String fileUploadPath = getFileUploadPath();            if (StringUtils.isBlank(fileUploadPath)) {                fileUploadPath = RequestUtils.getProjectAbsolutePath(context).getPath();            } else {                if (!StringUtils.isBlank(getFileUploadUri())) {                    fileUploadPath += URLUtils.uriParseFilePath(getFileUploadUri());                }            }        /*if (!StringUtils.isBlank(getResourcesPath())) {            fileUploadPath += File.separator + getResourcesPath();        }*/            return fileUploadPath;        }        /**         * 获取文件上传的域名基本地址         *         * @param request 请求对象         * @return 域名基本地址         */        private String getUploadHost(HttpServletRequest request) {            String host = getFileUploadHost();            if (StringUtils.isBlank(host)) {                host = RequestUtils.getHostPath(request);            } else {                if (!StringUtils.isBlank(getFileUploadUri())) {                    host += URLUtils.URL_SPLIT + getFileUploadUri();                }            }            return host;        }    /**     * 解密     * @param str     * @return     */    public static byte[] decode(String str) {        byte[] data = str.getBytes();        int len = data.length;        ByteArrayOutputStream buf = new ByteArrayOutputStream(len);        int i = 0;        int b1, b2, b3, b4;        while (i < len) {            do {                b1 = base64DecodeChars[data[i++]];            } while (i < len && b1 == -1);            if (b1 == -1) {                break;            }            do {                b2 = base64DecodeChars[data[i++]];            } while (i < len && b2 == -1);            if (b2 == -1) {                break;            }            buf.write((int) ((b1 << 2) | ((b2 & 0x30) >>> 4)));            do {                b3 = data[i++];                if (b3 == 61) {                    return buf.toByteArray();                }                b3 = base64DecodeChars[b3];            } while (i < len && b3 == -1);            if (b3 == -1) {                break;            }            buf.write((int) (((b2 & 0x0f) << 4) | ((b3 & 0x3c) >>> 2)));            do {                b4 = data[i++];                if (b4 == 61) {                    return buf.toByteArray();                }                b4 = base64DecodeChars[b4];            } while (i < len && b4 == -1);            if (b4 == -1) {                break;            }            buf.write((int) (((b3 & 0x03) << 6) | b4));        }        return buf.toByteArray();    }}