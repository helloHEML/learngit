package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.rongke.commons.JsonResp;import com.rongke.model.DecisionRuleSet;import com.rongke.service.DecisionRuleSetService;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.R;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.Date;import java.util.List;import java.util.Map;/** * @UserPhoneController * @Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/decisionRuleSet")@Transactional@CrossOriginpublic class DecisionRuleSetController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private DecisionRuleSetService decisionRuleSetService;    /** 添加 */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addDecisionRule(@RequestBody DecisionRuleSet decisionRuleSet){        log.debug("添加");        decisionRuleSet.setGmtDatetime(new Date());        decisionRuleSet.setIsUse(0);        decisionRuleSetService.insert(decisionRuleSet);        return JsonResp.ok(decisionRuleSet);    }    /**显示修改页面*/    @RequestMapping(value = "/thisInfo/{id}",method = RequestMethod.GET)    public R thisInfo(@PathVariable("id") String id){        DecisionRuleSet decisionRuleSet = decisionRuleSetService.selectById(id);        return R.ok().put("data",decisionRuleSet);    }    /**修改*/    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateDecisionRule(@RequestBody DecisionRuleSet decisionRuleSet){        log.debug("修改");        decisionRuleSetService.updateById(decisionRuleSet);        return JsonResp.ok(decisionRuleSet);    }    /**删除*/    @RequestMapping(value="/deleteById", method = RequestMethod.GET)    public JsonResp deleteById(Long id){        log.debug("delete");        decisionRuleSetService.deleteById(id);        return JsonResp.ok();    }    /**不分页显示*/    @RequestMapping(value="/select", method = RequestMethod.GET)    public JsonResp select(){        log.debug("select");        List<DecisionRuleSet> decisionRuleSetList =  decisionRuleSetService.selectList(new EntityWrapper<DecisionRuleSet>());        return JsonResp.ok(decisionRuleSetList);    }    /**     * 启用/禁用     */    @RequestMapping(value = "/disable",method = RequestMethod.GET)    public R disable(Integer id){        DecisionRuleSet decisionRuleSet = decisionRuleSetService.selectById(id);        if(decisionRuleSet.getIsUse() == 0){            decisionRuleSet.setIsUse(1);        }else if(decisionRuleSet.getIsUse() == 1){            decisionRuleSet.setIsUse(0);        }        decisionRuleSetService.updateById(decisionRuleSet);        return R.ok();    }    /**显示分页*/    @RequestMapping(value="/getPages", method = RequestMethod.GET)    public PageUtils getPages(@RequestParam Map<String,Object> params){        return decisionRuleSetService.getPages(params);    }}