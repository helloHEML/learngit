package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.rongke.commons.JsonResp;import com.rongke.enums.FileType;import com.rongke.enums.StatusEnum;import com.rongke.model.*;import com.rongke.service.*;import com.rongke.utils.DateUtils;import com.rongke.utils.StringUtil;import com.rongke.utils.ans.MapUtils;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.Query;import com.rongke.utils.ans.R;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.Logger;import org.apache.poi.xssf.usermodel.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.IOException;import java.math.BigDecimal;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.*;/** * @DataReportController * @Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/dataReport")@Transactional@CrossOriginpublic class DataReportController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private DataReportService dataReportService;    @Autowired    private EvaluationService evaluationService;    @Autowired    private RepayRecordService repayRecordService;    @Autowired    private OrderService orderService;    @Autowired    private AdminService adminService;    @Autowired    private UserService userService;    @Autowired    private ChannelService channelService;    @Autowired    private AuthenticationService authenticationService;    @Autowired    private  AdminRoleService adminRoleService;    @Autowired    private OrderSumService orderSumService;    /**     * @添加     * @param dataReport     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addDataReport(@RequestBody DataReport dataReport){        log.debug("添加");        dataReportService.insert(dataReport);        return JsonResp.ok(dataReport);    }    /**     * @修改     * @param dataReport     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateDataReport(@RequestBody DataReport dataReport){        log.debug("修改");        dataReportService.updateById(dataReport);        return JsonResp.ok(dataReport);    }    /**     * @根据id查找     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectDataReport(Long id){        log.debug("查找");        DataReport dataReport = dataReportService.selectById(id);        return JsonResp.ok(dataReport);    }    /**     * @根据id查找     * @param     * @return 返回值JsonResp     */    @RequestMapping(value="/selectDataReport", method = RequestMethod.GET)    public JsonResp selectDataReport(){        Long a = System.currentTimeMillis();        Admin admin=adminService.findLoginUser();        AdminRole adminRole=adminRoleService.selectById(admin.getAdminRoleId());        if( adminRole.getType()!=0){  //如果不是总管理员 给默认值            Map<String,Object> map = new HashMap<>();            map.put("todayMemberCount",0);            map.put("todayRegisterCount",0);            map.put("todayMoneyOut",0);            map.put("todayMoneyIn",0);//        map.put("proportion",todayMoneyIn);            DataReport dataReport=new DataReport();            dataReport.setMemberCount(0);            dataReport.setMoneyIn(new BigDecimal(0));            dataReport.setMoneyOut(new BigDecimal(0));            dataReport.setOrderCount(0);            dataReport.setRegisterCount(0);            map.put("dataReport",dataReport);            return JsonResp.ok(map);        }        SimpleDateFormat format =  new SimpleDateFormat("yyyy-MM-dd");        String day = format.format(new Date());        Integer todayMemberCount = dataReportService.selectTodayMemberCount(day);        Integer todayRegisterCount = dataReportService.selectTodayRegisterCount(day);        String todayMoneyOut = dataReportService.selectTodayMoneyOut(day);        String todayMoneyIn = dataReportService.selectTodayMoneyIn(day);        DataReport dataReport = dataReportService.selectById(1);        Map<String,Object> map = new HashMap<>();        map.put("todayMemberCount",todayMemberCount);        map.put("todayRegisterCount",todayRegisterCount);        map.put("todayMoneyOut",todayMoneyOut);        map.put("todayMoneyIn",todayMoneyIn);//        map.put("proportion",todayMoneyIn);        map.put("dataReport",dataReport);        System.err.println(System.currentTimeMillis()-a);        return JsonResp.ok(map);    }    /**     * 客服审核统计     * @param     * @return     */    @RequestMapping(value="/findUserAuditStatement", method = RequestMethod.GET)    public JsonResp findUserAuditStatement(String time){        log.debug("客服审核统计");        Map map=new HashMap();        String time1="",time2="";        if (StringUtil.isNotEmpty(time)) {            String[] array = time.split("~");            time1 = array[0];            time2 = array[1];        }        map.put("time1",time1);        map.put("time2",time2);        List<Authentication>  authentications=authenticationService.selectAuthenAdmiList(map);        List<Map> maps=new ArrayList<>();        Set<Integer> integers=new HashSet<>();        for (Authentication auth:authentications ) {            integers.add(auth.getAuditorId());        }        Iterator iterator=integers.iterator();        while (iterator.hasNext()){            int passNum=0,refuseNum=0,notOperatedNum=0,totalNum=0;            Integer audiroeId=(Integer) iterator.next();            Map reponseMap=new HashMap();            int m=0,n=authentications.size();            for (;m<n;m++){                Authentication authen=authentications.get(m);                Admin admin=authen.getAuditor();                String bma=authen.getUserBaseMsgAuth();                if(authen.getAuditorId()==audiroeId){                    reponseMap.put("loginName",admin.getLoginName());                    reponseMap.put("name",admin.getName());                    if("1".equals(bma)){                        passNum++;                    }else if("2".equals(bma)){                        refuseNum++;                    }else if("3".equals(bma)){                        notOperatedNum++;                    }                    totalNum++;                }            }            reponseMap.put("passNum",passNum);//通过人数            reponseMap.put("refuseNum",refuseNum);//拒绝人数            reponseMap.put("notOperatedNum",notOperatedNum);//未审核人数            reponseMap.put("totalNum",totalNum);//总人数            maps.add(reponseMap);        }        return JsonResp.ok(maps);    }    /**     * 首页统计卡片使用     */    @RequestMapping(value="/tjHome", method = RequestMethod.GET)    public R tjHome(@RequestParam Map<String,Object> params){        adminService.findLoginUser();        return dataReportService.tjHome();    }    /**     * 首页echarts     */    @RequestMapping(value="/tjHomeEcharts", method = RequestMethod.GET)    public R tjHomeEcharts(@RequestParam Map<String,Object> params){        adminService.findLoginUser();        String type = (String) params.get("type");        if(StringUtils.isBlank(type)||"1".equals(type)){            return dataReportService.tjHomeYear(params);        }else{            return dataReportService.tjHomeMonth(params);        }    }    /**		230     * 查看所有渠道认证情况（渠道报表用）     */    @RequestMapping(value="/channelStatisticsAll", method = RequestMethod.GET)    public PageUtils channelStatisticsAll(@RequestParam Map<String,Object> params){        adminService.findLoginUser();        PageUtils pageUtils = channelService.channelUserTj(params);        return pageUtils;    }    /**     * 渠道商总统计     * 239行     */    @RequestMapping(value="/channelTotalTj", method = RequestMethod.GET)    public PageUtils channelTotalTj(@RequestParam Map<String,Object> params){        adminService.findLoginUser();        PageUtils pageUtils = channelService.channelTotalTj(params);        return pageUtils;    }    /**     * 审核人员 工作量 报表(审核统计用)     */    @RequestMapping(value="/TJadminEvaCount", method = RequestMethod.GET)    public PageUtils TJadminEvaCount(@RequestParam Map<String,Object> params){        adminService.findLoginUser();       return adminService.TJadminEvaCount(params);    }    /**     * 还款明细（还款明细）     */    @RequestMapping("/repayPage")    public PageUtils repayPage(@RequestParam Map<String,Object> params){        adminService.findLoginUser();        return repayRecordService.repayPage(params);    }    /**     * 财务日报表     */    @RequestMapping("/financeReportPage")    public PageUtils financeReportPage(@RequestParam Map<String,Object> params){        adminService.findLoginUser();        return dataReportService.financeReportPage(params);    }    /**     * 统计     */    @RequestMapping("/financeReportPage2")    public PageUtils financeReportPage2(@RequestParam Map<String,Object> params){        adminService.findLoginUser();        return dataReportService.financeReportPage(params);    }    /**     * 订单还款率统计     */    @RequestMapping("/TJrepaymentRatelcp")    public PageUtils TJrepaymentRate(@RequestParam Map<String,Object> params){        return dataReportService.TJrepaymentRate(params);    }    /**     * 订单还款率统计lcq     */    @RequestMapping("/TJrepaymentRate")    public PageUtils TJrepaymentRateLcq(@RequestParam Map<String,Object> params){        Map map=new HashMap();        map.put("time1",params.get("time1"));        map.put("time2",params.get("time2"));        map.put("pageNo",((Integer.valueOf(params.get("page").toString())-1)*Integer.valueOf(params.get("limit").toString())));        map.put("pageSize",params.get("limit"));        List<OrderSum> orderList= orderSumService.selectListAlls(map);        Integer count=orderSumService.selectListAllsCount(map);        if (count==null){            count=0;        }        Page<OrderSum> page=new Page<OrderSum>();        page.setRecords(orderList);        page.setLimit(Integer.valueOf(params.get("limit").toString()));        page.setTotal(count);        return new PageUtils(page);    }    /**     * 新首页统计     * 卡片     */    @RequestMapping("/newTJCard")    public R newTJCard(){        return dataReportService.newTJCard();    }    /**     * 新首页统计卡片:echarts     * v2     */    @RequestMapping("/newTJCardEcharts")    public R newTJCardEcharts(){        return dataReportService.newTJCardEcharts();    }}