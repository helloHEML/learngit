package com.rongke.web.ans.usr;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.rongke.model.ans.TblAccountEntity;import com.rongke.model.ans.TblWechatuserEntity;import com.rongke.service.ans.sys.TblAccountService;import com.rongke.service.ans.sys.TblWechatuserService;import com.rongke.service.ans.usr.WeChatUserService;import com.rongke.utils.ans.FileUtil;import com.rongke.utils.ans.MapUtils;import com.rongke.utils.ans.R;import com.rongke.utils.ans.StringEncodingUtil;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import org.springframework.web.client.RestTemplate;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.UnsupportedEncodingException;import java.math.BigDecimal;import java.net.URLEncoder;import java.util.Date;/** * 微信登陆 */@Controller@RequestMapping("/AutoWechat")@Transactionalpublic class WeChatLoginController {    @Autowired    private TblAccountService tblAccountService;    @Autowired    private TblWechatuserService tblWechatuserService;    @Autowired    private WeChatUserService weChatUserService;    /**     *  根据OpenID获得用户信息     * @param request     * @param response     * @param openid     * @return     */    @PostMapping("/openid")    @ResponseBody    public R openIDAccount(HttpServletRequest request, HttpServletResponse response, String openid){        if(openid == null){            return R.error("openid不能为空");        }        TblAccountEntity accounts = this.tblAccountService.selectOne(new EntityWrapper<TblAccountEntity>().eq("Account_OpenID",openid));        if(accounts==null){            return R.error("用户不存在");        }        //获得    还钱金额        BigDecimal stillMoney = weChatUserService.userDebitMoney(new MapUtils().put("isType", "").put("accountID",accounts.getAccountId()));        //获得    收钱金额        BigDecimal collectMoney = weChatUserService.userDebitMoney(new MapUtils().put("isType", "1").put("accountID",accounts.getAccountId()));        return R.ok().put("data",accounts).put("stillMoney",stillMoney.toString()).put("collectMoney",collectMoney.toString());    }    /**     * 用户微信认证     * @param returnUrl     * @param request     * @return     */    @GetMapping("/authorize")    public String authorize(@RequestParam("returnUrl") String returnUrl, HttpServletRequest request) {        String url =null;        try {            String redirect = FileUtil.getProjectBaseUrlNoProject(request)+"AutoWechat/userInfo";            url = "https://open.weixin.qq.com/connect/oauth2/authorize?" +                    "appid=" +"wxe1a02495960d9476"+                    "&redirect_uri="+FileUtil.getProjectBaseUrlNoProject(request)+"AutoWechat/userInfo"+                    "&response_type=code&scope=snsapi_userinfo&" +                    "state="+URLEncoder.encode(returnUrl)+                    "#wechat_redirect";            System.err.println(returnUrl);            System.err.println(URLEncoder.encode(returnUrl,"UTF-8"));        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        }        return "redirect:"+url;    }    /**     * 微信获得用户信息     * @param request     * @param response     * @param code     * @param returnUrl     * @return     */    @GetMapping("/userInfo")    public String auto(HttpServletRequest request, HttpServletResponse response, @RequestParam("code") String code, @RequestParam("state") String returnUrl){        RestTemplate restTemplate = new RestTemplate();        //获得token 和 openid        String tokenANDopenod = "https://api.weixin.qq.com/sns/oauth2/access_token?" +                "appid=" +"wxe1a02495960d9476"+                "&secret=" +"1723a921134374f3fefd7aafeaabcc5d"+                "&code=" +code+                "&grant_type=authorization_code";        String auto = restTemplate.getForObject(tokenANDopenod, String.class);        //获得用户信息        JSONObject json = JSON.parseObject(auto);        String autoinfo = "https://api.weixin.qq.com/sns/userinfo?" +                "access_token=" +json.getString("access_token")+                "&openid=" +json.getString("openid")+                "&lang=zh_CN";        String userinfo = StringEncodingUtil.utf(restTemplate.getForObject(autoinfo,String.class));        TblWechatuserEntity weChatUser = JSON.parseObject(userinfo, TblWechatuserEntity.class);        // 根据 OpenID 查询用户: 如果不存在则插入; 如果存在则跳过        TblAccountEntity accounts = this.tblAccountService.selectOne(new EntityWrapper<TblAccountEntity>().                eq("Account_OpenID",weChatUser.getOpenid()));        TblAccountEntity account = null;        if(accounts==null){            //添加用户            account = new TblAccountEntity();            // 头像和昵称只在第一次插入时候设置//            account.setAccountId(StringEncodingUtil.createNewIdLONG());//设置ID 自增ID不需要设置了            account.setAccountName(weChatUser.getNickname());            account.setAccountOpenid(weChatUser.getOpenid());            account.setAccountNickname(weChatUser.getNickname());            account.setAccountSex(weChatUser.getSex());            account.setAccountHeadurl(weChatUser.getHeadimgurl());            account.setAccountUnionid(weChatUser.getUnionid());            account.setAccountBalance("0.00");//初始金额            account.setAccountCreatetime(new Date());            account.setAccountModifytime(new Date());            account.setAccountStatus(1);            boolean insert = this.tblAccountService.insert(account);        }else{            account = accounts;        }        weChatUser.setCreateTime(new Date());        weChatUser.setUpdateTime(new Date());        weChatUser.setVersion((long) 1);        //查询微信是否存在        TblWechatuserEntity wechatUserS = tblWechatuserService.selectOne(new EntityWrapper<TblWechatuserEntity>().                eq("openid", account.getAccountOpenid()));        if(wechatUserS == null){//            weChatUser.setId(StringEncodingUtil.createNewIdLONG());//不需要再设置ID了            boolean insert = tblWechatuserService.insert(weChatUser);        }else{            weChatUser.setId(wechatUserS.getId());            boolean update = tblWechatuserService.updateById(weChatUser);            if(StringUtils.isBlank(weChatUser.getUnionid())&&StringUtils.isBlank(weChatUser.getOpenid())){                if(!account.getAccountOpenid().equals(weChatUser.getOpenid())||!account.getAccountUnionid().equals(weChatUser.getUnionid())){                    account.setAccountOpenid(weChatUser.getOpenid());                    account.setAccountUnionid(weChatUser.getUnionid());                    boolean b = tblAccountService.updateById(account);                }            }        }        String resultUrl = "";        if(returnUrl.indexOf(".html?")!=-1){            resultUrl = returnUrl+"&openid="+weChatUser.getOpenid();        }else{            resultUrl = returnUrl+"?openid="+weChatUser.getOpenid();        }        return "redirect:"+ resultUrl;    }}