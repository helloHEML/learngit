package com.rongke.web;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.rongke.commons.JsonResp;import com.rongke.commons.PageDto;import com.rongke.enums.FileType;import com.rongke.enums.StatusEnum;import com.rongke.model.*;import com.rongke.service.*;import com.rongke.utils.ConstantFactory;import com.rongke.utils.ans.R;import com.rongke.web.ans.config.SysReader;import org.apache.log4j.Logger;import org.apache.poi.xssf.usermodel.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @UserBaseMsgController * @用户基本信息Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/userBaseMsg")@Transactional@CrossOriginpublic class UserBaseMsgController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private UserBaseMsgService userBaseMsgService;    @Autowired    private UserService userService;    @Autowired    private AddressService addressService;    @Autowired    private AdminService adminService;    @Autowired    private AdminRoleService adminRoleService;    @Resource    private UserContactService userContactService;    @Autowired    private AuthenticationService authenticationService;    /**     * @添加用户基本信息     * @param jsonObject     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addUserBaseMsg(@RequestBody JSONObject jsonObject){        log.debug("添加用户基本信息");        User user=userService.selectCurrentUser();        String maritalStatus=jsonObject.getString("maritalStatus");        String education=jsonObject.getString("education");//        String name=jsonObject.getString("name");        JSONObject addressjson=(JSONObject)jsonObject.getJSONObject("address");        JSONObject phoneAddressBookjson1=(JSONObject)jsonObject.getJSONObject("phoneAddressBook1");        JSONObject phoneAddressBookjson2=(JSONObject)jsonObject.getJSONObject("phoneAddressBook2");        String province=addressjson.getString("province");        if(province==null){            return JsonResp.fa("获取地址失败");        }        //保存用户地址        Address address=new Address();        address.setProvince(province);        address.setCity(addressjson.getString("city"));        address.setArea(addressjson.getString("area"));        address.setAddressDetail(addressjson.getString("addressDetail"));        address.setUserId(user.getId());        address.setGmtDatetime(new Date());        address.setStatus(StatusEnum.USED.getTypeName());        addressService.insert(address);        //保存基本信息        UserBaseMsg userBaseMsg=new UserBaseMsg();        userBaseMsg.setUserId(user.getId());        userBaseMsg.setMaritalStatus(maritalStatus);        userBaseMsg.setEducation(education);        userBaseMsg.setGmtDatetime(new Date());        userBaseMsg.setAddressId(address.getId());        userBaseMsg.setStatus("待审核");        userBaseMsgService.insert(userBaseMsg);        //保存联系人        UserContact contact1=new UserContact();        contact1.setUserId(user.getId());        contact1.setName(phoneAddressBookjson1.getString("contact"));        contact1.setPhone(phoneAddressBookjson1.getString("phone"));        contact1.setRelation(phoneAddressBookjson1.getString("relationship"));        contact1.setGmtDatetime(new Date());        contact1.setEmergencyContact("紧急联系人");        UserContact contact2=new UserContact();        contact2.setUserId(user.getId());        contact2.setName(phoneAddressBookjson2.getString("contact"));        contact2.setPhone(phoneAddressBookjson2.getString("phone"));        contact2.setRelation(phoneAddressBookjson2.getString("relationship"));        contact2.setGmtDatetime(new Date());        contact2.setEmergencyContact("紧急联系人");        userContactService.insert(contact1);        userContactService.insert(contact2);        EntityWrapper<Authentication> wrapper = new EntityWrapper<>();        wrapper.eq("user_id",user.getId());        Authentication authentication = authenticationService.selectOne(wrapper);        authentication.setUserBaseMsgAuth("1");        authentication.setPhoneAddressBookAuth("1");        authenticationService.updateById(authentication);        if(!"0".equals(authentication.getPhoneRecordAuth())){//            authenticationService.YysAuth(user.getId(), ConstantFactory.getConfig().getMoheCode(),ConstantFactory.getConfig().getMoheKey());            authenticationService.YysAuth(user.getId());        }        return JsonResp.ok();    }    /**     * @修改用户基本信息     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateUserBaseMsg(@RequestBody UserBaseMsg userBaseMsg){        log.debug("修改用户基本信息");        userBaseMsg.setUptDatetime(new Date());        userBaseMsgService.updateById(userBaseMsg);        return JsonResp.ok(userBaseMsg);    }    /**     * @根据id查找用户基本信息认证     * @param userId     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectUserBasicMsg(Long userId){        log.debug("查找用户基本信息认证");        Map map=new HashMap();        map.put("userId",userId);        UserBaseMsg userBasicMsg = userBaseMsgService.selectBaseMsg(map);        //查询联系人        EntityWrapper<UserContact>  ew=new EntityWrapper<>();        ew.eq("user_id",userId);        ew.eq("emergency_contact","紧急联系人");        List<UserContact> userContacts=userContactService.selectList(ew);        Map responseMap =new HashMap();        responseMap.put("userBasicMsg",userBasicMsg);        responseMap.put("phoneAddressBooks",userContacts);        return JsonResp.ok(responseMap);    }    /**     * @根据条件查找用户基本信息     * @param userBaseMsg     * @return 返回值JsonResp     */    @RequestMapping(value = "/selectByCondition", method = RequestMethod.POST)    public JsonResp selectUserBaseMsgByCondition(@RequestBody UserBaseMsg userBaseMsg){        log.debug("根据条件查找用户基本信息");        if(userBaseMsg==null)            return JsonResp.toFail("参数不能为空");        List<UserBaseMsg> userBaseMsgList=userBaseMsgService.selectByCondition(userBaseMsg);        return JsonResp.ok(userBaseMsgList);    }    /**     * @param     * @return 返回值JsonResp     * @修改     */    @RequestMapping(value = "/findByPage", method = RequestMethod.GET)    public JsonResp findByPage(Integer pageNo, Integer pageSize,String phone,String status,String realName,String time){        log.debug("分页查询认证信息");        Admin admin=adminService.findLoginUser();        AdminRole adminRole= adminRoleService.selectById(admin.getAdminRoleId());        Map<String,Object> map = new HashMap<>();        map.put("pageNo",(pageNo-1)*pageSize*2);        map.put("pageSize",pageSize*2);        map.put("phone",phone);        map.put("realName",realName);        map.put("status",status);        String time1="",time2="";        if(time!=null && !"".equals(time)){            String[] array = time.split("~");            time1 = array[0];            time2 = array[1];        }        map.put("time1",time1);        map.put("time2",time2);        Integer total=null;List<UserBaseMsg> userBasicMsgs=null;        if(adminRole!=null&&adminRole.getType()==1){//审核员            map.put("adminId",admin.getId());        }        userBasicMsgs = userBaseMsgService.selectByPage(map);        total = userBaseMsgService.selectCount(map);        Map map1=new HashMap();        map1.put("page",new PageDto(pageNo,pageSize,userBasicMsgs,total));        map1.put("roleType",adminRole.getType());        return JsonResp.ok(map1);    }    /**     * @param     * @return 生成excel     */    @RequestMapping(value = "/makeExcle", method = RequestMethod.GET)    public JsonResp makeExcle(HttpServletRequest request, HttpServletResponse response, String phone,String status,String realName,String time) throws IOException {        // TODO Auto-generated method stub        Map<String,Object> map = new HashMap<>();        map.put("phone",phone);        map.put("realName",realName);        map.put("status",status);        String time1="",time2="";        if(time!=null && !"".equals(time)){            String[] array = time.split("~");            time1 = array[0];            time2 = array[1];        }        map.put("time1",time1);        map.put("time2",time2);        List<UserBaseMsg> userBasicMsgs = userBaseMsgService.selectByPage(map);        if (userBasicMsgs.isEmpty()) {            return JsonResp.fa("暂无相关数据可供导出");        }        XSSFWorkbook excelbook = new XSSFWorkbook(); //创建workBook        XSSFSheet excelSheet = excelbook.createSheet();//创建sheet表        XSSFRow excelRow = excelSheet.createRow(0);//创建第一行        XSSFCellStyle headerStyle = excelbook.createCellStyle();//设置 居中        headerStyle.setAlignment(XSSFCellStyle.ALIGN_CENTER);        //接下来是创建 列标题 ,cell的起始值是 0,可创建n个列标题        String[] Title = { "姓名", "手机账号", "婚姻状况", "学历", "地址", "联系人一", "联系方式", "关系", "联系人二", "联系方式", "关系","状态","认证时间","操作人员" };        for(int a=0;a<Title.length;a++){            XSSFCell cell = excelRow.createCell(a);            cell.setCellStyle(headerStyle);//居中            cell.setCellValue(Title[a]);        }        //接下来遍历List,并写入EXCEL中        for(int i = 0; i < userBasicMsgs.size(); i++) {            //创建行,行号应从1开始,因为表头行(列标题)占据了第0行            excelRow = excelSheet.createRow(i + 1);            //将该行每一列的数据写入,可写n列            UserBaseMsg userBaseMsg = userBasicMsgs.get(i); // List 的起始值是0            excelRow.createCell(0).setCellValue(userBaseMsg.getUser().getRealName());            excelRow.createCell(1).setCellValue(userBaseMsg.getUser().getPhone());            excelRow.createCell(2).setCellValue(userBaseMsg.getMaritalStatus());            excelRow.createCell(3).setCellValue(userBaseMsg.getEducation());            excelRow.createCell(4).setCellValue(userBaseMsg.getAddress().getProvince()+userBaseMsg.getAddress().getCity()+userBaseMsg.getAddress().getAddressDetail());            excelRow.createCell(5).setCellValue(userBaseMsg.getUserContacts().get(0).getName());            excelRow.createCell(6).setCellValue(userBaseMsg.getUserContacts().get(0).getPhone());            excelRow.createCell(7).setCellValue(userBaseMsg.getUserContacts().get(0).getRelation());            excelRow.createCell(8).setCellValue(userBaseMsg.getUserContacts().get(1).getName());            excelRow.createCell(9).setCellValue(userBaseMsg.getUserContacts().get(1).getPhone());            excelRow.createCell(10).setCellValue(userBaseMsg.getUserContacts().get(1).getRelation());            excelRow.createCell(11).setCellValue(userBaseMsg.getStatus());            excelRow.createCell(12).setCellValue(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(userBaseMsg.getGmtDatetime()));            String  auditorName="未知";            if(userBaseMsg.getAuditor()!=null){                auditorName=userBaseMsg.getAuditor().getName();            }            excelRow.createCell(13).setCellValue(auditorName);        }        String fileanme = "基本信息认证";        String date = new SimpleDateFormat("yyyyMMdd").format(new Date());        FileType fileType = FileType.XLS;        String path = fileType.getAbsolutePath();        String filePath = path + File.separator+fileanme+date+".xls";        log.info("filePath"+filePath);        EvaluationController.writeExcel(request,response, excelbook, filePath, "文件名");//具体导出的方法        String url = request.getRequestURL().toString().split("api")[0]+"/pic/xls/"+File.separator+fileanme+date+".xls";        return JsonResp.ok(url);    }//    @RequestMapping("/jctb/{id}")//    public R jctb(@PathVariable("id") Long id){//        //测试淘宝////        authenticationService.YysAuth(id, SysReader.getString("moheCode"),SysReader.getString("moheKey"));//        //测试实名认证//        Map<String, SysDeciding> stringSysDecidingMap = sysDecidingService.decidingType(3);//////测试实名认证//        return authenticationService.sfzSmrzAge(String.valueOf(id),stringSysDecidingMap.get("sfz_smrzAge"),null);//    }}