package com.rongke.web.ans.usr;import com.google.common.collect.Lists;import com.rongke.model.ans.TblAccountEntity;import com.rongke.rediscluster.CacheUtil;import com.rongke.service.ans.sys.TblAccountService;import com.rongke.service.ans.sys.WxFriendsService;import com.rongke.service.ans.usr.WeChatUserService;import com.rongke.utils.ConstantFactory;import com.rongke.utils.MobileUtil;import com.rongke.utils.RandomUtils;import com.rongke.utils.ans.MapUtils;import com.rongke.utils.ans.R;import com.rongke.web.ans.utils.YiBaoUtils;import com.rongke.web.sms.SmsUtils;import com.rongke.web.yibao.YeepayService;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import java.util.HashMap;import java.util.List;import java.util.Map;@RestController@RequestMapping("api/usr")public class WechatUsrController {    @Autowired    private WeChatUserService weChatUserService;//用户操作    @Autowired    private TblAccountService tblAccountService;    @Autowired    private CacheUtil redisClusterCache;//redis    @Autowired    private SmsUtils smsUtil;//短信    @Autowired    private WxFriendsService wxFriendsService;//好友    /**     * 获得个人信用     */    @RequestMapping("/personalCredit")    public R personalCredit(String accountID){        TblAccountEntity tblAccountEntity = weChatUserService.selectWechatUser();        if(StringUtils.isBlank(accountID)){            accountID=tblAccountEntity.getAccountId().toString();        }        return weChatUserService.WeChatCredit(accountID);    }    /**     * 设置原始支付密码     * @param payPassword     * @return     */    @RequestMapping("/SetpayPassword")    public R bankCardAuto(@RequestParam("payPassword") String payPassword){        return weChatUserService.SetPayPass(payPassword);    }    /**     * 修改支付密码     */    @RequestMapping("/modifyPayPassword")    public R modifyPayPassword(@RequestParam("JpayPassword") String JpayPassword,@RequestParam("XpayPassword") String XpayPassword){        return weChatUserService.ResetPayPass(JpayPassword,XpayPassword);    }    /**     * 判断支付密码是否存在     */    @RequestMapping("/isWxUsrPassword")    public R isWxUsrPassword(){        TblAccountEntity tblAccountEntity = weChatUserService.selectWechatUser();        if(StringUtils.isBlank(tblAccountEntity.getAccountPaypass())){            return R.error("失败");        }        return R.ok("成功");    }    /**     * 支付密码确认     */    @RequestMapping("/WxUsrPayPassword")    public R WxUsrPayPassword(@RequestParam("password") String password){        TblAccountEntity tblAccountEntity = weChatUserService.selectWechatUser();        if(!password.equals(tblAccountEntity.getAccountPaypass())){            return R.error("密码不正确");        }        return R.ok();    }    /**     * 修改手机号码     */    @RequestMapping("/Resetmobile")    public R mobile(@RequestParam("phone") String phone,@RequestParam("code") String code,@RequestParam("type") String type){        boolean phoneBase = MobileUtil.isPhoneBase(phone);        if(!phoneBase){            return R.error("手机格式不正确");        }        TblAccountEntity tblAccountEntity = weChatUserService.selectWechatUser();        Boolean aoolean = false;        if(type.equals("1")){            aoolean = smsUtil.checkCode("sj" + tblAccountEntity.getAccountMobile(), code);        }else{            aoolean = smsUtil.checkCode("pay" + tblAccountEntity.getAccountMobile(), code);        }        if(aoolean==false){            return R.error("验证码错误");        }        if(!tblAccountEntity.getAccountMobile().equals(phone)){            tblAccountEntity.setAccountMobile(phone);            tblAccountService.updateById(tblAccountEntity);        }        return R.ok("修改成功");    }    /**     * 获得 验证码     */    @RequestMapping("/Code")    public R sendsms(@RequestParam String type){//        TblAccountEntity tblAccountEntity = weChatUserService.selectWechatUser();        String code=null; //验证码        code = RandomUtils.randomString(6);        try {            Boolean aBoolean = smsUtil.sendsmsSalt(tblAccountEntity.getAccountMobile(), code, ConstantFactory.getConfig().getSmsNoticeId(), ConstantFactory.getConfig().getSmsSignId());            if(aBoolean==true){                if(type.equals("1")){//手机号更改                    redisClusterCache.set("sj"+tblAccountEntity.getAccountMobile(),code,300);                }else{                    //redisClusterCache.set("pay"+tblAccountEntity.getAccountMobile(),code,300);//暂时不存储                }            }else{                return R.error("验证码发送失败");            }        } catch (Exception e) {            e.printStackTrace();        }        if(type.equals("2")){            return R.ok().put("data",code);        }        return R.ok();    }    /**     * 返回isType  详情页统计 1 借入 2 借出 3 逾期 总次数以及总金额     */    @RequestMapping("/getDebitDetilsList")    public R getDebitDetilsList(String accountID){        TblAccountEntity tblAccountEntity = weChatUserService.selectWechatUser();        List<Map<String,Object>> result = Lists.newArrayList();        if(StringUtils.isBlank(accountID)){            accountID = tblAccountEntity.getAccountId().toString();        }        R r1 = weChatUserService.debitDetailsList(accountID, "1");//借入        R r2 = weChatUserService.debitDetailsList(accountID, "2");//借出        R r3 = weChatUserService.debitDetailsList(accountID, "3");//逾期借入        result.add(new MapUtils().put("title","借入总额").put("count",r1.get("count")).put("money",r1.get("money")));        result.add(new MapUtils().put("title","借出总额").put("count",r2.get("count")).put("money",r2.get("money")));        result.add(new MapUtils().put("title","逾期总额").put("count",r3.get("count")).put("money",r3.get("money")));        return R.ok().put("data",result);    }    /**     * 查询 他人信用 验证nameANDIdCard     */    @RequestMapping("/nameANDIdCard")    public R nameANDIdCard(@RequestParam String name,@RequestParam String IdCard){        TblAccountEntity tblAccountEntity = weChatUserService.selectWechatUser();        R r = weChatUserService.nameANDIdCard(name, IdCard);        if((Integer)r.get("code")!=0){            return r;        }        List<TblAccountEntity> targer  = (List<TblAccountEntity>) r.get("data");        List<Map<String,Object>> result = Lists.newArrayList();        for(TblAccountEntity t:targer){            result.add(new MapUtils().put("id",t.getAccountId()).put("name",t.getAccountName()).put("headUrl",t.getAccountHeadurl()));        }        return R.ok().put("data",result);    }    @RequestMapping("/chaxun")    public R chaxun() {        String batchNo = "201809061429431";        R phone = YiBaoUtils.bankCardFind("15858188470", "PHONE");        String url = "/rest/v1.0/balance/transfer_query";        String url1="/rest/v1.0/balance/query_customer_amount";        Map<String, String> map = new HashMap<>();//        map.put("batchNo",batchNo);        Map<String, String> stringStringMap = YeepayService.yeepayYOP(map, url1);        System.err.println(stringStringMap.toString());        return phone;    }}