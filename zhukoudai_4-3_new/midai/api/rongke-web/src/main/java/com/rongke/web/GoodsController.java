package com.rongke.web;import com.baomidou.mybatisplus.plugins.Page;import com.rongke.commons.JsonResp;import com.rongke.model.Classify;import com.rongke.model.Goods;import com.rongke.rediscluster.CacheUtil;import com.rongke.service.ClassifyService;import com.rongke.service.GoodsService;import com.rongke.utils.StringUtil;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.*;/** * @GoodsController * @商品表 Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/goods")@Transactional@CrossOriginpublic class GoodsController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private GoodsService goodsService;    @Autowired    private ClassifyService classifyService;    @Autowired    private CacheUtil redisClusterCache;//    @Autowired//    private CacheUtil cacheUtil;//    @Autowired//    private RedisTemplate<String, Classify> redisTemplate;    /**     * @添加商品表      * @param goods     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addGoods(@RequestBody Goods goods){        log.debug("添加商品表 ");        if(goods.getId()!=null && !"".equals(String.valueOf(goods.getId()))){            Goods goodsOld=goodsService.selectById(goods.getId());            if(StringUtil.isNotEmpty(goods.getName())){                goodsOld.setName(goods.getName());            }            if(StringUtil.isNotEmpty(goods.getPicUrl())){                goodsOld.setPicUrl(goods.getPicUrl());            }            if(StringUtil.isNotEmpty(goods.getInitialPrice())){                goodsOld.setInitialPrice(goods.getInitialPrice());            }            if(StringUtil.isNotEmpty(String.valueOf(goods.getClassifyId()))){                goodsOld.setClassifyId(goods.getClassifyId());            }            goodsOld.setUptDatetime(new Date());            goodsService.updateById(goodsOld);        }else {            goods.setGmtDatetime(new Date());            goodsService.insert(goods);        }        if(redisClusterCache.hasKey(goods.getName())){            redisClusterCache.delkey(goods.getName());        }        return JsonResp.ok();    }    /**     * @修改商品表      * @param goods     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateGoods(@RequestBody Goods goods){        log.debug("修改商品表 ");        goods.setUptDatetime(new Date());        goodsService.updateById(goods);        return JsonResp.ok(goods);    }    /**     * @获取所有商品分类和每种分类下的商品列表     * @return 返回值JsonResp     */    @RequestMapping(value="/selectClassifyAndGoodsList", method = RequestMethod.GET)    public JsonResp selectClassifyAndGoodsList(){        log.debug("获取所有商品分类和每种分类下的商品列表 ");        List<Classify> classifies=null;        //查看缓存中有没有数据 有直接从缓存中获取//        if(redisTemplate.hasKey("classify")){//            //从缓存中取值(全部取出)//            classifies=(List<Classify>)redisTemplate.opsForList().range("classify", 0l, -1l);//        }else {            classifies=classifyService.selectList(null);            List<Goods> goodsList=goodsService.selectList(null);            for(int i=0,y=classifies.size();i<y;i++){                Classify classify=classifies.get(i);                List<Goods> goodses=new ArrayList<>();                for (int m=0,n=goodsList.size();m<n;m++){                    Goods goods=goodsList.get(m);                    if(goods.getClassifyId().equals(classify.getId())){                        goodses.add(goods);                    }                }                classify.setGoodsList(goodses);//            }            //放入缓存//            redisTemplate.opsForList().rightPushAll("classify",classifies);//            long mn= redisTemplate.opsForList().size("classify");        }        return JsonResp.ok(classifies);    }    /**     * @分页查询手机列表（app）     * @param page     * @param classifyId 商品类目     * @return 返回值JsonResp     */    @RequestMapping(value="/selectPage", method = RequestMethod.GET)    public JsonResp selectPage(Page page,String classifyId){        log.debug("分页查询手机列表 ");        //查看缓存中有没有数据 首页商品直接从缓存中获取//        Admin admin=adminService.findLoginUser();//        if(StringUtil.isEmpty(classifyId)){//            if(cacheUtil.hasKey("goodsCahce")){//                Page pageCace=(Page)cacheUtil.hget("goodsCahce","1");//                return JsonResp.ok(pageCace);//            }//        }            Map map=new HashMap();            map.put("startIndex",(page.getCurrent()-1)*page.getSize());            map.put("size",page.getSize());            if (StringUtils.isNotEmpty(classifyId)) {                map.put("classifyId",classifyId);            }            List<Goods> goodsList=goodsService.selectGoodsPage(map);            Integer total=goodsService.selectGoodsPageSize(map);            page.setRecords(goodsList);            page.setTotal(total);            if(StringUtil.isEmpty(classifyId)){//如果是首页商品 放入缓存//             cacheUtil.hset("goodsCahce","1",page, 2*24*60*60);//指定缓存有效时间  2天            }        return JsonResp.ok(page);    }    /**     * @分页查询手机列表(后台)     * @param page     * @param classifyId 商品类目     * @return 返回值JsonResp     */    @RequestMapping(value="/selectAdminPage", method = RequestMethod.GET)    public JsonResp selectAdminPage(Page page,String classifyId){        log.debug("分页查询手机列表后台 ");        Map map=new HashMap();        map.put("startIndex",(page.getCurrent()-1)*page.getSize());        map.put("size",page.getSize());        if (StringUtils.isNotEmpty(classifyId)) {            map.put("classifyId",classifyId);        }        List<Goods> goodsList=goodsService.selectGoodsPage(map);        Integer total=goodsService.selectGoodsPageSize(map);        page.setRecords(goodsList);        page.setTotal(total);        return JsonResp.ok(page);    }    /**     * @根据id删除商品     * @return 返回值JsonResp     */    @RequestMapping(value="/deleteById", method = RequestMethod.GET)    public JsonResp deleteById(Long id){        log.debug("根据id删除商品");        goodsService.deleteById(id);        return JsonResp.ok();    }    /**     * @根据id获取单个商品     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectOne(Long id){        log.debug("根据id获取单个商品");        Goods goods=goodsService.selectById(id);        Classify classify=classifyService.selectById(goods.getClassifyId());        goods.setClassify(classify);        return JsonResp.ok(goods);    }}