package com.rongke.web.yibao;import com.alibaba.fastjson.JSONObject;import com.cfca.util.pki.PKIException;import com.cfca.util.pki.api.CertUtil;import com.cfca.util.pki.api.KeyUtil;import com.cfca.util.pki.api.SignatureUtil;import com.cfca.util.pki.cert.X509Cert;import com.cfca.util.pki.cipher.JCrypto;import com.cfca.util.pki.cipher.JKey;import com.cfca.util.pki.cipher.Session;import org.dom4j.Document;import org.dom4j.DocumentException;import org.dom4j.DocumentHelper;import org.dom4j.Element;import javax.servlet.http.HttpServletRequest;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.URL;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;public class TtransferParamResolver {    //商户密钥    public static final String hmacKey= "QIjJr1110K37A2EfU2965rG5Dvs19j428XG7if18NUGo96x91P278B819RA0";    public static final String merId="10022888571";//商户编号10022144438     10022888571    public static JSONObject transferSingle(String xml, String digest, String backDigest, String textHost) throws PKIException {        JSONObject json=new JSONObject();        Map result = new LinkedHashMap();        Map xmlMap = new LinkedHashMap();        Map xmlBackMap = new LinkedHashMap();        String[] digestValues = digest.split(",");        String[] backDigestValues = backDigest.split(",");        //第一步:将请求的数据和商户自己的密钥拼成一个字符串,        Document document = null;        try {            document= DocumentHelper.parseText(xml);        } catch (DocumentException e) {        }        Element rootEle = document.getRootElement();        String cmdValue = rootEle.elementText("cmd");        List list = rootEle.elements();        for(int i=0;i<list.size();i++){            Element ele = (Element)list.get(i);            String eleName = ele.getName();            if(!eleName.equals("list")){                xmlMap.put(eleName,ele.getText().trim());            }else{                continue;            }        }        String hmacStr="";        for(int i=0;i<digestValues.length;i++){            if(digestValues[i].equals("hmacKey")){                hmacStr = hmacStr+hmacKey;                continue;            }            hmacStr = hmacStr + xmlMap.get(digestValues[i]);        }        //下面用数字证书进行签名        Session tempsession = null;        String ALGORITHM = SignatureUtil.SHA1_RSA;        JCrypto jcrypto =null;        if(tempsession==null){            try {                //初始化加密库，获得会话session                //多线程的应用可以共享一个session,不需要重复,只需初始化一次                //初始化加密库并获得session。                //系统退出后要jcrypto.finalize()，释放加密库                jcrypto = JCrypto.getInstance();                jcrypto.initialize(JCrypto.JSOFT_LIB, null);                tempsession = jcrypto.openSession(JCrypto.JSOFT_LIB);            } catch (Exception ex) {                System.out.println(ex.toString());            }        }        String sysPath=null;        try {            URL url=TtransferParamResolver.class.getClassLoader().getResources("10022144438.pfx").nextElement();            sysPath=url.getPath();        } catch (IOException e) {            e.printStackTrace();        }        System.err.println(sysPath);        System.err.println(sysPath);        JKey jkey = KeyUtil.getPriKey(sysPath, "13136315951");        X509Cert cert = CertUtil.getCert(sysPath, "13136315951");        System.out.println("cert"+cert.getSubject());        X509Cert[] cs=new X509Cert[1];        cs[0]=cert;        String signMessage ="";        SignatureUtil signUtil =null;        try{            // 第二步:对请求的串进行MD5对数据进行签名            String yphs = hmacSign(hmacStr);            signUtil = new SignatureUtil();            byte[] b64SignData;            // 第三步:对MD5签名之后数据调用CFCA提供的api方法用商户自己的数字证书进行签名            b64SignData = signUtil.p7SignMessage(true, yphs.getBytes(),ALGORITHM, jkey, cs, tempsession);            if(jcrypto!=null){                jcrypto.finalize (JCrypto.JSOFT_LIB,null);            }            signMessage = new String(b64SignData, "UTF-8");        }catch(Exception e){        }//        System.out.println("经过md5和数字证书签名之后的数据为---||"+signMessage+"||");        Element r=rootEle.element("hmac");        r.setText(signMessage);        result.put("xml",xml);        document.setXMLEncoding("GBK");        //第四步:发送https请求        String responseMsg = CallbackUtils.httpRequest(textHost, document.asXML(), "POST", "gbk","text/xml ;charset=gbk", false);//        System.out.println("服务器响应xml报文:" + responseMsg);        try {            document = DocumentHelper.parseText(responseMsg);        } catch (DocumentException e) {        }        rootEle = document.getRootElement();        cmdValue = rootEle.elementText("hmac");        //第五步:对服务器响应报文进行验证签名        boolean sigerCertFlag = false;        if(cmdValue!=null){            sigerCertFlag = signUtil.p7VerifySignMessage(cmdValue.getBytes(), tempsession);            String backmd5hmac = xmlBackMap.get("hmac") + "";            if(sigerCertFlag){                System.out.println("证书验签成功");                backmd5hmac = new String(signUtil.getSignedContent());                System.out.println("证书验签获得的MD5签名数据为----" + backmd5hmac);                System.out.println("证书验签获得的证书dn为----" + new String(signUtil.getSigerCert()[0].getSubject()));                //第六步.将验签出来的结果数据与自己针对响应数据做MD5签名之后的数据进行比较是否相等                Document backDocument = null;                try {                    backDocument = DocumentHelper.parseText(responseMsg);                } catch (DocumentException e) {                    System.out.println(e);                }                Element backRootEle = backDocument.getRootElement();                List backlist = backRootEle.elements();                for(int i = 0; i < backlist.size(); i++){                    Element ele = (Element)backlist.get(i);                    String eleName = ele.getName();                    if(!eleName.equals("list")){                        xmlBackMap.put(eleName, ele.getText().trim());                    }else{                        continue;                    }                }                String backHmacStr="";                for(int i = 0; i < backDigestValues.length;i++){                    if(backDigestValues[i].equals("hmacKey")){                        backHmacStr = backHmacStr + hmacKey;                        continue;                    }                    String tempStr = (String)xmlBackMap.get(backDigestValues[i]);                    backHmacStr = backHmacStr + ((tempStr == null) ? "" : tempStr);                }                String newmd5hmac = hmacSign(backHmacStr);                System.out.println("提交返回源数据为---||" + backHmacStr+"||");                System.out.println("经过md5签名后的验证返回hmac为---||" + newmd5hmac+"||");                System.out.println("提交返回的hmac为---||" + backmd5hmac+"||");                if(newmd5hmac.equals(backmd5hmac)){                    System.out.println("md5验签成功");                    //第七步:判断该证书DN是否为易宝                    if(signUtil.getSigerCert()[0].getSubject().toUpperCase().indexOf("OU=YEEPAY,") > 0){                        System.out.println("证书DN是易宝的");                        System.out.println("返回数据"+xmlBackMap);                        //第八步:.......加上业务逻辑                        //判断打款是否有出现问题,打款正常error_Msg为空，异常会返回异常信息                         if(xmlBackMap.containsKey("error_Msg") && !"".equals(String.valueOf(xmlBackMap.get("error_Msg")))){                             json.put("code","500");                             json.put("message",xmlBackMap.get("error_Msg"));                         }else {                             json.put("rlCode",xmlBackMap.get("rl_Code"));                             json.put("balanceAmount",xmlBackMap.get("balance_Amount"));                             json.put("validAmount",xmlBackMap.get("valid_Amount"));                             json.put("code","200");                         }                        return json;                    }else{                        json.put("code","500");                        json.put("message","证书DN不是易宝的");                        return json;//                        System.out.println("证书DN不是易宝的");                    }                }else{                    json.put("code","500");                    json.put("message","md5验签失败");                    return json;//                    System.out.println("md5验签失败");                }            }else{                json.put("code","500");                json.put("message","证书验签失败....");                return json;//                System.out.println("证书验签失败....");            }        }        json.put("code","500");        json.put("message","参数有误");        return json;    }/** *  打款主动通知 */public static JSONObject transferNotify(HttpServletRequest request) throws IOException, PKIException {    request.setCharacterEncoding("gbk");    JSONObject json=new JSONObject();    Map xmlBackMap = new LinkedHashMap();    //接受主动通知信息    StringBuffer sb = new StringBuffer(2000);    InputStream is = request.getInputStream();    BufferedReader br = new BufferedReader(new InputStreamReader(is,"UTF-8"));    //读取HTTP请求内容    String buffer = null;    while ((buffer = br.readLine()) != null) {        //在页面中显示读取到的请求参数        sb.append(buffer);    }    String responseMsg = sb.toString();    System.out.println("服务器响应xml报文:" + responseMsg);    Document document = null;    try {        document = DocumentHelper.parseText(responseMsg);    } catch (DocumentException e) {    }    Element rootEle = document.getRootElement();    String cmdValue = rootEle.elementText("hmac");    //对服务器响应报文进行验证签名    com.cfca.util.pki.cipher.Session tempsession = null;    String ALGORITHM = SignatureUtil.SHA1_RSA;    JCrypto jcrypto =null;    if(tempsession==null){        try {            //初始化加密库，获得会话session            //多线程的应用可以共享一个session,不需要重复,只需初始化一次            //初始化加密库并获得session。            //系统退出后要jcrypto.finalize()，释放加密库            jcrypto = JCrypto.getInstance();            jcrypto.initialize(JCrypto.JSOFT_LIB, null);            tempsession = jcrypto.openSession(JCrypto.JSOFT_LIB);        } catch (Exception ex) {            System.out.println(ex.toString());        }    }    String sysPath=null;    try {        URL url=TtransferParamResolver.class.getClassLoader().getResources("10022144438.pfx").nextElement();        sysPath=url.getPath();    } catch (IOException e) {        e.printStackTrace();    }    JKey jkey = null;    try {        jkey = KeyUtil.getPriKey(sysPath, "13136315951");    } catch (PKIException e) {        e.printStackTrace();    }    X509Cert cert = CertUtil.getCert(sysPath, "13136315951");    X509Cert[] cs=new X509Cert[1];    cs[0]=cert;    boolean sigerCertFlag = false;    SignatureUtil signUtil = new SignatureUtil();;    if(cmdValue!=null){        try {            sigerCertFlag = signUtil.p7VerifySignMessage(cmdValue.getBytes(), tempsession);        } catch (PKIException e) {            e.printStackTrace();        }        String backmd5hmac = xmlBackMap.get("hmac") + "";        if(sigerCertFlag){            System.out.println("证书验签成功");            try {                backmd5hmac = new String(signUtil.getSignedContent());            } catch (PKIException e) {                e.printStackTrace();            }            System.out.println("证书验签获得的MD5签名数据为----" + backmd5hmac);            try {                System.out.println("证书验签获得的证书dn为----" + new String(signUtil.getSigerCert()[0].getSubject()));            } catch (PKIException e) {                e.printStackTrace();            }            //将验签出来的结果数据与自己针对响应数据做MD5签名之后的数据进行比较是否相等            Document backDocument = null;            try {                backDocument = DocumentHelper.parseText(responseMsg);            } catch (DocumentException e) {                System.out.println(e);            }            Element backRootEle = backDocument.getRootElement();            List backlist = backRootEle.elements();            for(int i = 0; i < backlist.size(); i++){                Element ele = (Element)backlist.get(i);                String eleName = ele.getName();                if(!eleName.equals("list")){                    xmlBackMap.put(eleName, ele.getText().trim());                }else{                    continue;                }            }            String backHmacStr="";            String[] backDigestValues = "cmd,mer_Id,batch_No,order_Id,status,message,hmacKey".split(",");            for(int i = 0; i < backDigestValues.length;i++){                if(backDigestValues[i].equals("hmacKey")){                    backHmacStr = backHmacStr + hmacKey;                    continue;                }                String tempStr = (String)xmlBackMap.get(backDigestValues[i]);                backHmacStr = backHmacStr + ((tempStr == null) ? "" : tempStr);            }            String newmd5hmac = hmacSign(backHmacStr);            System.out.println("提交返回源数据为---||" + backHmacStr+"||");            System.out.println("经过md5签名后的验证返回hmac为---||" + newmd5hmac+"||");            System.out.println("提交返回的hmac为---||" + backmd5hmac+"||");            if(newmd5hmac.equals(backmd5hmac)){                System.out.println("md5验签成功");                //判断该证书DN是否为易宝                try {                    if(signUtil.getSigerCert()[0].getSubject().toUpperCase().indexOf("OU=YEEPAY,") > 0){                        System.out.println("证书DN是易宝的");                        //回写易宝                        StringBuffer str = new StringBuffer();                        str.append("<?xml version=\"1.0\" encoding=\"GBK\"?>");                        str.append("<data>");                        str.append("<cmd>TransferNotify</cmd>");                        str.append("<version>1.1<ersion>");                        str.append("<mer_Id>" + xmlBackMap.get("mer_Id") + "</mer_Id>");                        str.append("<batch_No>" + xmlBackMap.get("batch_No") + "</batch_No>");                        str.append("<order_Id>" + xmlBackMap.get("order_Id") + "</order_Id>");                        str.append("<ret_Code>S</ret_Code>");//这里根据情况传 S 或 F 如果是 S 则不会重发   如果是 F 会重发                        cmdValue = "TransferNotify" + xmlBackMap.get("mer_Id") + xmlBackMap.get("batch_No") + xmlBackMap.get("order_Id") + "S" + hmacKey;                        String hmac =hmacSign(cmdValue);                        str.append("<hmac>" + new String(signUtil.p7SignMessage(true, hmac.getBytes(),ALGORITHM, jkey, cs, tempsession)) + "</hmac>");                        str.append("</data>");                        json.put("str",str.toString());                        json.put("orderId",xmlBackMap.get("order_Id"));                        json.put("status",xmlBackMap.get("status"));                        json.put("message",xmlBackMap.get("message"));                        return json;//                        System.out.println("回写易宝数据："+str);                    }else{                        json.put("code","500");                        json.put("message","证书DN不是易宝的");                        return json;//                        System.out.println("证书DN不是易宝的");                    }                } catch (PKIException e) {                    e.printStackTrace();                }            }else{                json.put("code","500");                json.put("message","md5验签失败");                return json;//                System.out.println("md5验签失败");            }        }else{            json.put("code","500");            json.put("message","证书验签失败....");            return json;//            System.out.println("证书验签失败....");        }    }    return json;}    /**     * 直接用MD5签名对数据签名，不需要密钥     * @param aValue     * @return     */    public static String hmacSign(String aValue){        try {            byte[] input = aValue.getBytes();            MessageDigest md = MessageDigest.getInstance("MD5");            return ConvertUtils.toHex(md.digest(input));        } catch (NoSuchAlgorithmException e) {            e.printStackTrace();            return null;        }    }}