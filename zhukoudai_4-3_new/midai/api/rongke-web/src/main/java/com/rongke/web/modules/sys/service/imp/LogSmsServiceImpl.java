package com.rongke.web.modules.sys.service.imp;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.service.impl.ServiceImpl;import com.rongke.enums.SMSEnums;import com.rongke.mapper.LogSmsMapper;import com.rongke.model.LogSms;import com.rongke.model.SysOnline;import com.rongke.utils.ans.R;import com.rongke.web.modules.sys.service.LogSmsService;import com.rongke.web.modules.sys.service.SysOnlineService;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.Arrays;import java.util.Date;/** * 短信验证 */@Servicepublic class LogSmsServiceImpl extends ServiceImpl<LogSmsMapper, LogSms> implements LogSmsService {    @Autowired    private SysOnlineService sysOnlineService;    @Override    public R adminUPSms(String code) {        if(StringUtils.isBlank(code)){            return R.error("请输入验证码");        }        SysOnline online = sysOnlineService.onlineG();        if(online==null){            return R.error("请登录");        }        return ISCODE(ISGET(SMSEnums.ADMIN_UP_SMS.getType(),online.getId()),code,false);    }    /**     * 验证：修改打款验证码     */    public R ISpayUPSms(String code) {        SysOnline online = sysOnlineService.onlineG();        if(online==null){            return R.error("请登录");        }        return ISCODE(ISGET(SMSEnums.PAY_UP_SMS.getType(),online.getId()),code,true);    }    /**     * 获得：修改打款验证码添加     */    public R ADDpayUPSms(String code){        SysOnline online = sysOnlineService.onlineG();        if(online==null){            return R.error("请登录");        }        LogSms logSms = new LogSms();        logSms.setCode(code);        logSms.setIsuse(0);        logSms.setType(String.valueOf(SMSEnums.PAY_UP_SMS.getType()));        logSms.setTarget(String.valueOf(online.getId()));        logSms.setCreateTime(new Date());        logSms.setResult("未使用");        logSms.setExpriedTime(new Date(logSms.getCreateTime().getTime()+180 * 1000));        this.insert(logSms);        return R.ok();    }    /**     * 验证:打款验证     */    public R ISpaySmsCode(String code) {        return ISCODE(String.valueOf(SMSEnums.PAY_SMS.getType()), code, true);    }    /**     * 获得:打款验证码     */    public R ADDpaySmsCode(String code) {        return  ADDCODE(code, String.valueOf(SMSEnums.PAY_SMS.getType()));    }    /**     *  可多次使用传递false     */    public R ISCODE(LogSms sms, String code, Boolean exprite){        if(sms==null){            return R.error("验证码错误，请重新获取");        }        if(sms.getExpriedTime().getTime()<System.currentTimeMillis()){            sms.setIsuse(1);            sms.setResult("过期");            this.updateById(sms);            return R.error("验证码已过期");        }        if(!sms.getCode().equals(code)){            sms.setIsuse(1);            sms.setResult("验证错误");            this.updateById(sms);            return R.error("验证码错误.请重新获取");        }        if(exprite){            if(sms.getIsuse()==1){                return R.error("验证码已使用，请重新获取");            }            sms.setIsuse(1);            sms.setResult("已使用");            this.updateById(sms);        }        return R.ok();    }    public R ISCODE(String type, String code, Boolean exprite){        SysOnline online = sysOnlineService.onlineG();        if(online==null){            return R.error("请登录");        }        LogSms sms = this.selectOne(new EntityWrapper<LogSms>()                .eq("type", type)                .eq("target", online.getId())                .orderDesc(Arrays.asList("create_time"))        );        if(sms==null){            return R.error("验证码错误，请重新获取");        }        if(sms.getExpriedTime().getTime()<System.currentTimeMillis()){            sms.setIsuse(1);            sms.setResult("过期");            this.updateById(sms);            return R.error("验证码已过期");        }        if(!sms.getCode().equals(code)){            sms.setIsuse(1);            sms.setResult("验证错误");            this.updateById(sms);            return R.error("验证码错误.请重新获取");        }        if(exprite){            if(sms.getIsuse()==1){                return R.error("验证码已使用");            }            sms.setIsuse(1);            sms.setResult("已使用");            this.updateById(sms);        }        return R.ok();    }    public R ADDCODE(String code, String type){        SysOnline online = sysOnlineService.onlineG();        if(online==null){            return R.error("请登录");        }        LogSms logSms = new LogSms();        logSms.setCode(code);        logSms.setIsuse(0);        logSms.setType(type);        logSms.setTarget(String.valueOf(online.getId()));        logSms.setCreateTime(new Date());        logSms.setResult("未使用");        logSms.setExpriedTime(new Date(logSms.getCreateTime().getTime()+180 * 1000));        this.insert(logSms);        return R.ok();    }    public LogSms ISGET(Integer type,Object target){        return  this.selectOne(new EntityWrapper<LogSms>()                .eq("type", type)                .eq("target",target)                .orderDesc(Arrays.asList("create_time"))        );    }}