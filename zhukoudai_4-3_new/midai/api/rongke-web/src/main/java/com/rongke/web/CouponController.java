package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.rongke.commons.FailException;import com.rongke.commons.JsonResp;import com.rongke.commons.PageDto;import com.rongke.model.Coupon;import com.rongke.model.User;import com.rongke.model.UserCoupon;import com.rongke.service.CouponService;import com.rongke.service.UserCouponService;import com.rongke.service.UserService;import com.rongke.utils.DateUtils;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.ArrayList;import java.util.Date;import java.util.List;/** * @CouponController * @优惠卷Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/coupon")@Transactional@CrossOriginpublic class CouponController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private CouponService couponService;    @Autowired    private UserService userService;    @Autowired    private UserCouponService userCouponService;    /**     * @添加优惠卷     * @param coupon     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addCoupon(@RequestBody Coupon coupon){        log.debug("添加优惠卷");        couponService.insertOrUpdate(coupon);        return JsonResp.ok(coupon);    }    /**     * @修改优惠卷     * @param coupon     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateCoupon(@RequestBody Coupon coupon){        log.debug("修改优惠卷");        couponService.updateById(coupon);        return JsonResp.ok(coupon);    }    /**     * @删除优惠卷     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/deleteOne", method = RequestMethod.GET)    public JsonResp deleteOne(Long id){        log.debug("删除优惠卷");        Coupon coupon = couponService.selectById(id);        coupon.setStatus("废弃");        couponService.updateById(coupon);        return JsonResp.ok(coupon);    }    /**     * @根据id查找优惠卷     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectCoupon(Long id){        log.debug("查找优惠卷");        Coupon coupon = couponService.selectById(id);        return JsonResp.ok(coupon);    }    /**     * @根据条件查找优惠卷     * @param coupon     * @return 返回值JsonResp     */    @RequestMapping(value = "/selectByCondition", method = RequestMethod.POST)    public JsonResp selectCouponByCondition(@RequestBody Coupon coupon){        log.debug("根据条件查找优惠卷");        if(coupon==null)            return JsonResp.toFail("参数不能为空");        List<Coupon> couponList=couponService.selectByCondition(coupon);        return JsonResp.ok(couponList);    }    /**     * @param     * @return 返回值JsonResp     */    @RequestMapping(value = "/findByPage", method = RequestMethod.GET)    public JsonResp findByPage(Integer pageNo, Integer pageSize,String realName,Integer status,Integer type){        log.debug("分页查询优惠券列表");        Page page = new Page(pageNo,pageSize);        EntityWrapper<Coupon> entityWrapper = new EntityWrapper<>();        if (!realName.equals("")) {            entityWrapper.like("coupou_name",realName);        }        if (type != -1) {            entityWrapper.eq("type",type);        }        entityWrapper.eq("status","使用");        Page page1 = couponService.selectPage(page,entityWrapper);        PageDto pageDto = new PageDto(pageNo,pageSize,page1.getRecords(),page1.getTotal());        return JsonResp.ok(pageDto);    }    /**     * @param     * @return 返回值JsonResp     */    @RequestMapping(value = "/updateStatus", method = RequestMethod.GET)    public JsonResp updateStatus(Long id,Integer status,Integer type){        log.debug("更改优惠券状态");        if (status == 1) {            EntityWrapper<Coupon> entityWrapper = new EntityWrapper();            entityWrapper.eq("coupon_status",1);            entityWrapper.eq("type",type);            List<Coupon> list = couponService.selectList(entityWrapper);            if (list.size() == 1) {                throw new FailException("只能启用一种");            }        }        Coupon coupon = couponService.selectById(id);        coupon.setStatus("使用");        couponService.updateById(coupon);        return JsonResp.ok();    }    /**     * @param     * @return 返回值JsonResp     */    @RequestMapping(value = "/giveOut", method = RequestMethod.POST)    public JsonResp giveOut(@RequestBody List<Long> userIds,Long id,boolean allGiveOut) throws Exception{        log.debug("发放优惠券");        Coupon c1 = couponService.selectById(id);        List<UserCoupon> list = new ArrayList<>();        //全员发放        if (allGiveOut == true) {            EntityWrapper<User> entityWrapper = new EntityWrapper();            entityWrapper.eq("status","正常");            List<User> list1 = userService.selectList(entityWrapper);            for (User user : list1) {                UserCoupon u = new UserCoupon();                u.setUserId(user.getId());                u.setCouponId(id);                u.setPastDatetime(DateUtils.dayAdd(c1.getValidityDay(),new Date()));                u.setGmtDatetime(new Date());                u.setUptDatetime(new Date());                list.add(u);            }        }else {//部分发放            for (Long userId : userIds) {                UserCoupon u = new UserCoupon();                u.setUserId(userId);                u.setCouponId(id);                u.setGmtDatetime(new Date());                u.setUptDatetime(new Date());                u.setPastDatetime(DateUtils.dayAdd(c1.getValidityDay(),new Date()));                list.add(u);            }        }        userCouponService.insertBatch(list);        return JsonResp.ok();    }}