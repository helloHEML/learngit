package com.rongke.web.modules.sys.service.imp;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.service.impl.ServiceImpl;import com.rongke.mapper.TianzhenMessageMapper;import com.rongke.model.TianZhenMessage;import com.rongke.model.User;import com.rongke.model.UserIdentity;import com.rongke.service.AdminService;import com.rongke.service.UserIdentityService;import com.rongke.service.UserService;import com.rongke.utils.DateUtils;import com.rongke.utils.ans.R;import com.rongke.web.ans.utils.TcreditAPI;import com.rongke.web.modules.sys.service.TianzhenMessagessService;import com.rongke.web.saas.RSTcreditAPI;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.Date;/** * 探针 */@Servicepublic class TianzhenMessagessServiceImpl extends ServiceImpl<TianzhenMessageMapper, TianZhenMessage> implements TianzhenMessagessService {    @Autowired    private AdminService adminService;    @Autowired    private UserService userService;//用户    @Autowired    private UserIdentityService userIdentityService;    @Autowired    private TcreditAPI tcreditAPI;    public R mesInfo(Long userId)  {        adminService.findLoginUser();        TianZhenMessage tz = this.selectOne(new EntityWrapper<TianZhenMessage>().eq("user_id", userId).orderBy("update_time",false));        if(tz==null){            return mesInfoUpdate(userId);        }else{            return R.ok().put("tanzhen",tz.getTianzhenData()).put("updTime", DateUtils.dateSimpleSFM(tz.getUpdateTime()));        }    }    public R mesInfoUpdate(Long userId){        adminService.findLoginUser();        User user = userService.selectById(userId);        if (user == null) {            return R.ok("用户不存在").put("data","");        }        UserIdentity userIdentity = userIdentityService.selectOne(new EntityWrapper<UserIdentity>().eq("user_id", userId));        if (userIdentity == null) {            return R.ok("该用户未进行实名认证").put("data", "");        }        String identityNum = userIdentity.getIdentityNum();        JSONObject jsonObject = null;        try {//            jsonObject = tcreditAPI.verifyIdcard(user.getRealName(),user.getPhone(), identityNum);            jsonObject = RSTcreditAPI.verifyIdcard(user.getRealName(),user.getPhone(), identityNum);        } catch (Exception e) {            e.printStackTrace();        }        TianZhenMessage tz = this.selectOne(new EntityWrapper<TianZhenMessage>().eq("user_id", userId));        if (!"0".equals(jsonObject.getString("status"))) {            return R.error(jsonObject.getString("message"));        }        JSONObject dataJSONObject = jsonObject.getJSONObject("data");        if ("0".equals(dataJSONObject.getJSONObject("result").getString("fee_status"))) {            return R.error("该用户暂无记录");        }        if(tz==null){            tz = new TianZhenMessage();            tz.setCreateTime(new Date());            tz.setUserId(userId);        }        String result = dataJSONObject.getJSONObject("result").toString();        tz.setTianzhenData(result);        tz.setSeqNum(jsonObject.getString("seqNum"));        tz.setGid(jsonObject.getString("gid"));        tz.setUpdateTime(new Date());        this.insertOrUpdate(tz);        return R.ok().put("tanzhen",tz.getTianzhenData()).put("updTime", DateUtils.dateSimpleSFM(tz.getUpdateTime()));    }}