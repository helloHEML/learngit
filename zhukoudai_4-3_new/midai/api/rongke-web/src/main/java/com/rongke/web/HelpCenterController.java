package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.rongke.commons.JsonResp;import com.rongke.model.HelpCenter;import com.rongke.service.HelpCenterService;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.Date;import java.util.List;/** * @HelpCenterController * @Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/helpCenter")@Transactional@CrossOriginpublic class HelpCenterController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private HelpCenterService helpCenterService;    /**     * @添加     * @param helpCenter     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addHelpCenter(@RequestBody HelpCenter helpCenter){        log.debug("添加");        helpCenter.setGmtDatetime(new Date());        helpCenter.setStatus("使用");        helpCenterService.insertOrUpdate(helpCenter);        return JsonResp.ok(helpCenter);    }    /**     * @修改     * @param helpCenter     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateHelpCenter(@RequestBody HelpCenter helpCenter){        log.debug("修改");        helpCenter.setUptDatetime(new Date());        helpCenterService.updateById(helpCenter);        return JsonResp.ok(helpCenter);    }    /**     * @修改     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/deleteOne", method = RequestMethod.GET)    public JsonResp deleteOne(Long id){        log.debug("修改");        HelpCenter helpCenter = helpCenterService.selectById(id);        helpCenter.setStatus("废弃");        helpCenterService.updateById(helpCenter);        return JsonResp.ok(helpCenter);    }    /**     * @根据id查找     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectHelpCenter(Long id){        log.debug("查找");        HelpCenter helpCenter = helpCenterService.selectById(id);        return JsonResp.ok(helpCenter);    }    /**     * @根据条件查找     * @param helpCenter     * @return 返回值JsonResp     */    @RequestMapping(value = "/selectByCondition", method = RequestMethod.POST)    public JsonResp selectHelpCenterByCondition(@RequestBody HelpCenter helpCenter){        log.debug("根据条件查找");        if(helpCenter==null)            return JsonResp.toFail("参数不能为空");        List<HelpCenter> helpCenterList=helpCenterService.selectByCondition(helpCenter);        return JsonResp.ok(helpCenterList);    }    /**     * @param     * @return 返回值JsonResp     * @帮助中心列表     */    @RequestMapping(value = "/selectPage", method = RequestMethod.GET)    public JsonResp selectPage(Page page, Integer type) {        log.debug("帮助中心列表");        EntityWrapper<HelpCenter> helpCenterEntityWrapper=new EntityWrapper<>();        if (type != -1) {            helpCenterEntityWrapper.eq("type",type);        }        helpCenterEntityWrapper.eq("status","使用");        Page helpCenterList = helpCenterService.selectPage(page,helpCenterEntityWrapper);        return JsonResp.ok(helpCenterList);    }    /**     * @按类型找帮助中心     * @param     * @return 返回值JsonResp     */    @RequestMapping(value = "/findListByType", method = RequestMethod.GET)    public JsonResp findListByType(Integer type){        log.debug("按类型找帮助中心");        List<HelpCenter> list = helpCenterService.selectList(null);        return JsonResp.ok(list);    }}