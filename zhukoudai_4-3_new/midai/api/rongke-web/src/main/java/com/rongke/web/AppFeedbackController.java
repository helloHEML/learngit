package com.rongke.web;import com.rongke.commons.JsonResp;import com.rongke.model.AppFeedback;import com.rongke.model.User;import com.rongke.service.AppFeedbackService;import com.rongke.service.UserService;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.R;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.Arrays;import java.util.Date;import java.util.List;import java.util.Map;/** * @AppFeedbackController * @用户反馈Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/appFeedback")@Transactional@CrossOriginpublic class AppFeedbackController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private AppFeedbackService appFeedbackService;    @Autowired    private UserService userService;    /**     * @添加用户反馈     * @param appFeedback     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addAppFeedback(@RequestBody AppFeedback appFeedback){        log.debug("添加用户反馈");        User user=userService.selectCurrentUser();        appFeedback.setUserId(user.getId());        appFeedback.setStatus("0");        appFeedback.setType("0");        appFeedbackService.insert(appFeedback);        return JsonResp.ok(appFeedback);    }    /**     * @修改用户反馈     * @param appFeedback     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateAppFeedback(@RequestBody AppFeedback appFeedback){        log.debug("修改用户反馈");        appFeedbackService.updateById(appFeedback);        return JsonResp.ok(appFeedback);    }    /**     * @根据id查找用户反馈     */    @RequestMapping(value = "/selectOne/{id}", method = RequestMethod.GET)    public R info(@PathVariable("id") String id) {        log.debug("查找用户反馈");        AppFeedback appFeedback = appFeedbackService.selectById(id);        return R.ok().put("data", appFeedback);    }    /**     * 查询用户反馈列表     */    @RequestMapping(value="/selectAllFeedBackList", method = RequestMethod.GET)    public PageUtils userPage(@RequestParam Map<String,Object> params) {        PageUtils pageUtils = appFeedbackService.selectAllFeedBackList(params);        return pageUtils;    }    @RequestMapping(value="/appFeedBackdelete", method = RequestMethod.POST)    public R delete(@RequestBody Long[] ids){        appFeedbackService.deleteBatchIds(Arrays.asList(ids));        return R.ok();    }    /**     * @app查询聊天记录     * @return 返回值JsonResp     */    @RequestMapping(value="/chat", method = RequestMethod.GET)    public JsonResp addAppFeedback(){        log.debug("app查询聊天记录");        User user=userService.selectCurrentUser();        List<AppFeedback> appFeedbacks = appFeedbackService.selectFeedBackByUserId(user.getId());        return JsonResp.ok(appFeedbacks);    }    /**     * @app回复     * @return 返回值JsonResp     */    @RequestMapping(value="/reply", method = RequestMethod.POST)    public R replyAppFeedback(@RequestBody AppFeedback appFeedback){        log.debug("app回复");        AppFeedback replyFeedback = new AppFeedback();        replyFeedback.setContent(appFeedback.getTemp());        replyFeedback.setType("1");        replyFeedback.setUserId(appFeedback.getUserId());        replyFeedback.setGmtDatetime(new Date());        appFeedbackService.insert(replyFeedback);        appFeedback.setStatus("1");        appFeedbackService.updateById(appFeedback);        return R.ok();    }}