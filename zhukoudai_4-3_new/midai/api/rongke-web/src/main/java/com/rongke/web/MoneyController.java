package com.rongke.web;import com.rongke.alipayUtil.alipay.util.AlipayNotify;import com.rongke.enums.DepositStatusEnum;import com.rongke.enums.OrderStatusEnum;import com.rongke.enums.StatusEnum;import com.rongke.model.DataReport;import com.rongke.model.Evaluation;import com.rongke.model.Order;import com.rongke.model.RepayRecord;import com.rongke.service.DataReportService;import com.rongke.service.EvaluationService;import com.rongke.service.OrderService;import com.rongke.service.RepayRecordService;import com.rongke.utils.DateUtils;import com.rongke.wxPayUtil.util.WXpayCore;import com.rongke.wxPayUtil.util.WXpayXmlUtils;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.MediaType;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;import javax.servlet.http.HttpServletRequest;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.UnsupportedEncodingException;import java.math.BigDecimal;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashMap;import java.util.Map;/** * 支付接口类 * Created by bin on 2017/3/23. */@CrossOrigin@RestController@Transactional@RequestMapping(value="/api/money")public class MoneyController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private OrderService orderService;  /*  @Autowired    private EvaluationService evaluationService;*/    @Autowired    private RepayRecordService repayRecordService;    @Autowired    private DataReportService dataReportService;    /**     * 订单支付支付宝     * @param request     * @return     * @throws UnsupportedEncodingException     */    @RequestMapping(value = "/alipay/orderSucc",            method = RequestMethod.POST,            produces = MediaType.APPLICATION_JSON_VALUE + ";charset=UTF-8")    public String orderSucc(HttpServletRequest request) throws UnsupportedEncodingException {        log.debug("订单支付成功回调");        Map<String, String> params = new HashMap<>();        Map<String, String[]> requestParams = request.getParameterMap();        for (String name : requestParams.keySet()) {            String[] values = requestParams.get(name);            String valueStr = "";            for (int i = 0; i < values.length; i++) {                valueStr = (i == values.length - 1) ? valueStr + values[i] : valueStr + values[i] + ",";            }            params.put(name, valueStr);        }        //交易状态        String trade_status = new String(request.getParameter("trade_status").getBytes("ISO-8859-1"),"UTF-8");        //获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以上仅供参考)//        if(AlipayNotify.verify(params)){//验证成功            if(trade_status.equals("TRADE_FINISHED")){                alipyPaySucc(params);            } else if (trade_status.equals("TRADE_SUCCESS")){                alipyPaySucc(params);                return "success";            }        }else{//验证失败            log.debug("+++++++++++++++++++=验证失败");            return "fail";        }        return "fail";    }    protected String alipyPaySucc(Map<String, String> params){       /* String parmsStr=params.get("out_trade_no").split("a")[0];        String money = params.get("total_fee");        Long orderId=null;        orderId=Long.valueOf(parmsStr);        Order order=orderService.selectById(orderId);        if(OrderStatusEnum.AUDITING.getTypeName().equals(order.getStatus()) || OrderStatusEnum.OVER.getTypeName().equals(order.getStatus())){            return "success";        }        Evaluation evaluation=evaluationService.selectById(order.getEvaluationId());        RepayRecord repayRecord=new RepayRecord();        if(-1==order.getDays()){ //-1代表结清订单            evaluation.setStatus(StatusEnum.OVER.getTypeName());//          evaluation.setUptDatetime(new Date());  不能更新时间 打款时间会错            evaluationService.updateById(evaluation);            order.setStatus(StatusEnum.OVER.getTypeName());            order.setMoney(new BigDecimal(money));            order.setUptDatetime(new Date());            evaluationService.updateById(evaluation);        }else if(0==order.getDays()){ //0代表交付欠租金额            order.setDepositStatus(DepositStatusEnum.DEDUCTION.getDesc());//押金状态更改为扣除            Integer days=DateUtils.differentDays(order.getUptDatetime(),new Date());            repayRecord.setDays(days);            order.setUptDatetime(new Date());            //更新订单状态            order.setStatus(OrderStatusEnum.AUDITING.getTypeName());        }else {            //上次付租日期+当前时间+付租天数=付租了多少时间            String rate=new SimpleDateFormat("yyyy-MM-dd").format(order.getUptDatetime());            String time=new SimpleDateFormat("HH:mm:ss").format(new Date());            Date uptTime=null;            try {                uptTime=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rate+" "+time);            } catch (ParseException e) {                log.debug("日期转换出错"+rate+" "+time);                e.printStackTrace();            }            order.setUptDatetime(DateUtils.dayAdd(order.getDays(),uptTime));            //更新订单状态            order.setStatus(OrderStatusEnum.AUDITING.getTypeName());        }        orderService.updateById(order);        //*********************还款记录********************        if(order.getDays()==-1){            repayRecord.setType(3);//赎金            repayRecord.setDays(1);        }else if(order.getDays()==0) {            //计算超时费            BigDecimal overMoney=orderService.selectOverTimeMoney(orderId);            repayRecord.setType(2);//逾期还款            repayRecord.setOvertimeMoney(overMoney);        }else {            repayRecord.setType(1);//正常日租金            repayRecord.setDays(order.getDays());        }        repayRecord.setPayType(2);//支付宝        repayRecord.setMoney(new BigDecimal(money));        repayRecord.setOrderId(order.getId());        Long userId=evaluation.getUserId();        repayRecord.setUserId(userId);        repayRecord.setGmtDatetime(new Date());        repayRecord.setUptDatetime(new Date());        repayRecordService.insert(repayRecord);        //更新相关报表统计        DataReport dataReport = dataReportService.selectById(1);        dataReport.setMoneyIn(dataReport.getMoneyIn().add(new BigDecimal(money)));        dataReportService.updateById(dataReport);*/        return "success";    }    /**     * 订单支付微信     * @param request     * @return     * @throws IOException     */    @RequestMapping(value = "/wxpay/orderSucc",            method = RequestMethod.POST,            produces = MediaType.APPLICATION_JSON_VALUE + ";charset=UTF-8")    public String orderwxSucc(HttpServletRequest request) throws IOException {        System.out.println("微信支付回调");     /*   InputStream inStream = request.getInputStream();        ByteArrayOutputStream outSteam = new ByteArrayOutputStream();        byte[] buffer = new byte[1024];        int len = 0;        while ((len = inStream.read(buffer)) != -1) {            outSteam.write(buffer, 0, len);        }        String resultxml = new String(outSteam.toByteArray(), "utf-8");        Map<String, String> params = WXpayXmlUtils.xml2map(resultxml);        outSteam.close();        inStream.close();        if (!WXpayCore.checkSign(params)) {            // 支付失败            return "fail";        } else {            System.out.println("===============付款成功==============");            String total_fee = params.get("total_fee");            double money = Double.valueOf(total_fee) / 100;            String parmsStr=params.get("out_trade_no").split("a")[0];            Long orderId=null;            orderId=Long.valueOf(parmsStr);            Order order=orderService.selectById(orderId);            if(OrderStatusEnum.AUDITING.getTypeName().equals(order.getStatus())){                return "success";            }            //还款记录            RepayRecord repayRecord=new RepayRecord();            Evaluation evaluation=evaluationService.selectById(order.getEvaluationId());            if(-1==order.getDays()){ //-1代表结清订单                evaluation.setStatus(StatusEnum.OVER.getTypeName());//              evaluation.setUptDatetime(new Date());  不能更新时间 打款时间会错                evaluationService.updateById(evaluation);                order.setStatus(StatusEnum.OVER.getTypeName());                order.setMoney(new BigDecimal(money));                order.setUptDatetime(new Date());                evaluationService.updateById(evaluation);            }else if(0==order.getDays()){ //0代表交付欠租金额                order.setDepositStatus(DepositStatusEnum.DEDUCTION.getDesc());//押金状态更改为扣除                Integer days=DateUtils.differentDays(order.getUptDatetime(),new Date());                repayRecord.setDays(days);                order.setUptDatetime(new Date());                //更新订单状态                order.setStatus(OrderStatusEnum.AUDITING.getTypeName());                   }else {                //上次付租日期+当前时间+付租天数=付租了多少时间                String rate=new SimpleDateFormat("yyyy-MM-dd").format(order.getUptDatetime());                String time=new SimpleDateFormat("HH:mm:ss").format(new Date());                Date uptTime=null;                try {                    uptTime=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rate+" "+time);                } catch (ParseException e) {                    log.debug("日期转换出错"+rate+" "+time);                    e.printStackTrace();                }                order.setUptDatetime(DateUtils.dayAdd(order.getDays(),uptTime));                //更新订单状态                order.setStatus(OrderStatusEnum.AUDITING.getTypeName());            }            orderService.updateById(order);            //****************还款记录*********************        if(order.getDays()==-1){            repayRecord.setType(3);//赎金            repayRecord.setDays(1);        }else if(order.getDays()==0) {            //计算超时费            BigDecimal overMoney=orderService.selectOverTimeMoney(orderId);            repayRecord.setType(2);//逾期还款            repayRecord.setOvertimeMoney(overMoney);        }else {            repayRecord.setType(1);//正常日租金            repayRecord.setDays(order.getDays());        }        repayRecord.setPayType(3);//微信还款        repayRecord.setMoney(new BigDecimal(money));        repayRecord.setOrderId(order.getId());        Long userId=evaluation.getUserId();        repayRecord.setUserId(userId);        repayRecord.setGmtDatetime(new Date());        repayRecord.setUptDatetime(new Date());        repayRecordService.insert(repayRecord);        //更新相关报表统计        DataReport dataReport = dataReportService.selectById(1);        dataReport.setMoneyIn(dataReport.getMoneyIn().add(new BigDecimal(money)));        dataReportService.updateById(dataReport); }**/            // 处理业务完毕            // ------------------------------            return "success";    }}