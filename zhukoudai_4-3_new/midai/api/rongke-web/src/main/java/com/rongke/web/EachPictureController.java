package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.rongke.commons.JsonResp;import com.rongke.commons.PageDto;import com.rongke.model.EachPicture;import com.rongke.service.EachPictureService;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.Date;import java.util.List;/** * @EachPictureController * @广告Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/eachPicture")@Transactional@CrossOriginpublic class EachPictureController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private EachPictureService eachPictureService;    /**     * @添加广告     * @param eachPicture     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addEachPicture(@RequestBody EachPicture eachPicture){        log.debug("添加广告");        eachPicture.setGmtDatetime(new Date());        eachPictureService.insert(eachPicture);        return JsonResp.ok(eachPicture);    }    /**     * @修改广告     * @param eachPicture     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateEachPicture(@RequestBody EachPicture eachPicture){        log.debug("修改广告");        eachPicture.setUptDatetime(new Date());        eachPictureService.updateById(eachPicture);        return JsonResp.ok(eachPicture);    }    /**     * @根据id查找广告     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectEachPicture(Long id){        log.debug("查找广告");        EachPicture eachPicture = eachPictureService.selectById(id);        return JsonResp.ok(eachPicture);    }    /**     * @根据条件查找广告     * @param eachPicture     * @return 返回值JsonResp     */    @RequestMapping(value = "/selectByCondition", method = RequestMethod.POST)    public JsonResp selectEachPictureByCondition(@RequestBody EachPicture eachPicture){        log.debug("根据条件查找广告");        if(eachPicture==null)            return JsonResp.toFail("参数不能为空");        List<EachPicture> eachPictureList=eachPictureService.selectByCondition(eachPicture);        return JsonResp.ok(eachPictureList);    }    /**     * @param page,id     * @return 返回值JsonResp     * @查找所有广告列表     */    @RequestMapping(value = "/selectAll", method = RequestMethod.GET)    public JsonResp selectAll(Page page, Long id) {        EntityWrapper<EachPicture> eachPictureEntityWrapper = new EntityWrapper<>();        if (id != null && !"".equals(id)) {            eachPictureEntityWrapper.eq("id", id);        }        List<EachPicture> eachPictureList = eachPictureService.selectList(eachPictureEntityWrapper);        return JsonResp.ok(new PageDto(page.getCurrent(), page.getSize(), eachPictureList, eachPictureList.size()));    }    /**     * @param     * @return 返回值JsonResp     * @id查询     */    @RequestMapping(value = "/selectList", method = RequestMethod.GET)    public JsonResp selectList() {        List<EachPicture> eachPictureList=null;        //查看缓存中有没有数据 有直接从缓存中获取//        if(redisTemplate.hasKey("eachPictureCache")){//            //从缓存中取值(全部取出)//            eachPictureList=(List<EachPicture>)redisTemplate.opsForList().range("eachPictureCache", 0l, -1l);//        }else {            EntityWrapper<EachPicture> ew = new EntityWrapper<>();            eachPictureList= eachPictureService.selectList(ew);            //放入缓存//            redisTemplate.opsForList().rightPushAll("eachPictureCache",eachPictureList);//        }        return JsonResp.ok(eachPictureList);    }    /**     * @param id     * @return 返回值JsonResp     * @id删除广告     */    @RequestMapping(value = "/deleteOne", method = RequestMethod.GET)    public JsonResp deleteOne(Long id) {        boolean bo = eachPictureService.deleteById(id);        return JsonResp.ok(bo);    }}