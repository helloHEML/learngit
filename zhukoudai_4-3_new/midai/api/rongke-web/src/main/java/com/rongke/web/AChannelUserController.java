package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.rongke.commons.JsonResp;import com.rongke.commons.PageDto;import com.rongke.enums.FileType;import com.rongke.model.Admin;import com.rongke.model.Channel;import com.rongke.model.ChannelUser;import com.rongke.model.User;import com.rongke.service.AdminService;import com.rongke.service.ChannelService;import com.rongke.service.ChannelUserService;import com.rongke.service.UserService;import com.rongke.utils.Md5;import com.rongke.utils.StringUtil;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.Query;import com.rongke.utils.ans.R;import org.apache.commons.codec.digest.DigestUtils;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.Logger;import org.apache.poi.xssf.usermodel.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.Base64Utils;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.*;import static com.rongke.web.EvaluationController.writeExcel;/** * */@RestController@RequestMapping(value="/api/channelUser")@Transactional@CrossOriginpublic class AChannelUserController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private AdminService adminService;    @Autowired    private ChannelService channelService;    @Autowired    private UserService userService;    @Autowired    private ChannelUserService channelUserService;    @RequestMapping(value="/channelUserPage", method = RequestMethod.GET)    public PageUtils channelUserPage(@RequestParam Map<String,Object> parems){        return channelUserService.channelUserPage(parems);    }    @RequestMapping(value="/add", method = RequestMethod.POST)    public R add(@RequestBody ChannelUser channelUser){        ChannelUser login_name = channelUserService.selectOne(new EntityWrapper<ChannelUser>()                .eq("login_name", channelUser.getLoginName()));        if(login_name!=null){            return R.error("账号已存在");        }        Admin admin = adminService.selectOne(new EntityWrapper<Admin>().eq("login_name", channelUser.getLoginName()));        if(admin!=null){            return R.error("账号已存在");        }        channelUser.setPassword(DigestUtils.md5Hex("123456"));        channelUser.setCreateTime(new Date());        channelUserService.insert(channelUser);        return  R.ok();    }    @RequestMapping(value="/update", method = RequestMethod.POST)    public R update(@RequestBody ChannelUser channelUser){        channelUser.setUpdateTime(new Date());        channelUserService.updateById(channelUser);        return R.ok();    }    @RequestMapping(value="/info/{userId}", method = RequestMethod.GET)    public R info(@PathVariable("userId") String userId){        ChannelUser channelUser = channelUserService.selectById(userId);        return R.ok().put("data",channelUser);    }    @RequestMapping(value="/delete", method = RequestMethod.POST)    public R delete(@RequestBody String[] ids){        channelUserService.deleteBatchIds(Arrays.asList(ids));        return R.ok();    }    /**     * 运营商登陆     */    @RequestMapping(value="/login", method = RequestMethod.GET)    public R login(String loginName,String password){        return channelUserService.channelUserLogin(loginName,password);    }    /**     * 运营商个人信息     */    @RequestMapping(value="/channelUser", method = RequestMethod.GET)    public R channelUser(String loginName,String password){        return R .ok().put("data",channelUserService.channelUser());    }    /**     * 查询用户注册时间     */    @RequestMapping(value="/channelRegisteredPage", method = RequestMethod.GET)    public PageUtils channelRegisteredPage(@RequestParam  Map<String,Object> params){        ChannelUser channelUser = channelUserService.channelUser();        if(StringUtils.isNotBlank(channelUser.getChannelId())){            if(StringUtils.isNotBlank((String) params.get("name"))){                Channel channels = channelService.selectOne(new EntityWrapper<Channel>().eq("id",params.get("name")));                if(channels!=null){                    params.put("source",String.valueOf(channels.getId()));                }else{                    return new PageUtils(null,0,10,1);                }            }else{                params.put("source",channelUser.getChannelId());            }            return userService.channelRegistered(params);        }else{            return new PageUtils(null,0,10,1);        }    }    @RequestMapping(value="/channelechart", method = RequestMethod.GET)    public R channelechart(Map<String,Object> params){        ChannelUser channelUser = channelUserService.channelUser();        if(StringUtils.isNotBlank(channelUser.getChannelId())){            params.put("source",channelUser.getChannelId());            List<Map<String, Object>> channelechart = userService.channelechart(params);            return R.ok().put("data",channelechart);        }        return R.ok().put("data",null);    }    @RequestMapping(value="/cuPassword", method = RequestMethod.POST)    public R channelUserORPassword(@RequestBody ChannelUser channelUser){        if(StringUtils.isBlank(channelUser.getPassword())||channelUser.getId()==null){            return R.error("参数不足");        }        channelUser.setPassword(DigestUtils.md5Hex(channelUser.getPassword()));        channelUserService.updateById(channelUser);        return R.ok();    }    @RequestMapping(value="/getFkCount", method = RequestMethod.GET)    public R getFkCount(@RequestParam Map<String, Object> params){        ChannelUser channelUser = channelUserService.channelUser();            if(StringUtils.isNotBlank(channelUser.getChannelId())){                params.put("channelUser",channelUser.getId().toString());                return channelUserService.getFkCount(params);        }        return R.ok().put("data","0");    }}