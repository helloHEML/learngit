package com.rongke.web.lianpay;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.rongke.commons.JsonResp;import com.rongke.enums.DepositStatusEnum;import com.rongke.enums.OrderStatusEnum;import com.rongke.enums.StatusEnum;import com.rongke.model.*;import com.rongke.service.*;import com.rongke.utils.DateUtils;import com.rongke.utils.OrderUtils;import com.rongke.utils.StringUtil;import com.rongke.web.config.ConfigUtil;import com.rongke.web.lianpay.util.YinTongUtil;import com.rongke.web.lianpay.vo.PaymentApi;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;import javax.servlet.http.HttpServletRequest;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.util.Date;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;/** * Created by bilibili on 2018/5/5. */@RestController@RequestMapping(value="/api/lianlian")@Transactional@CrossOriginpublic class LianlianPayController {    private Logger log = Logger.getLogger(this.getClass());    private Lock lock = new ReentrantLock();    @Autowired    private OrderService orderService;    @Autowired    private BankCardService bankCardService;    @Autowired    private ParamSettingService paramSettingService;    @Autowired    private EvaluationService evaluationService;    @Autowired    private DataReportService dataReportService;    /**     * 连连web快捷支付(打款、退还押金)     * @param evaluationId  评估报告id     * @param money  打款金额 加密后的密文     * @param userId  用户id     * @param orderId 订单id     * @return     */    @RequestMapping(value="/linalianPay", method = RequestMethod.GET)    public JsonResp transferSingle(String evaluationId,String money,String userId,String orderId){        log.debug("连连web快捷支付");        Order order=null;        Evaluation evaluation=null;        String orderNo=null;        String  demo=null;//备注        if (StringUtil.isEmpty(orderId)){//单笔打款            evaluation=evaluationService.selectById(evaluationId);            if(!StatusEnum.WAITAUDIT.getTypeName().equals(evaluation.getStatus())){                return JsonResp.fa("该报告不符合打款条件");            }            int size=new SimpleDateFormat("yyyyMMddHHmm").format(new Date()).length()+"a".length()+evaluationId.length();            orderNo=new SimpleDateFormat("yyyyMMddHHmm").format(new Date())+ OrderUtils.getSizeNumber(32-size)+"a"+evaluationId; //l流水号            evaluation.setBatchNo(orderNo);            demo="手机回租费用";        }else { //退还押金            order=orderService.selectById(orderId);            int size=new SimpleDateFormat("yyyyMMdd").format(new Date()).length()+"a".length()+orderId.length();            orderNo=new SimpleDateFormat("yyyyMMdd").format(new Date())+OrderUtils.getSizeNumber(32-size)+"b"+orderId; //流水号            order.setBatchNo(orderNo);            demo="退还押金";        }        if(StringUtil.isEmpty(money)){            return JsonResp.fa("打款金额不能为空");        }        if(!userId.equals(String.valueOf(evaluation.getUserId()))){            return JsonResp.fa("打款人不正确，打款失败");        }        String payMoney=new String(ConfigUtil.decode(money));//获取解密后的打款金额        if(payMoney.length()-payMoney.indexOf(".")!=3){            return JsonResp.fa("打款金额需要保留两位小数");        }        EntityWrapper<BankCard> ew=new EntityWrapper<>();        ew.eq("user_id",userId);        ew.eq("status",StatusEnum.USED.getTypeName());        BankCard bankCard=bankCardService.selectOne(ew);        if(bankCard==null){            return JsonResp.fa("该用户银行卡尚未认证");        }        try {            lock.lock();//加锁            if (order==null){                if(!StatusEnum.WAITAUDIT.getTypeName().equals(evaluation.getStatus())){                    return JsonResp.fa("该报告不符合打款条件，打款失败");                }            }else {                if ("1".equals(order.getDepositStatus())){//如果不为应该还状态                    return JsonResp.fa("该订单不符合打款条件，打款失败");                }            }            //打款            String  str= null;            try {            /*    str = PaymentApi.payment(orderNo,money,bankCard.getBankCardNo(),bankCard.getBankCardName(),bankCard.getName(),"手机租赁或者退还押金",demo);*/            } catch (Exception e) {                e.printStackTrace();            }            if (order==null){                evaluation.setFinalMoney(new BigDecimal(payMoney));                evaluation.setStatus(str);                evaluationService.updateById(evaluation);            }else {                order.setBackDeposit(new BigDecimal(payMoney));                orderService.updateById(order);            }            log.debug("打款成功");        } finally {            lock.unlock();//释放        }        return JsonResp.ok();    }    @RequestMapping(value="tradepayapi/notifyBack", method = RequestMethod.POST)    public JsonResp transferSingle(HttpServletRequest request){        log.debug("连连web快捷支付");        String reqStr =null;/* YinTongUtil.readReqStr(request);*/        JSONObject data=JSONObject.parseObject(reqStr);        String noOrder=data.getString("no_order");//流水号        String money=data.getString("money_order");//金额        String payResult=data.getString("pay_result");//支付结果        String infoOrder= data.getString("info_order");//通过下划线拼接订单描述和失败原因        //如果是打款成功        if(noOrder.contains("a")){            if("SUCCESS".equals(payResult)){                EntityWrapper<Evaluation> ew=new EntityWrapper<>();                ew.eq("batch_no",noOrder);                Evaluation evaluation=evaluationService.selectOne(ew);                evaluation.setStatus(StatusEnum.PASS.getTypeName());                evaluation.setUptDatetime(new Date());                evaluationService.updateById(evaluation);                //订单生成                Order order=new Order();                order.setEvaluationId(evaluation.getId());                order.setStatus(OrderStatusEnum.NOT_APPLYING.getTypeName());                //日租金                EntityWrapper<ParamSetting> psew=new EntityWrapper<>();                psew.eq("status",StatusEnum.USED.getTypeName());                ParamSetting ps=paramSettingService.selectOne(psew);                BigDecimal dayRent=evaluation.getEvaluationPrice().multiply(new BigDecimal(ps.getRentDayMoney()));                order.setTerminalno("SQKKSCENEPK010");//SQKKSCENEPK010 代扣 SQKKSCENEKJ010 快捷                order.setDayRent(dayRent);                order.setOrderNumber(OrderUtils.getOrderNo());                order.setGmtDatetime(new Date());                order.setUptDatetime(DateUtils.dayAdd(5,new Date()));                order.setDepositStatus(DepositStatusEnum.NOTREFUND.getDesc());                //更新相关报表统计                DataReport dataReport = dataReportService.selectById(1);                dataReport.setOrderCount(dataReport.getOrderCount() + 1);                dataReport.setMoneyOut(dataReport.getMoneyOut().add(evaluation.getPayMoney()));                dataReportService.updateById(dataReport);            }            //退还押金成功        }else if(noOrder.contains("b")){            String orderId=noOrder.split("b")[1];            Order order=orderService.selectById(orderId);            if("SUCCESS".equals(payResult)){                order.setDepositBacktime(new Date());                order.setDepositStatus(DepositStatusEnum.SUCCESS.getDesc());            }else{                order.setDepositStatus(payResult);            }            orderService.updateById(order);        }        return JsonResp.ok();    }}