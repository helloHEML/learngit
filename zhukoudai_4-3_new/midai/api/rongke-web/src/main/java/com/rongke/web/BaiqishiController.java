package com.rongke.web;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.mapper.EntityWrapper;/*import com.rongke.baiqishi.DecisionEnum;import com.rongke.baiqishi.ResultCodeEnum;import com.rongke.baiqishi.RiskTypeEnum;*/import com.rongke.commons.JsonResp;import com.rongke.model.Baiqishi;import com.rongke.service.BaiqishiService;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.*;/** * @BaiqishiController * @Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/baiqishi")@Transactional@CrossOriginpublic class BaiqishiController {    /*    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private BaiqishiService baiqishiService;*//**     * @添加     * @param baiqishi     * @return 返回值JsonResp     *//*    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addBaiqishi(@RequestBody Baiqishi baiqishi){        log.debug("添加");        baiqishi.setGmtDatetime(new Date());        baiqishiService.insert(baiqishi);        return JsonResp.ok(baiqishi);    }*//**     * @修改     * @param baiqishi     * @return 返回值JsonResp     *//*    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateBaiqishi(@RequestBody Baiqishi baiqishi){        log.debug("修改");        baiqishi.setUptDatetime(new Date());        baiqishiService.updateById(baiqishi);        return JsonResp.ok(baiqishi);    }*//**     * @根据id查找     * @param userId     * @return 返回值JsonResp     *//*    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectBaiqishi(Long userId){        log.debug("查找");        EntityWrapper<Baiqishi> ew=new EntityWrapper<>();        ew.eq("user_id",userId);        Baiqishi baiqishi = baiqishiService.selectOne(ew);        List<Map> mapList=new ArrayList<>();        Map resultcode=new HashMap();        resultcode.put("id","resultCode");        resultcode.put("name","结果码："+ ResultCodeEnum.getDecisionEnumByType(baiqishi.getResultCode()).getTypeName());        resultcode.put("open",true);        mapList.add(resultcode);        Map finalDecision=new HashMap();        finalDecision.put("id","finalDecision");        finalDecision.put("name","决策结果码："+ DecisionEnum.getDecisionEnumByType(baiqishi.getFinalDecision()).getTypeName());        finalDecision.put("open",true);        mapList.add(finalDecision);        Map flowNo=new HashMap();        flowNo.put("id","flowNo");        flowNo.put("name","流水号："+baiqishi.getFlowNo());        flowNo.put("open",true);        mapList.add(flowNo);        String strategySet=baiqishi.getStrategySet();        if(strategySet!=null){            JSONArray strategyArr= JSON.parseArray(strategySet) ;            for (int i=0;i<strategyArr.size();i++){                Map strategySetMap=new HashMap();//规则明细                strategySetMap.put("id","strategySet"+i);                strategySetMap.put("name","策略集明细");                strategySetMap.put("open",true);                mapList.add(strategySetMap);                JSONObject json=strategyArr.getJSONObject(i);                if(json.containsKey("riskType")){                    Map riskTypeMap=new HashMap();                    riskTypeMap.put("id","riskType"+i);                    riskTypeMap.put("name","策略风险类型："+ RiskTypeEnum.getriskTypeEnumByType(json.getString("riskType")).getTypeName());                    riskTypeMap.put("pId","strategySet"+i);                    mapList.add(riskTypeMap);                }                if(json.containsKey("strategyDecision")){                    Map strategyDecision=new HashMap();                    strategyDecision.put("id","strategyDecision"+i);                    strategyDecision.put("name","策略决策结果："+ DecisionEnum.getDecisionEnumByType(json.getString("strategyDecision")).getTypeName());                    strategyDecision.put("pId","strategySet"+i);                    mapList.add(strategyDecision);                }                if(json.containsKey("strategyName")){                    Map strategyName=new HashMap();                    strategyName.put("id","strategyName"+i);                    strategyName.put("name","策略名称："+json.getString("strategyName"));                    strategyName.put("pId","strategySet"+i);                    mapList.add(strategyName);                }                JSONArray hitRulesArr=json.getJSONArray("hitRules");                Map hitRules=new HashMap();                hitRules.put("id","hitRules");                hitRules.put("name","规则内容明细");                hitRules.put("open",true);                hitRules.put("pId","strategySet"+i);                mapList.add(hitRules);                for(int t=0;t<hitRulesArr.size();t++){                    Map hitRuleMap=new HashMap();                    hitRuleMap.put("id","hitRulesArr"+t);                    hitRuleMap.put("name","明细");                    hitRuleMap.put("open",true);                    hitRuleMap.put("pId","hitRules");                    mapList.add(hitRuleMap);                    JSONObject hitJson=hitRulesArr.getJSONObject(t);                    Map decision=new HashMap();                    decision.put("id","decision"+t);                    decision.put("name","规则决策结果："+DecisionEnum.getDecisionEnumByType(hitJson.getString("decision")).getTypeName());                    decision.put("pId","hitRulesArr"+t);                    mapList.add(decision);                    Map detail=new HashMap();                    detail.put("id","detail"+t);                    detail.put("name","详细信息");                    detail.put("open",true);                    detail.put("pId","hitRulesArr"+t);                    mapList.add(detail);                    Map memo=new HashMap();                    memo.put("id","memo"+t);                    memo.put("name",hitJson.getString("memo"));                    memo.put("pId","hitRulesArr"+t);                    mapList.add(memo);                    Map ruleName=new HashMap();                    ruleName.put("id","ruleName"+t);                    ruleName.put("name",hitJson.getString("ruleName"));                    ruleName.put("pId","hitRulesArr"+t);                    mapList.add(ruleName);                    if(!hitJson.containsKey("detail")){                        continue;                    }                    JSONArray detailArr=hitJson.getJSONArray("detail");                    for(int m=0;m<detailArr.size();m++){                        JSONObject detailJson=detailArr.getJSONObject(m);                        if(detailJson.containsKey("name")){                            Map namemap=new HashMap();                            namemap.put("id",i+t+m);                            namemap.put("name",detailJson.getString("name"));                            namemap.put("pId","detail"+t);                            mapList.add(namemap);                            Map type=new HashMap();                            type.put("id",i+m+t+1);                            type.put("name",detailJson.getString("type"));                            type.put("pId","detail"+t);                            mapList.add(type);                            Map value=new HashMap();                            value.put("id",i+m+t+2);                            value.put("name",detailJson.getString("value"));                            value.put("pId","detail"+t);                            mapList.add(value);                        }                        if(detailJson.containsKey("firstType")){                            Map firstType=new HashMap();                            firstType.put("id",i+t+m);                            firstType.put("name",detailJson.getString("firstType"));                            firstType.put("pId","detail"+t);                            mapList.add(firstType);                            Map grade=new HashMap();                            grade.put("id",i+m+t+1);                            grade.put("name",detailJson.getString("grade"));                            grade.put("pId","detail"+t);                            mapList.add(grade);                            Map secondType=new HashMap();                            secondType.put("id",i+m+t+2);                            secondType.put("name",detailJson.getString("secondType"));                            secondType.put("pId","detail"+t);                            mapList.add(secondType);                        }                    }                }            }        }        return JsonResp.ok(mapList);    }*//**     * @根据条件查找     * @param baiqishi     * @return 返回值JsonResp     *//*    @RequestMapping(value = "/selectByCondition", method = RequestMethod.POST)    public JsonResp selectBaiqishiByCondition(@RequestBody Baiqishi baiqishi){        log.debug("根据条件查找");        if(baiqishi==null)            return JsonResp.toFail("参数不能为空");        List<Baiqishi> baiqishiList=baiqishiService.selectByCondition(baiqishi);        return JsonResp.ok(baiqishiList);    }*/}