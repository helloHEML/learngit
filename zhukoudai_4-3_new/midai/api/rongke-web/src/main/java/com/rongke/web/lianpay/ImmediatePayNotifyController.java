package com.rongke.web.lianpay;import com.alibaba.fastjson.JSON;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.rongke.commons.JsonResp;import com.rongke.enums.OrderStatusEnum;import com.rongke.enums.StatusEnum;import com.rongke.model.*;import com.rongke.service.*;import com.rongke.utils.DateUtils;import com.rongke.utils.OrderUtils;import com.rongke.web.lianpay.base.PartnerConfig;import com.rongke.web.lianpay.bean.BankCardPayBean;import com.rongke.web.lianpay.util.SignUtil;import com.rongke.web.lianpay.util.YinTongUtil;import com.rongke.web.lianpay.vo.PayDataBean;import com.rongke.web.lianpay.vo.RetBean;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.math.BigDecimal;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashMap;import java.util.Map;/** * 这个Controller需放到服务器上运行调试 异步回调接口  * 用于接收连连付款状态 只有生成连连支付单的订单才会有异步回调通知， * 没生成连连支付单的订单连连是不会提交到银行渠道走付款流程 *  * 用spring mvc获取需要配置下面 或者参考另一个文件夹的异步回调demo从http request 数据流中获取 * <mvc:annotation-driven> <mvc:message-converters register-defaults="false"> * <!-- 避免IE执行AJAX时,返回JSON出现下载文件 --> <bean id="fastJsonHttpMessageConverter" * class= * "org.springframework.http.converter.json.MappingJackson2HttpMessageConverter " * > <property name="supportedMediaTypes"> <list> * <value>text/html;charset=UTF-8</value> * <value>application/json;charset=UTF-8</value> * <value>text/json;charset=UTF-8</value> </list> </property> </bean> * </mvc:message-converters> </mvc:annotation-driven> *  * @author lihp * @date 2017-3-17 上午09:55:30 */@RestController@RequestMapping(value="/api/lianpay")@Transactional@CrossOriginpublic class ImmediatePayNotifyController {/*	private static final Logger logger = LoggerFactory.getLogger(ImmediatePayNotifyController.class);    @Autowired	private EvaluationService evaluationService;	@Autowired	private OrderService orderService;	@Autowired	private RepayRecordService repayRecordService;	@Autowired	private DataReportService dataReportService;	@Autowired	private UserService userService;	@Autowired	private BankCardService bankCardService;	 * 认证支付平台异步通知更新	 * @param orderId 订单id	 * @param days 支付天数	 * @param money 支付金额	 * @param dayRent 日租金	 * @return@RequestMapping(value = "/registerPayNotifyBack",method = RequestMethod.POST)@ResponseBodypublic synchronized JsonResp renzhenPay(HttpServletRequest req, HttpServletResponse resp, String orderId, String money,Integer days,String dayRent) throws IOException, ParseException {    resp.setCharacterEncoding("UTF-8");    System.out.println("进入支付异步通知数据接收处理");    RetBean retBean = new RetBean();    String reqStr = YinTongUtil.readReqStr(req);    if (YinTongUtil.isnull(reqStr)) {        retBean.setRet_code("9999");        retBean.setRet_msg("交易失败");        resp.getWriter().write(JSON.toJSONString(retBean));        resp.getWriter().flush();        return JsonResp.fa("交易失败");    }    System.out.println("接收支付异步通知数据：【" + reqStr + "】");    try {        if (!YinTongUtil.checkSign(reqStr, PartnerConfig.YT_PUB_KEY,                PartnerConfig.MD5_KEY)) {            retBean.setRet_code("9999");            retBean.setRet_msg("交易失败");            resp.getWriter().write(JSON.toJSONString(retBean));            resp.getWriter().flush();            System.out.println("支付异步通知验签失败");            return JsonResp.fa("交易失败");        }    } catch (Exception e) {        System.out.println("异步通知报文解析异常：" + e);        retBean.setRet_code("9999");        retBean.setRet_msg("交易失败");        resp.getWriter().write(JSON.toJSONString(retBean));        resp.getWriter().flush();        return JsonResp.fa("交易失败");    }    retBean.setRet_code("0000");    retBean.setRet_msg("交易成功");    resp.getWriter().write(JSON.toJSONString(retBean));    resp.getWriter().flush();    System.out.println("支付异步通知数据接收处理成功");    //解析异步通知对象    PayDataBean payDataBean = JSON.parseObject(reqStr, PayDataBean.class);    // TODO:更新订单，发货等后续处理    if (payDataBean.getResult_pay().equals("SUCCESS")) {        Order order=orderService.selectById(orderId);        //还款记录        RepayRecord repayRecord=new RepayRecord();        Evaluation evaluation=evaluationService.selectById(order.getEvaluationId());        if(-1==days){ //-1代表结清订单            evaluation.setStatus(StatusEnum.OVER.getTypeName());//              evaluation.setUptDatetime(new Date());  不能更新时间 打款时间会错            evaluationService.updateById(evaluation);            order.setDays(-1);            order.setStatus(StatusEnum.OVER.getTypeName());            order.setMoney(new BigDecimal(money));            order.setUptDatetime(new Date());            evaluationService.updateById(evaluation);        }else if(0==days){ //0代表交付欠租金额            order.setDepositStatus("2");//押金状态更改为扣除            Integer days2=DateUtils.differentDays(order.getUptDatetime(),new Date());            repayRecord.setDays(days2);            order.setDays(0);            order.setUptDatetime(new Date());            //更新订单状态            order.setStatus(OrderStatusEnum.AUDITING.getTypeName());        }else {            //上次付租日期+当前时间+付租天数=付租了多少时间            String rate=new SimpleDateFormat("yyyy-MM-dd").format(order.getUptDatetime());            String time=new SimpleDateFormat("HH:mm:ss").format(new Date());            Date uptTime=null;            try {                uptTime=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rate+" "+time);            } catch (ParseException e) {                logger.info("日期转换出错"+rate+" "+time);                e.printStackTrace();            }            order.setUptDatetime(DateUtils.dayAdd(days,uptTime));            order.setDays(days);            //更新订单状态            order.setStatus(OrderStatusEnum.AUDITING.getTypeName());        }        orderService.updateById(order);        ****************还款记录*********************        if(days==-1){            repayRecord.setType(3);//赎金            repayRecord.setDays(1);        }else if(days==0) {            //计算超时费            BigDecimal overMoney=orderService.selectOverTimeMoney(Long.valueOf(orderId));            repayRecord.setType(2);//逾期还款            repayRecord.setOvertimeMoney(overMoney);        }else {            repayRecord.setType(1);//正常日租金            repayRecord.setDays(days);        }        repayRecord.setPayType(5);//连连支付        repayRecord.setMoney(new BigDecimal(money));        repayRecord.setOrderId(order.getId());        Long userId=evaluation.getUserId();        repayRecord.setUserId(userId);        repayRecord.setGmtDatetime(new Date());        repayRecord.setUptDatetime(new Date());        repayRecordService.insert(repayRecord);        //更新相关报表统计        DataReport dataReport = dataReportService.selectById(1);        dataReport.setMoneyIn(dataReport.getMoneyIn().add(new BigDecimal(money)));        dataReportService.updateById(dataReport);        return JsonResp.ok();    } else {        return JsonResp.fa("交易失败");    }}    /**     * @return 返回值JsonResp     * @获取签约信息    @RequestMapping(value = "/getSignMsg", method = RequestMethod.GET)    public JsonResp getSignMsg(String orderId,String money,Integer days,String dayRent) {        logger.info("获取签约信息");        User user = userService.selectCurrentUser();        EntityWrapper<BankCard> ewBank = new EntityWrapper();        ewBank.eq("user_id", user.getId());        ewBank.eq("status", "使用");        BankCard bankCard = bankCardService.selectOne(ewBank);        Map map = new HashMap();        String orderNo = "BTHK" + OrderUtils.getOrderNo();        map.put("no_order", orderNo);        map.put("money", money);        map.put("bankNum", bankCard.getBankCardNo());        map.put("idCard", bankCard.getIdCardNo());        map.put("name", user.getRealName());        map.put("orderId", orderId);        map.put("days", days);        map.put("dayRent", dayRent);        map.put("userId", user.getId());        SimpleDateFormat dataFormat = new SimpleDateFormat("yyyyMMddHHmmss");        String condition = "{\"frms_ware_category\":\"2036\",\"user_info_mercht_userno\":\""+user.getId()+"\",\"user_info_dt_register\":\""+dataFormat.format(user.getGmtDatetime())+"\",\"user_info_bind_phone\":\""+user.getPhone()+"\",\"user_info_identify_state\":\"1\",\"user_info_identify_type\":\"1\",\"user_info_full_name\":\""+bankCard.getName()+"\",\"user_info_id_no\":\""+bankCard.getIdCardNo()+"\"}";        map.put("risk_item",condition);        return JsonResp.ok(map);    }    /**     * 分期支付平台异步通知更新     *     * @param     * @return    @RequestMapping(value = "/sign",            method = RequestMethod.POST)    @ResponseBody    public String sign(@RequestBody BankCardPayBean bankCardPayBean) {        // 用商户自己的私钥加签        String sign = SignUtil.genRSASign(JSON.parseObject(JSON.toJSONString(bankCardPayBean)));        return sign;    }**/}