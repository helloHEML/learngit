package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.rongke.commons.JsonResp;import com.rongke.commons.PageDto;import com.rongke.model.Authentication;import com.rongke.model.User;import com.rongke.model.UserContact;import com.rongke.service.AuthenticationService;import com.rongke.service.UserContactService;import com.rongke.service.UserService;import com.rongke.utils.RegexUtils;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.Date;import java.util.List;/** * @用户联系人Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/userContact")@Transactional@CrossOriginpublic class UserContactController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private UserContactService userContactService;    @Autowired    private UserService userService;    @Autowired    private AuthenticationService authenticationService;    /**     * @添加用户联系人     * @param userContact     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addUserContact(@RequestBody UserContact userContact){        log.debug("添加用户联系人");        userContact.setGmtDatetime(new Date());        userContactService.insert(userContact);        return JsonResp.ok(userContact);    }    /**     * @修改用户联系人     * @param userContact     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateUserContact(@RequestBody UserContact userContact){        log.debug("修改用户联系人");        userContact.setUptDatetime(new Date());        userContactService.updateById(userContact);        return JsonResp.ok(userContact);    }    /**     * @根据id查找用户联系人     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectUserContact(Long id){        log.debug("查找用户联系人");        UserContact userContact = userContactService.selectById(id);        return JsonResp.ok(userContact);    }    /**     * @根据条件查找用户联系人     * @param userContact     * @return 返回值JsonResp     */    @RequestMapping(value = "/selectByCondition", method = RequestMethod.POST)    public JsonResp selectUserContactByCondition(@RequestBody UserContact userContact){        log.debug("根据条件查找用户联系人");        if(userContact==null)            return JsonResp.toFail("参数不能为空");        List<UserContact> userContactList=userContactService.selectByCondition(userContact);        return JsonResp.ok(userContactList);    }    /**     * @查询指定用户通讯录     * @param userId     * @return 返回值JsonResp     */    @RequestMapping(value="/findByUserPage", method = RequestMethod.GET)    public JsonResp findByUserPage(Long userId,Integer pageNo,Integer pageSize,String phoneNo ){        log.debug("查询指定用户通讯录");        EntityWrapper<UserContact> wrapper = new EntityWrapper<>();        Page page = new Page(pageNo,pageSize);        if(userId!=null && !"".equals(userId)) {            wrapper.eq("user_id", userId);        }        if(phoneNo!=null && !"".equals(phoneNo)) {            wrapper.like("phone", phoneNo);        }        wrapper.orderBy("call_count",false);        Page page1 = userContactService.selectPage(page,wrapper);        return JsonResp.ok(new PageDto(pageNo,pageSize,page1.getRecords(),page1.getTotal()));    }    /**     * @param     * @return 返回值JsonResp     * @存储用户通讯录     */    @RequestMapping(value = "/saveUserPhoneList", method = RequestMethod.POST)    public JsonResp saveUserPhoneList(@RequestBody List<UserContact> userContacts) throws Exception{        log.debug("存储用户通讯录");        if(userContacts.isEmpty()){            return JsonResp.fa("手机联系人数据不能为空");        }        User user = userService.selectCurrentUser();        Long userId=user.getId();        for(UserContact u:userContacts){            if(u.getName()!=null){                if(!RegexUtils.stringCheck(u.getName())){  //名字如果不是只包含数字、字母、汉字就置为null                    u.setName(null);                }            }            u.setUserId(userId);            u.setGmtDatetime(new Date());            u.setEmergencyContact("正常联系人");        }        try {            userContactService.insertBatch(userContacts);        }catch (Exception e){            return JsonResp.fa("服务器出错");        }        EntityWrapper<Authentication> wrapper = new EntityWrapper<>();        wrapper.eq("user_id",user.getId());        Authentication authentication = authenticationService.selectOne(wrapper);        authentication.setPhoneAddressBookAuth("1");        authenticationService.updateById(authentication);        return JsonResp.ok();    }}