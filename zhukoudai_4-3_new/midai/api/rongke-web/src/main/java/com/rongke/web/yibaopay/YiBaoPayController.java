package com.rongke.web.yibaopay;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.cfca.util.pki.PKIException;import com.rongke.commons.JsonResp;import com.rongke.enums.DepositStatusEnum;import com.rongke.enums.EvaluationEnum;import com.rongke.enums.OrderStatusEnum;import com.rongke.enums.StatusEnum;import com.rongke.model.*;import com.rongke.service.*;import com.rongke.utils.DateUtils;import com.rongke.utils.Md5;import com.rongke.utils.OrderUtils;import com.rongke.utils.StringUtil;import com.rongke.utils.ans.MapUtils;import com.rongke.web.ans.config.SysReader;import com.rongke.web.config.ConfigUtil;import com.rongke.web.sms.SmsUtils;import com.rongke.web.yibao.PaperOrder;import com.rongke.web.yibao.TtransferParamResolver;import com.rongke.web.yibao.YeepayService;import com.rongke.yibaoApi.BindCardApi;import com.rongke.yibaoConfig.MerchantEnvironment;import com.rongke.yibaoModel.RemittanceBean;import com.yeepay.g3.facade.yop.ca.dto.DigitalEnvelopeDTO;import com.yeepay.g3.facade.yop.ca.enums.CertTypeEnum;import com.yeepay.g3.frame.yop.ca.DigitalEnvelopeUtils;import com.yeepay.g3.sdk.yop.utils.InternalConfig;import com.yeepay.shade.org.apache.commons.lang3.RandomStringUtils;import org.apache.commons.codec.digest.DigestUtils;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.MediaType;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.math.BigDecimal;import java.security.PrivateKey;import java.security.PublicKey;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;/** * Created by bilibili on 2018/1/10. */@RestController@RequestMapping(value="/api/yibao")@Transactional@CrossOriginpublic class YiBaoPayController {//    private Logger log = Logger.getLogger(this.getClass());//    private Lock lock = new ReentrantLock();//    @Autowired//    private UserService userService;//    @Autowired//    private UserIdentityService userIdentityService;//    @Autowired//    private OrderService orderService;//    @Autowired//    private BankCardService bankCardService;//    @Autowired//    private ParamSettingService paramSettingService;//    @Autowired//    private EvaluationService evaluationService;//    @Resource//    private AuthenticationService authenticationService;//    @Resource//    private AdminService adminService;//    @Autowired//    private DataReportService dataReportService;//    @Autowired//    private RepayRecordService repayRecordService;//    @Autowired//    private TrackLogService trackLogService;//跟踪信息//    @Autowired//    private SmsUtils smsUtil;//短信//////    /**//     * 发送统一鉴权请求//     * @param cardno  银行卡号//     * @return//     *///    @RequestMapping(value="/authbindcardrequest", method = RequestMethod.POST)//    public JsonResp authbindcardrequest(String cardno){//        log.debug("发送统一鉴权请求");//        User user=userService.selectCurrentUser();//        EntityWrapper<UserIdentity> ew=new EntityWrapper<>();//        ew.eq("user_id",user.getId());//        ew.eq("status", StatusEnum.USED.getTypeName());//        Map map=null;//        //随机生成64位请求数//        String requestno= RandomStringUtils.random(64,true,true);//        UserIdentity userIdentity=userIdentityService.selectOne(ew);//        map= PaperOrder.authbindcardrequest(requestno,user.getPhone(),"PHONE",cardno,userIdentity.getIdentityNum(),"ID",userIdentity.getUserName(),user.getPhone(),"true",new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()),"COMMON_FOUR");//        return JsonResp.ok(map);//    }////////    /**//     * 短信确认//     *///    @RequestMapping(value="/authbindcardconfirm", method = RequestMethod.POST)//    public JsonResp authbindcardconfirm(String validatecode, String requestno){//        log.debug("发送统一鉴权请求");//        User user=userService.selectCurrentUser();//        Map<String,String> map= null;//        map = PaperOrder.authbindcardconfirm(requestno,validatecode);//        if(map.get("errorcode")==null || "".equals(map.get("errorcode"))){//            EntityWrapper auew = new EntityWrapper();//            auew.eq("user_id", user.getId());//            Authentication authentication =authenticationService.selectOne(auew);//            if("0".equals(authentication.getBankCardAuth())){//                authentication.setBankCardAuth("1");//                authenticationService.updateById(authentication);//            }//        }//        return JsonResp.ok(map);//    }////    /**//     * 鉴权绑卡短信重发//     *///    @RequestMapping(value="/authbindcardresend", method = RequestMethod.GET)//    public JsonResp authbindcardresend(String requestno){//        System.out.print("鉴权绑卡短信重发");//        Map<String,String> map= PaperOrder.authbindcardresend(requestno);//        return JsonResp.ok(map);//    }//    /**//     *  鉴权记录查询//     *///    @RequestMapping(value="/authrecordquery", method = RequestMethod.GET)//    public JsonResp authrecordquery(String requestno){//        System.out.print("鉴权记录查询");//        Map<String,String> map= PaperOrder.authrecordquery(requestno);//        return JsonResp.ok(map);//    }////    /**//     *  鉴权列表查询//     *///    @RequestMapping(value="/authListquery", method = RequestMethod.GET)//    public JsonResp authListquery(){//        log.debug("鉴权列表查询");//        System.out.print("鉴权记录查询");//        User user=userService.selectCurrentUser();//        Map<String,String> map= BindCardApi.authListQuery(user.getPhone());//        return JsonResp.ok(map);//    }////    /**//     *  支付查询//     *///    @RequestMapping(value="/bindcardquery", method = RequestMethod.GET)//    public JsonResp bindcardquery(String requestno){//        System.out.print("支付查询");//        Map<String,String> map= PaperOrder.bindcardquery(requestno);//        return JsonResp.ok(map);//    }////    /**//     * 统一绑卡支付请求//     * @param cardtop  银行卡号前六位//     *//     * @param cardlast 银行卡号后四位//     * @param orderId  订单id//     * @return//     *///    @RequestMapping(value="/unibindcardpay", method = RequestMethod.GET)//    public JsonResp unibindcardpay(String cardtop, String cardlast, String orderId, String money, Integer days, String dayRent,//                                   String secret, HttpServletRequest request){////        log.debug("验签参数："+days+money+"js^baitu");//        String  newsecret= Md5.md5Encode(days+money+"js^baitu");//        if(secret==null ||  !newsecret.equals(secret)){//            return JsonResp.fa("金额验签不正确");//        }//        log.debug("订单号。。。。。。"+orderId);//        User user=userService.selectCurrentUser();//        String phone=user.getPhone();//        String param="nulll";//        lock.lock();//加锁//        if(param.equals(phone)){//            return JsonResp.fa("您支付请求已发送，如未成功,请稍后重试");//        }//        param=phone;//        lock.unlock();//加锁//        if(cardtop==null){//            return JsonResp.fa("银行卡号不能为空");//        }//        if(orderId==null){//            return JsonResp.fa("订单id不能为空");//        }//        int length=String.valueOf(days).length()+orderId.length()+String.valueOf(user.getId()).length();//        //随机生成64位请求数//        String requestno=RandomStringUtils.random(61-length,true,true)+"x"+days+"y"+orderId+"z"+user.getId();//        Order order=orderService.selectById(orderId);////        String callbackurl= request.getRequestURL()+"/cardpaycallback";////        String callbackurl="https://app.yrrzzl.com/api/yibao/unibindcardpay/cardpaycallback";//        log.debug("回调地址："+callbackurl);//        Map<String,String> map=null;//        try {//            map= PaperOrder.unibindcardpay(requestno,"false",user.getPhone(),"PHONE",cardtop,cardlast,money,"手机租金",callbackurl,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()),"SQKKSCENEKJ010");//协议支付： SQKKSCENEKJ010 代扣：SQKKSCENE10//        }catch (Exception e){//            log.debug("易宝绑卡支付出现异常");//            e.printStackTrace();//        }finally{////            if(StringUtil.isEmpty(map.get("errorcode")) || !map.containsKey("errorcode")){//            order.setRequestno(requestno);//            order.setDays(days);//            order.setDayRent(new BigDecimal(dayRent));//            orderService.updateById(order);////            }//        }//        log.debug("支付结果："+map);//        return JsonResp.ok(map);//    }////    /**//     * 绑卡支付异步回调//     *///    @RequestMapping(value="/unibindcardpay/cardpaycallback", method = RequestMethod.POST,//            produces = MediaType.APPLICATION_JSON_VALUE + ";charset=UTF-8")//    public String cardpaycallback(HttpServletRequest request){////        log.debug("支付回调");//        Map<String, String> params = new HashMap<>();//        String response=request.getParameter("response");//        DigitalEnvelopeDTO dto = new DigitalEnvelopeDTO();//        dto.setCipherText(response);//        PrivateKey privateKey = InternalConfig.getISVPrivateKey(CertTypeEnum.RSA2048);//        PublicKey publicKey = InternalConfig.getYopPublicKey(CertTypeEnum.RSA2048);//        dto = DigitalEnvelopeUtils.decrypt(dto, privateKey, publicKey);//        params= YeepayService.parseResponse(dto.getPlainText());//        log.debug("解密后的参数"+params);//        if(StringUtil.isEmpty(params.get("errorcode")) || !params.containsKey("errorcode") ){ //返回结果没有异常信息 更新订单支付时间//            String  requestno=params.get("requestno");//返回的请求号//            EntityWrapper<Order> ew=new EntityWrapper<>();//            ew.eq("requestno",requestno);//            Order order= orderService.selectOne(ew);//            Integer days=null;//            if(order==null){//如果没有查询到 再根据订单id查询//                String orderid=requestno.substring(requestno.lastIndexOf("y")+1,requestno.lastIndexOf("z"));//                order=orderService.selectById(orderid);//                days=Integer.valueOf(requestno.substring(requestno.lastIndexOf("x")+1,requestno.lastIndexOf("y")));//            }else{//                days=order.getDays();//            }//            //还款记录//            RepayRecord repayRecord=new RepayRecord();//            if("PAY_SUCCESS".equals(params.get("status"))){//                String money=params.get("amount");//                Evaluation evaluation=evaluationService.selectById(order.getEvaluationId());//                if(-1==days){ //-1代表结清订单//                    evaluation.setStatus(StatusEnum.OVER.getTypeName());////                 evaluation.setUptDatetime(new Date());  不能更新时间 打款时间会错//                    evaluationService.updateById(evaluation);//                    order.setStatus(StatusEnum.OVER.getTypeName());//                    order.setMoney(new BigDecimal(money));//                    order.setUptDatetime(new Date());//                    evaluationService.updateById(evaluation);//                }else if(0==days){ //0代表交付欠租金额//                    order.setDepositStatus("2");//押金状态更改为扣除//                    repayRecord.setDays(DateUtils.differentDays(new Date(),order.getUptDatetime())-1);//                    order.setUptDatetime(new Date());//                }else {////                   if(DateUtils.isSameDay(order.getUptDatetime(),new Date())){////                       order.setUptDatetime(DateUtils.dayAdd(order.getDays()));////                   }else {////                       order.setUptDatetime(DateUtils.dayAdd(order.getDays(),order.getUptDatetime()));////                   }//                    //上次付租日期+当前时间+付租天数=付租了多少时间//                    String rate=new SimpleDateFormat("yyyy-MM-dd").format(order.getUptDatetime());//                    String time=new SimpleDateFormat("HH:mm:ss").format(new Date());//                    Date uptTime=null;//                    try {//                        uptTime=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rate+" "+time);//                    } catch (ParseException e) {//                        log.debug("日期转换出错"+rate+" "+time);//                        e.printStackTrace();//                    }//                    order.setUptDatetime(DateUtils.dayAdd(days,uptTime));//                }//                orderService.updateById(order);//                //TODO 跟踪信息//                TrackLog log = new TrackLog();//                if(days==-1){//                    repayRecord.setType(3);//赎金//                    repayRecord.setDays(1);//                    repayRecord.setGmtDatetime(new Date());//                    if(order.getMoney().compareTo(evaluation.getRentMoney())==1){//                        log.setTitle("【申请单】 逾期归还本金");//                        repayRecord.setType(4);//逾期归还本金//                    }else{//                        log.setTitle("【申请单】 归还赎金");//                    }//                }else if(days==0||days >7) {//                    //计算超时费//                    BigDecimal overtimeMoney=orderService.selectOverTimeMoney(order.getId());//                    repayRecord.setType(2);//逾期还款//                    repayRecord.setOvertimeMoney(overtimeMoney);//                    repayRecord.setGmtDatetime(new Date());//                    log.setTitle("【申请单】 逾期费+正常日租金");//                }else{//                    log.setTitle("【申请单】 正常日租金");//                    repayRecord.setType(1);//正常日租金//                    repayRecord.setDays(days);//                    repayRecord.setGmtDatetime(new Date());//                }//                repayRecord.setPayType(1);//易宝支付//                repayRecord.setMoney(new BigDecimal(money));//                repayRecord.setOrderId(order.getId());//                Long userId=Long.valueOf(requestno.substring(requestno.lastIndexOf("z")+1));//                // Long userId = evaluation.getUserId();//                repayRecord.setUserId(userId);//                repayRecord.setUptDatetime(new Date());//                repayRecordService.insert(repayRecord);//                //更新相关报表统计//                DataReport dataReport = dataReportService.selectById(1);//                dataReport.setMoneyIn(dataReport.getMoneyIn().add(new BigDecimal(money)));//                dataReportService.updateById(dataReport);////                //TODO 添加信息跟踪//                Order orders = orderService.orderStatus(new MapUtils().put("evaluationId",String.valueOf(evaluation.getId())));//                log.setType(1);//                log.setAdminId(0L);//                log.setEvaluationId(evaluation.getId());//                if(order!=null){//                    log.setoStatus(order.getStatus());//                }//                log.seteStatus(evaluation.getStatus());//                if(order!=null){//                    log.setoStatus(order.getStatus());//                }//                log.setCreateTime(new Date());//                log.setStatus(1);//                trackLogService.insert(log);//            }//        }//        System.err.println("易宝支付");//        return "SUCCESS";//易宝要求返回大写的//    }////    /**//     * 绑卡支付短信确认//     *///    @RequestMapping(value="/bindcardconfirm", method = RequestMethod.GET)//    public JsonResp bindcardconfirm(String validatecode, String requestno){//        System.out.print("绑卡支付短信确认");//        Map<String,String> map= PaperOrder.bindcardconfirm(requestno,validatecode);//        return JsonResp.ok(map);//    }////    /**//     * 绑卡支付短信重发//     *///    @RequestMapping(value="/bindcardpayresend", method = RequestMethod.GET)//    public JsonResp bindcardconfirm(String requestno){//        System.out.print("鉴权记录查询");//        Map<String,String> map= PaperOrder.bindcardpayresend(requestno);//        return JsonResp.ok(map);//    }//////    /**//     * @ 单笔打款//     * @param evaluationId//     * @return 返回值JsonResp//     *///    @RequestMapping(value="/danbitransferSingle", method = RequestMethod.GET)//    public JsonResp danbitransferSingle(String evaluationId,String money,String userId,String orderId,String password){//        Admin admin = adminService.findLoginUser();//        if(StringUtils.isBlank(password)){//            return JsonResp.fa("请输入打款密码");//        }//        if(!SysReader.getString("").equals(DigestUtils.md5Hex(password))){//            return JsonResp.fa("打款密码不正确");//        }//        log.debug("单笔打款");//        Order order=null;//        Evaluation evaluation=null;//        String batchNo=null;//        if (StringUtil.isEmpty(orderId)){//单笔打款//            evaluation=evaluationService.selectById(evaluationId);//            if(!StatusEnum.WAITAUDIT.getTypeName().equals(evaluation.getStatus())){//                return JsonResp.fa("该报告不符合打款条件");//            }//            int size=new SimpleDateFormat("yyyyMMdd").format(new Date()).length()+evaluationId.length();//            batchNo=new SimpleDateFormat("yyyyMMdd").format(new Date())+evaluationId+ OrderUtils.getSizeNumber(15-size); //打款批次 15为唯一数字字符串//            orderId=evaluationId+"a"+batchNo;//订单id 不得超过50位//            evaluation.setBatchNo(batchNo);////        }else { //退还押金//            order=orderService.selectById(orderId);//            int size=new SimpleDateFormat("yyyyMMdd").format(new Date()).length()+orderId.length();//            batchNo=new SimpleDateFormat("yyyyMMdd").format(new Date())+orderId+OrderUtils.getSizeNumber(15-size); //打款批次 15为唯一数字字符串//            order.setBatchNo(batchNo);//            orderId=orderId+"b"+batchNo;//        }//        if(StringUtil.isEmpty(money)){//            return JsonResp.fa("打款金额不能为空");//        }////        if(!userId.equals(String.valueOf(evaluation.getUserId()))){////            return JsonResp.fa("打款人不正确，打款失败");////        }////        String payMoney=new String(ConfigUtil.decode(money));//获取解密后的打款金额////        if(payMoney.length()-payMoney.indexOf(".")!=3){////            return JsonResp.fa("打款金额需要保留两位小数");////        }////        //打款金额//        EntityWrapper<ParamSetting> psew=new EntityWrapper<>();//        psew.eq("status",StatusEnum.USED.getTypeName());//        ParamSetting paramSetting=paramSettingService.selectOne(psew);//        //评估费//        BigDecimal assessMoney=new BigDecimal(paramSetting.getAssessMoney());//        //保证金//        BigDecimal deposit=new BigDecimal(paramSetting.getCashPledge()).multiply(new BigDecimal(payMoney));//        //扣掉7天租金//        BigDecimal rentDayPortion = new BigDecimal(paramSetting.getRentDayMoney()).multiply(new BigDecimal(payMoney)).multiply(new BigDecimal(7));//日租金比例/*paramSettingService.days*///        BigDecimal paysMoney=new BigDecimal(payMoney).subtract(rentDayPortion).subtract(deposit).subtract(assessMoney).setScale(2,BigDecimal.ROUND_HALF_UP);//        if(paysMoney.compareTo(new BigDecimal("100"))==-1){//            return JsonResp.fa("应打金额小于100元");//        }//        evaluation.setEvaluationPrice(new BigDecimal(payMoney)); //修改评估金额//        evaluation.setRentMoney(new BigDecimal(payMoney));//设置回租价值//        evaluation.setPayMoney(paysMoney); //应打金额//////        EntityWrapper<BankCard> ew=new EntityWrapper<>();//        ew.eq("user_id",userId);//        ew.eq("status",StatusEnum.USED.getTypeName());//        BankCard bankCard=bankCardService.selectOne(ew);//        if(bankCard==null){//            return JsonResp.fa("该用户银行卡尚未认证");//        }//        String accountName=bankCard.getName();//收款账号的开户名称//        String accountNumber=bankCard.getBankCardNo();//收款账户的账户号//        // String bankName=bankCard.getBankCardName();//收款银行全称//        String bankCode=bankCard.getBankCardCode();//收款银行编号  bankName 和 bankCode  不能同时为空//        StringBuilder sb=new StringBuilder();//        sb.append("<data>");//        sb.append("<cmd>TransferSingle").append("</cmd>");//        sb.append("<mer_Id>").append(TtransferParamResolver.merId).append("</mer_Id>");//        sb.append("<batch_No>").append(batchNo).append("</batch_No>");////        sb.append("<bank_Name>").append(bankName).append("</bank_Name>");//        sb.append("<bank_Code>").append(bankCode).append("</bank_Code>");//        sb.append("<order_Id>").append(orderId).append("</order_Id>");//        sb.append("<amount>").append(paysMoney.toString()).append("</amount>");//        sb.append("<account_Name>").append(accountName).append("</account_Name>");//        sb.append("<account_Number>").append(accountNumber).append("</account_Number>");//        sb.append("<fee_Type>").append("SOURCE").append("</fee_Type>");//        sb.append("<urgency>").append("1").append("</urgency>");//1实时出款0收款行是易宝是银行才出款//        sb.append("<hmac></hmac>");//        sb.append("</data>");//        String  xml=sb.toString();//单笔打款xml请求报文//        //需要参加签名的参数:其中(hmacKey)指的是商户自己的密钥//        String digest="cmd,mer_Id,batch_No,order_Id,amount,account_Number,hmacKey";//        //验证返回参数签名的参数:其中(hmacKey)指的是商户自己的密钥//        String backDigest="cmd,ret_Code,mer_Id,batch_No,total_Amt,total_Num,r1_Code,hmacKey";//        //提交url//        String textHost="http://cha.yeepay.com/app-merchant-proxy/groupTransferController.action";//        try {//            lock.lock();//加锁//            if (order==null){//                if(!StatusEnum.WAITAUDIT.getTypeName().equals(evaluation.getStatus())){//                    return JsonResp.fa("该报告不符合打款条件，打款失败");//                }//            } else {//                if (order.getDepositStatus().equals("1")){//如果不为应该还状态//                    return JsonResp.fa("该订单不符合打款条件，打款失败");//                }//            }//            JSONObject json= TtransferParamResolver.transferSingle(xml,digest,backDigest,textHost);//            if(500==json.getInteger("code")){//                return JsonResp.fa(json.getString("message"));//            }//            if (order==null){//                evaluation.setAdminId(admin.getId());//打款人//                evaluation.setFinalMoney(paysMoney);//                evaluation.setStatus(StatusEnum.WAITMONEY.getTypeName());//                evaluationService.updateById(evaluation);//                //日租金//                BigDecimal dayRent=evaluation.getEvaluationPrice().multiply(new BigDecimal(paramSetting.getRentDayMoney()));//                //生成订单//                order=new Order();//                order.setEvaluationId(evaluation.getId());//                order.setStatus(OrderStatusEnum.NOT_ARRIVAL.getTypeName());//                order.setTerminalno("SQKKSCENEPK010");//                order.setDayRent(dayRent);//                order.setOrderNumber(OrderUtils.getOrderNo());//                order.setGmtDatetime(new Date());//                order.setDepositStatus(DepositStatusEnum.NOTREFUND.getDesc());//                orderService.insert(order);//            } else {//                order.setBackDeposit(new BigDecimal(payMoney));//                order.setDepositStatus(DepositStatusEnum.OUTMONEY.getDesc());//                orderService.updateById(order);//            }//            log.debug("打款成功");////            //TODO 添加信息跟踪//            TrackLog log = new TrackLog();//            log.setTitle("【申请单】 打款");//            log.setType(1);//            log.setAdminId(admin.getId().longValue());//            log.setEvaluationId(evaluation.getId());//            log.seteStatus(EvaluationEnum.PASS.getTypeName());//            log.setoStatus(OrderStatusEnum.NOT_APPLYING.getTypeName());//            log.setCreateTime(new Date());//            log.setStatus(1);//            trackLogService.insert(log);////            User user = userService.selectById(evaluation.getUserId());//            if(user!=null){//                Boolean sendsms = null;//                try {//                    sendsms = smsUtil.sendsms(user.getPhone(), "借款##打款##登录APP查看详情", "28513");//                } catch (Exception e) {//                    e.printStackTrace();//                }//                System.out.println(sendsms);//            }//        } catch (PKIException e) {//            log.debug("单笔打款失败");//            e.printStackTrace();//        }finally {//            lock.unlock();//释放//        }//        return JsonResp.ok();//    }////    public static void main(String[] args) {//        System.out.println("0a658e7f0cb8792ec15cb952d98170af".equals(DigestUtils.md5Hex("121066")));//    }//////    public static JSONObject remittance(RemittanceBean remittanceBean) {//        int size = (new SimpleDateFormat("yyyyMMdd")).format(new Date()).length() + remittanceBean.getOrderId().length();//        String batchNo = (new SimpleDateFormat("yyyyMMdd")).format(new Date()) + remittanceBean.getOrderId() + com.rongke.yibaoUtils.OrderUtils.getSizeNumber(15 - size);//        String accountName = remittanceBean.getCardUserName();//        String accountNumber = remittanceBean.getCardNumber();//        String bankCode = remittanceBean.getBankCode();//        StringBuilder sb = new StringBuilder();//        sb.append("<data>");//        sb.append("<cmd>TransferSingle").append("</cmd>");//        sb.append("<mer_Id>").append(MerchantEnvironment.getInstance().getMerId()).append("</mer_Id>");//        sb.append("<batch_No>").append(batchNo).append("</batch_No>");//        System.out.println("长度"+ batchNo.length());//        sb.append("<bank_Code>").append(bankCode).append("</bank_Code>");//        sb.append("<order_Id>").append(remittanceBean.getOrderId()).append("</order_Id>");//        sb.append("<amount>").append(remittanceBean.getMoney()).append("</amount>");//        sb.append("<account_Name>").append(accountName).append("</account_Name>");//        sb.append("<account_Number>").append(accountNumber).append("</account_Number>");//        sb.append("<fee_Type>").append("SOURCE").append("</fee_Type>");//        sb.append("<urgency>").append("1").append("</urgency>");//        sb.append("<hmac></hmac>");//        sb.append("</data>");//        String xml = sb.toString();//        String digest = "cmd,mer_Id,batch_No,order_Id,amount,account_Number,hmacKey";//        String backDigest = "cmd,ret_Code,mer_Id,batch_No,total_Amt,total_Num,r1_Code,hmacKey";//        String textHost = "http://cha.yeepay.com/app-merchant-proxy/groupTransferController.action";//        JSONObject json = new JSONObject();//        try {//            json = com.rongke.yibaoConfig.TtransferParamResolver.transferSingle(xml, digest, backDigest, textHost);//        } catch (PKIException var13) {//            var13.printStackTrace();//            // logger.error(var13.getMessage(), var13);//        }//        return json;//    }//////    /**//     * 单笔打款 主动通知//     *///    @RequestMapping(value="/yibaoNoticeBack", method = RequestMethod.POST)//    public void transferNotify(HttpServletRequest request, HttpServletResponse response) throws IOException {//        log.debug("单笔打款主动通知");//        String str=null;//        try {//            JSONObject json=TtransferParamResolver.transferNotify(request);//            String param=json.getString("orderId");//            String evaluationId=null,orderId=null;//            if(param.contains("a")){//                evaluationId=param.split("a")[0];//            }else  if(param.contains("b")){//                orderId=param.split("b")[0];//            }//            if(evaluationId!=null){  //打款通知//                Evaluation evaluation=evaluationService.selectById(evaluationId);//                if(!StatusEnum.PASS.getTypeName().equals(evaluation.getStatus()) && !StatusEnum.PASSFAIL.getTypeName().equals(evaluation.getStatus())){//                    if("S".equals(json.getString("status"))){//打款成功//                        evaluation.setStatus(StatusEnum.PASS.getTypeName());//                        evaluation.setUptDatetime(new Date());//                        evaluationService.updateById(evaluation);//                         //订单生成////                        Order order=new Order();////                        order.setEvaluationId(evaluation.getId());////                        order.setStatus(OrderStatusEnum.NOT_APPLYING.getTypeName());////                        //日租金////                        EntityWrapper<ParamSetting> psew=new EntityWrapper<>();////                        psew.eq("status",StatusEnum.USED.getTypeName());////                        ParamSetting ps = paramSettingService.selectOne(psew);////                        BigDecimal dayRent = evaluation.getEvaluationPrice().multiply(new BigDecimal(ps.getRentDayMoney()));////                        order.setTerminalno("SQKKSCENEPK010");////                        order.setDayRent(dayRent);////                        order.setOrderNumber(OrderUtils.getOrderNo());////                        order.setGmtDatetime(new Date());////                        order.setUptDatetime(DateUtils.dayAdd(5,new Date()));////                        order.setDepositStatus(DepositStatusEnum.NOTREFUND.getDesc());//                        Order order = orderService.selectOne(new EntityWrapper<Order>().eq("evaluation_id",evaluation.getId()));//                        order.setUptDatetime(DateUtils.dayAdd(5,new Date()));//                        order.setStatus(OrderStatusEnum.NOT_APPLYING.getTypeName());////                        //更新相关报表统计//                        DataReport dataReport = dataReportService.selectById(1);//                        dataReport.setOrderCount(dataReport.getOrderCount() + 1);//                        dataReport.setMoneyOut(dataReport.getMoneyOut().add(evaluation.getPayMoney()));//                        dataReportService.updateById(dataReport);//                        //TODO 为订单分配催款员////                      order = reminders(order);//                        orderService.updateById(order);//                    }else if("F".equals(json.getString("status"))){//打款失败//                        evaluation.setStatus(StatusEnum.PASSFAIL.getTypeName());//                        evaluation.setFailReason(json.getString("message"));//                        evaluation.setUptDatetime(new Date());//                        evaluationService.updateById(evaluation);//                    }//                }////            }else if(orderId!=null){//退押金通知//                Order order=orderService.selectById(orderId);//                if("S".equals(json.getString("status"))){//退押金成功//                    order.setDepositStatus(DepositStatusEnum.SUCCESS.getDesc());//                }else if("F".equals(json.getString("status"))){//退押金失败//                    order.setDepositStatus(DepositStatusEnum.FAIL.getDesc());//                    order.setRemark(json.getString("message"));//                }//                order.setDepositBacktime(new Date());//                orderService.updateById(order);//            }//            str=json.getString("str");//        } catch (PKIException e) {//            e.printStackTrace();//        }//        response.getOutputStream().write(str.toString().getBytes());//    }}