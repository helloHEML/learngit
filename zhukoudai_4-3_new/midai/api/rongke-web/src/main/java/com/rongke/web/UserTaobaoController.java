package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.rongke.commons.JsonResp;import com.rongke.commons.PageDto;import com.rongke.enums.StatusEnum;import com.rongke.model.*;import com.rongke.rediscluster.CacheUtil;import com.rongke.service.AdminService;import com.rongke.service.AuthenticationService;import com.rongke.service.UserTaobaoService;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.Date;/** * @UserTaobaoController * @Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/userTaobao")@Transactional@CrossOriginpublic class UserTaobaoController {    private Logger log = Logger.getLogger(this.getClass());    private static final Long AUTHTIME = 60*5L;//表示认证时间    @Autowired    private UserTaobaoService userTaobaoService;//    @Autowired//    private AdminService adminService;    @Autowired    private AuthenticationService authenticationService;    @Autowired    private CacheUtil redisClusterCache;    /**     * @添加     * @param userId     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.GET)    public JsonResp addUserTaobao(Long userId,String taskId){        log.debug("添加");        UserTaobao taobao = new UserTaobao();        taobao.setUserId(userId);        taobao.setTaskId(taskId);        taobao.setGmtDatetime(new Date());        userTaobaoService.insert(taobao);        EntityWrapper<Authentication>  ew=new EntityWrapper<>();        ew.eq("user_id",userId);        Authentication authentication=new Authentication();        if (authentication != null){            authentication.setTaobaoAuth("3"); //正确//            authentication.setTaobaoAuth("1");//不要要淘宝认证            log.error("7+auth");            authenticationService.updateById(authentication);            redisClusterCache.set(getTB(userId),"",AUTHTIME);        }        return JsonResp.ok();    }    /**     * @修改     * @param userTaobao     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateUserTaobao(@RequestBody UserTaobao userTaobao){        log.debug("修改");        userTaobaoService.updateById(userTaobao);        return JsonResp.ok(userTaobao);    }    /**     * @根据id查找     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectUserTaobao(Long id){        log.debug("查找");        UserTaobao userTaobao = userTaobaoService.selectById(id);        return JsonResp.ok(userTaobao);    }    /**     * @分页查询淘宝认证用户     * @param     * @return 返回值JsonResp     */    @RequestMapping(value="/findByPage", method = RequestMethod.GET)    public JsonResp findByPage(Page page, String name, String nickName){        log.debug("分页查询淘宝认证用户");        EntityWrapper<UserTaobao> ew = new EntityWrapper();        if(!StringUtils.isEmpty(name)){            ew.eq("name",name);        }        if(!StringUtils.isEmpty(nickName)){            ew.eq("nick_name",nickName);        }        ew.eq("startus","使用");        ew.orderBy("gmt_datetime",false);        Page userTaobaoList = userTaobaoService.selectPage(page,ew);        return JsonResp.ok(userTaobaoList);    }    public String getTB(Long userId){        return "TB"+userId;    }}