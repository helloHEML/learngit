package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.rongke.commons.JsonResp;import com.rongke.model.Admin;import com.rongke.model.AdminRole;import com.rongke.model.AdminRolePermission;import com.rongke.rediscluster.CacheUtil;import com.rongke.service.AdminRolePermissionService;import com.rongke.service.AdminRoleService;import com.rongke.service.AdminService;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.List;/** * @AdminRolePermissionController * @Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/adminRolePermission")@Transactional@CrossOriginpublic class AdminRolePermissionController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private AdminRolePermissionService adminRolePermissionService;    @Autowired    private AdminRoleService adminRoleService;    @Autowired    private AdminService adminService;    @Autowired    private CacheUtil redisClusterCache;    /**     * @添加     * @param adminRolePermissions     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addAdminRolePermission(@RequestBody List<AdminRolePermission> adminRolePermissions,String roleName,Integer type){        log.debug("添加");        Admin admin=adminService.findLoginUser();         if(adminRolePermissions.isEmpty()){            return JsonResp.fa("保存失败，保存信息不能为空");         }         Integer roleId=adminRolePermissions.get(0).getAdminRoleId();         AdminRole ar=null;        if(roleId==null){//角色id为空 说明添加角色            //先查询该角色有没有重复添加            EntityWrapper<AdminRole> arew=new EntityWrapper<>();            arew.eq("name",roleName);            arew.eq("available","1");            AdminRole  adminRole=adminRoleService.selectOne(arew);            if(adminRole!=null){                return JsonResp.fa("该角色已存在，请勿重复添加");            }            ar=new AdminRole();            ar.setName(roleName);            ar.setType(type);            ar.setAvailable("1");            adminRoleService.insert(ar);            for (AdminRolePermission  arp:adminRolePermissions ) {                arp.setAdminRoleId(ar.getId());            }            adminRolePermissionService.insertBatch(adminRolePermissions);            //清理缓存 权限目录列表缓存            if(redisClusterCache.hasKey("menuList")){                try {                    redisClusterCache.delkey("menuList");                } catch (Exception e) {                    e.printStackTrace();                }            }        }else {//更新角色权限目录            AdminRole  adminRole=adminRoleService.selectById(roleId);            if(!roleName.equals(adminRole.getName())){                adminRole.setName(roleName);                adminRole.setType(type);                adminRoleService.updateById(adminRole);            }            //删除之前的权限            EntityWrapper<AdminRolePermission> atew=new EntityWrapper<>();            atew.eq("admin_role_id",roleId);            adminRolePermissionService.delete(atew);            //添加最新权限            adminRolePermissionService.insertBatch(adminRolePermissions);            //清理缓存            if(redisClusterCache.hasKey("menuList"+roleId)){                try {                    redisClusterCache.delkey("menuList"+roleId);                } catch (Exception e) {                    e.printStackTrace();                }            }        }        //清理缓存 首页可见目录权限列表        if(redisClusterCache.hasKey("myJurisdiction")){            try {                redisClusterCache.delkey("myJurisdiction");            } catch (Exception e) {                e.printStackTrace();            }        }        return JsonResp.ok();    }    /**     * @修改     * @param adminRolePermission     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateAdminRolePermission(@RequestBody AdminRolePermission adminRolePermission){        log.debug("修改");        adminRolePermissionService.updateById(adminRolePermission);        return JsonResp.ok(adminRolePermission);    }    /**     * @根据id查找     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectAdminRolePermission(Long id){        log.debug("查找");        AdminRolePermission adminRolePermission = adminRolePermissionService.selectById(id);        return JsonResp.ok(adminRolePermission);    }    /**     * @根据条件查找     * @param adminRolePermission     * @return 返回值JsonResp     */    @RequestMapping(value = "/selectByCondition", method = RequestMethod.POST)    public JsonResp selectAdminRolePermissionByCondition(@RequestBody AdminRolePermission adminRolePermission){        log.debug("根据条件查找");        if(adminRolePermission==null)            return JsonResp.toFail("参数不能为空");        List<AdminRolePermission> adminRolePermissionList=adminRolePermissionService.selectByCondition(adminRolePermission);        return JsonResp.ok(adminRolePermissionList);    }}