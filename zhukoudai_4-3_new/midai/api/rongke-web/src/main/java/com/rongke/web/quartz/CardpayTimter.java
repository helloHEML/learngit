package com.rongke.web.quartz;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.rongke.enums.*;import com.rongke.model.*;import com.rongke.service.*;import com.rongke.utils.OrderUtils;import com.rongke.utils.RRUtils;import com.rongke.utils.ans.R;import com.rongke.web.fuyou.FuYouUtils;import com.rongke.web.saas.RSMlAPI;import com.rongke.web.saas.RSSmsUtils;import com.rongke.web.sms.SmsUtils;import com.rongke.web.yibao.PaperOrder;import com.yeepay.shade.org.apache.commons.lang3.RandomStringUtils;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.CrossOrigin;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.util.*;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;/** * 每天定时执行扣款任务 */@CrossOriginpublic class CardpayTimter {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private OrderService orderService;    @Autowired    private SmsUtils smsUtil;    @Autowired    private AdminService adminService;    /* @Autowired     private EvaluationService evaluationService;*/    @Autowired    private AuthenticationService authenticationService;    @Autowired    private BankCardService bankCardService;    @Autowired    private EvaluationService evaluationService;//审核单操作    @Autowired    private ChannelService channelService;//渠道商    @Autowired    private UserService userService;//用户操作    @Autowired    private UserMessageService userMessageService;    @Autowired    private SysGlobalService sysGlobalService;    @Autowired    private ParamSettingService paramSettingService;    @Autowired    private TrackLogService trackLogService;    @Autowired    private TianchuangOderThirdService tianchuangOderThirdService;    @Autowired    private TianzhenMessageService tianzhenMessageService;    private  final Logger Paylog = Logger.getLogger(this.getClass());    /**     * 易宝每天定时从银行卡中扣租金     */    public void authbindcardrequest() {        //查询所有今天没有支付的订单        List<Order> maps = orderService.selectNeedPayOrdersList();        int num = maps.size() % 3;        int count = maps.size() / 3;        if (maps.size() < 3) {            business(count, maps, maps.size());        } else {            ExecutorService pool = Executors.newCachedThreadPool();            Runnable runnable1 = new Runnable() {                @Override                public void run() {                    business(0, maps, count);                }            };            pool.execute(runnable1);            Runnable runnable2 = new Runnable() {                @Override                public void run() {                    business(count, maps, 2 * count);                }            };            pool.execute(runnable2);            Runnable runnable3 = new Runnable() {                @Override                public void run() {                    business(2 * count, maps, 3 * count + num);                }            };            pool.execute(runnable3);            pool.shutdown();        }    }    public void business(int index, List<Order> maps, int count) {//    log.debug("定时器执行时间："+new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));        for (int i = index, y = count; i < y; i++) {            Order order = maps.get(i);            System.out.print("序号" + index + "订单id" + order.getId());            Order dataorder = orderService.selectPayOrder(order.getId(), 1);//        System.out.print("日租金"+dataorder.getOweTotalMoney());            //查询鉴权列表查询            String userId = String.valueOf(order.getEvaluation().getUserId());            //获得使用的银行卡            BankCard bankCards = bankCardService.selectOne(new EntityWrapper<BankCard>().eq("user_id", userId).eq("status", "使用"));            if (bankCards == null) {                continue;            }            Map<String, String> querymap = PaperOrder.authListquery(bankCards.getPhone(), "PHONE");            if ("[]".equals(querymap.get("cardlist")) || querymap.get("cardlist") == null || "".equals(querymap.get("cardlist"))) {                continue;            }            String cardtop = null, cardlast = null;            JSONArray array = JSON.parseArray(querymap.get("cardlist"));            cardtop = array.getJSONObject(0).getString("cardtop");//拿第一张卡            cardlast = array.getJSONObject(0).getString("cardlast");//        String requestno= RandomStringUtils.random(64,true,true)+"x"+days+"y"+orderId+"z"+user.getId();            int length = String.valueOf(1).length() + String.valueOf(dataorder.getId()).length() + String.valueOf(userId).length();            //随机生成            String requestno = RandomStringUtils.random(61 - length, true, true) + "x" + 1 + "y" + order.getId() + "z" + userId;            String callbackurl = "http://app.yrrzzl.com/api/yibao/unibindcardpay/cardpaycallback";            Map<String, String> map = null;            try {                map = PaperOrder.unibindcardpay(requestno, "false", bankCards.getPhone(), "PHONE", cardtop, cardlast, dataorder.getOweTotalMoney(), "手机租金", callbackurl, new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()), "SQKKSCENEKJ010");            } catch (Exception e) {                log.debug("易宝绑卡支付出现异常");                e.printStackTrace();            } finally {//            if(StringUtil.isEmpty(map.get("errorcode")) || !map.containsKey("errorcode")){                order.setRequestno(requestno);                order.setDays(1);                orderService.updateById(order);//            }            }        }    }    /**     * 定时短信通知没有扣款成功的用户     */    public void sendnotify() {        List<Order> orders = orderService.selectPayFailOrderList();        if (!orders.isEmpty()) {            String mobileString = "";            String content = "";            for (int i = 0, y = orders.size(); i < y; i++) {                String phone = orders.get(i).getEvaluation().getUser().getPhone();                if (phone != null) {                    mobileString += phone + ",";                }            }            if (!"".equals(mobileString)) {                mobileString = mobileString.substring(0, mobileString.length() - 1);            }            try {                boolean falg = RSSmsUtils.sendsms(mobileString, content, "42347");            } catch (Exception e) {                log.debug("短信通知失败" + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));                e.printStackTrace();            }        }        /******通知今天到期的用户********/        List<Order> orderss = orderService.selectPayFailOrderListToday();        if (!orderss.isEmpty()) {            String mobileString = "";            String content = "";            for (int i = 0, y = orderss.size(); i < y; i++) {                String phone = orderss.get(i).getEvaluation().getUser().getPhone();                if (phone != null) {                    mobileString += phone + ",";                }            }            if (!"".equals(mobileString)) {                mobileString = mobileString.substring(0, mobileString.length() - 1);            }            try {                boolean falg = RSSmsUtils.sendsms(mobileString, content, "42346");            } catch (Exception e) {                log.debug("短信通知失败" + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));                e.printStackTrace();            }        }    }    /**     * 分配认证审核     */    public void assignmentTask() {        //查找所有未分配的认证列表//        List<Authentication> authentications=authenticationService.selectAuthenList();        EntityWrapper<Authentication> ew = new EntityWrapper<>();        ew.isNull(true, "auditor_id");        ew.eq("phone_record_auth", 1);        List<Authentication> authentications = authenticationService.selectList(ew);        if (authentications.isEmpty()) {            return;        }        //查找上线的管理员列表//        EntityWrapper<Admin> ewa=new EntityWrapper<>();//        ewa.eq("adminRoleId",2);//2审核员//        ewa.eq("status","上线");//1在线//        List<Admin> adminList=adminService.selectList(ewa);        Map map = new HashMap();        map.put("type", 1);//1审核员        map.put("status", "上线");        List<Map> adminList = adminService.selectAdminList(map);        int size = adminList.size();        int count = 0;//商        int leftcount = 0;//余数        if (!adminList.isEmpty()) {            count = authentications.size() / size;            leftcount = authentications.size() % size;        } else {            return;        }        if (authentications.size() >= size) {            for (int i = 0, y = adminList.size(); i < y; i++) {                Map admin = adminList.get(i);                int m = i * count, n = m + count;//                if(i==y-1){//                    n+=leftcount;//                }                for (; m < n; m++) {                    Authentication authentication = authentications.get(m);                    authentication.setAssignDatetime(new Date());                    authentication.setAuditorId(Integer.valueOf(String.valueOf(admin.get("id"))));                }            }            String ids = "";            //分配剩下的余数            for (int i = 0; i < leftcount; i++) {                Integer index = new Random().nextInt(size);                while (ids.contains(String.valueOf(index))) { //如果字符串ids中已经包含了该数字 说明该id对应的管理员已经被分配过 跳转下一个                    index = new Random().nextInt(size);                }                ids += index;                Map admin = adminList.get(index);                Authentication authentication = authentications.get(size * count + i);                authentication.setAuditorId(Integer.valueOf(String.valueOf(admin.get("id"))));            }        } else {//如果订单数量不够分配 去等同订单数量的管理员 进行分配            String ids = "";            for (int i = 0, y = authentications.size(); i < y; i++) {                Integer index = new Random().nextInt(size);                while (ids.contains(String.valueOf(index))) { //如果字符串ids中已经包含了该数字 说明该id对应的管理员已经被分配过 跳转下一个                    index = new Random().nextInt(size);                }                ids += index;                Map admin = adminList.get(index);                Authentication authentication = authentications.get(i);                authentication.setAssignDatetime(new Date());                authentication.setAuditorId(Integer.valueOf(String.valueOf(admin.get("id"))));            }        }        authenticationService.updateBatchById(authentications, 300);    }    public static void main(String[] args) {//        String ids="";//        for(int i=0,y=10;i<y;i++){//            Integer index=new Random().nextInt(20);//            while (ids.contains(String.valueOf(index))){ //如果字符串ids中已经包含了该数字 说明该id对应的管理员已经被分配过 跳转下一个//                index=new Random().nextInt(20);//            }//            ids+=index;//            System.out.print(index);//        }        Integer zong = 259;//259        Integer fen = 28;//每人分多少个        Integer yu = 7;//剩        Integer i = 0;//从第几个开始        System.out.println(zong - 7);        for (Integer a = 0; a < 9; a++) {            for (Integer b = i; b < fen; b++) {                System.out.println("内循环执行" + b);            }            i = fen;            fen += zong / 9;            System.out.println(i);            System.out.println(fen);        }        if (yu != 0) {            for (Integer c = zong - yu; c < zong; c++) {                System.out.println(c);            }        }    }    /**     * 订单分配     */    public void orderTask() {        System.err.println("订单分配");        //查找所有未分配的订单列表        EntityWrapper<Order> ew = new EntityWrapper<>();        ew.ne("status", StatusEnum.OVER.getTypeName());        ew.isNull("admin_id");        List<Order> orders = orderService.selectList(ew);        //查找上线的管理员列表//        EntityWrapper<Admin> ewa=new EntityWrapper<>();//        ewa.eq("adminRoleId",3);//2审核员//        ewa.eq("status","上线");//1在线//        List<Admin> adminList=adminService.selectList(ewa);        Map map = new HashMap();        map.put("type", 3);//3审核员        map.put("status", "上线");        List<Map> adminList = adminService.selectAdminList(map);        int size = adminList.size();        int count = 0;//商        int leftcount = 0;//余数        if (!adminList.isEmpty()) {            count = orders.size() / size;            leftcount = orders.size() % size;        } else {            return;        }        if (orders.size() >= size) {            for (int i = 0, y = size; i < y; i++) {                Map admin = adminList.get(i);                int m = i * count, n = m + count;//                if(i==y-1){//                    n+=leftcount;//                }                for (; m < n; m++) {                    Order order = orders.get(m);                    order.setAdminId(Integer.valueOf(String.valueOf(admin.get("id"))));                }            }            //分配剩下的余数            for (int i = 0; i < leftcount; i++) {                Order order = orders.get(size * count + i);                Integer index = new Random().nextInt(size);                Map admin = adminList.get(index);                order.setAdminId(Integer.valueOf(String.valueOf(admin.get("id"))));            }        } else {//如果订单数量不够分配 去等同订单数量的管理员 进行分配            for (int i = 0, y = orders.size(); i < y; i++) {                Integer index = new Random().nextInt(size);                Map admin = adminList.get(index);                Order order = orders.get(i);                order.setAdminId(Integer.valueOf(String.valueOf(admin.get("id"))));            }        }        if (!orders.isEmpty()) {            orderService.updateBatchById(orders);        }    }    /**     * 申请单分配     */    public void evaluationTask() {        //获得所有未分配的订单        List<Evaluation> evaluations = evaluationService.distribution();        if (!evaluations.isEmpty()) {            //获得所有上线 角色为审核员的管理员            List<Admin> adminList = adminService.evaCount();            if (!adminList.isEmpty()) {//没有上线的进行分配                List<Evaluation> not = Lists.newArrayList(); //未设置审核角色                List<Evaluation> eva = Lists.newArrayList(); //按照角色分配                for (Evaluation e : evaluations) {//取出对应数据                    if (null == e.getRoleId() || "0".equals(e.getRoleId())) {                        not.add(e);                    } else {                        eva.add(e);                    }                }                //获得所有人负责数量的平均值                Integer pj = 0;                for (Admin a : adminList) {                    pj += a.getHaveCount();                }                if (!not.isEmpty()) {//进行全部分配                    int zong = not.size();//259                    int fen = zong / adminList.size();//每人分多少个                    int yu = zong % adminList.size();//剩                    int i = 0;//开始                    if (zong < adminList.size()) {                        //所有人都没有分配                        if (pj == 0 || pj / adminList.size() == 0) {//顺序分配                            int a = 0;                            for (Evaluation e : not) {                                e.setAuditorId(adminList.get(a).getId());                                if (a == adminList.size() - 1) {                                    a = 0;                                } else {                                    a++;                                }                            }                        } else {//按量分配                            int yifenp = 0;//已分配至                            for (Admin a : adminList) {//ping jun  zhi  bu tong                                if (a.getHaveCount() < pj / adminList.size()) {//少于平均 分配                                    if (yifenp + ((pj / adminList.size()) - a.getHaveCount()) <= zong) {//刚好分完或者还有剩余                                        for (int ksl = yifenp; ksl < yifenp + (pj / adminList.size()) - a.getHaveCount(); ksl++) {                                            if (ksl < not.size()) {                                                not.get(ksl).setAuditorId(a.getId());                                            }                                        }                                        yifenp += (pj / adminList.size()) - a.getHaveCount();                                    } else if (yifenp < zong) {//不足全给                                        for (int ksl = yifenp; ksl < zong; ksl++) {                                            if (ksl < not.size()) {                                                not.get(ksl).setAuditorId(a.getId());                                            }                                        }                                    }                                }                            }                            int a = 0;                            //ping jun zhi xiang tong                            for (int ksl = yifenp; ksl < zong; ksl++) {                                not.get(ksl).setAuditorId(adminList.get(a).getId());                                if (a == adminList.size() - 1) {                                    a = 0;                                } else {                                    a++;                                }                            }                        }                    } else {                        for (Admin a : adminList) {                            for (Integer b = i; b < fen; b++) {                                not.get(b).setAuditorId(a.getId());                            }                            i = fen;                            fen += zong / adminList.size();                        }                        if (yu != 0) {//分配剩余                            int d = 0;                            int zuid = adminList.size() - 1;                            for (Integer c = zong - yu; c < zong; c++) {                                not.get(c).setAuditorId(adminList.get(d).getId());                                if (d == zuid) {                                    d = 0;                                } else {                                    d++;                                }                            }                        }                    }                    if (not.size() < 30) {                        evaluationService.updateBatchById(not);                    } else {                        evaluationService.updateBatchById(not, not.size());                    }                }                //进行渠道指定分配            }        }    }    /**     * 打款分配     */  /*  public void evaluationTask(){        //查找所有未分配的认证列表        EntityWrapper<Evaluation> ew=new EntityWrapper<>();        ew.isNotNull("contract_id");        ew.eq("status",StatusEnum.WAITAUDIT.getTypeName());        ew.isNull("admin_id");       *//* List<Evaluation> evaluations=evaluationService.selectList(ew);        if(evaluations.isEmpty()){            return;        }*//*        //查找上线的管理员列表//        EntityWrapper<Admin> ewa=new EntityWrapper<>();//        ewa.eq("adminRoleId",3);//2审核员//        ewa.eq("status","上线");//1在线//        List<Admin> adminList=adminService.selectList(ewa);        Map map=new HashMap();        map.put("type",5);//5打款员        map.put("status","上线");        List<Map> adminList=adminService.selectAdminList(map);        int size=adminList.size();        int count=0;//商        int leftcount=0;//余数        if(!adminList.isEmpty()){            count=evaluations.size()/size;            leftcount=evaluations.size()%size;        }else {            return;        }        if(evaluations.size()>size){            for(int i=0,y=adminList.size();i<y;i++){                Map admin=adminList.get(i);                int m=i*count,n=m+count;//                if(i==y-1){//                    n+=leftcount;//                }                for(;m<n;m++){                    Evaluation evaluation=evaluations.get(m);                    evaluation.setAdminId(Integer.valueOf(String.valueOf(admin.get("id"))));                }            }            //分配剩下的余数            for (int i=0;i<leftcount;i++){                Evaluation evaluation=evaluations.get(size*count+i);                Integer index=new Random().nextInt(size);                Map admin=adminList.get(index);                evaluation.setAdminId(Integer.valueOf(String.valueOf(admin.get("id"))));            }        }else {            for(int i=0,y=evaluations.size();i<y;i++){                Integer index=new Random().nextInt(size);                Map admin=adminList.get(index);                Evaluation evaluation=evaluations.get(i);                evaluation.setAdminId(Integer.valueOf(String.valueOf(admin.get("id"))));            }        }      //  evaluationService.updateBatchById(evaluations);    }*/    /**     * 系统自动审核任务     */    public void AutomaticAudit() throws Exception {        System.out.println("*************");        //获得所有未审核的订单        EntityWrapper sysGlobalWrapper = new EntityWrapper();        sysGlobalWrapper.in("sys_keys", GlobalEnums.EXAMINE.getValue() + "," + GlobalEnums.Make.getValue());        sysGlobalWrapper.in("sys_name", GlobalEnums.Make.getKey() + "," + GlobalEnums.EXAMINE.getKey());        List<SysGlobal> sysGlobalList = sysGlobalService.selectList(sysGlobalWrapper);        if (sysGlobalList.size() == 2) {            for (SysGlobal sysGlobal : sysGlobalList) {                if (GlobalEnums.EXAMINE.getValue().equals(sysGlobal.getSysKeys()) && "1".equals(sysGlobal.getSysValues())) {                    Page<Evaluation> evaluation = evaluationService.selectPage(new Page(1, 5000), new EntityWrapper<Evaluation>().eq("status", EvaluationEnum.WAITCHECK.getTypeName()));                    //短信提醒                    //发送短信通知                    for (Evaluation ev : evaluation.getRecords()) {                        log.error("当前处理申请订单信息:"+ net.sf.json.JSONObject.fromObject(ev).toString());                        User user = userService.selectById(ev.getUserId());                        String conent = null, title = null;                        String checkType = null;                        String dx1 = "";                        String dx2 = "";                        String logTitle = "【申请单机审】";                        EntityWrapper<TianchuangOderThird>  evaluationEntityWrapper=new EntityWrapper<>();                        evaluationEntityWrapper.eq("evaluation_id",ev.getId());                        TianchuangOderThird tianchuangOderThird=tianchuangOderThirdService.selectOne(evaluationEntityWrapper);                        if (tianchuangOderThird==null){                            return;                        }                        TianZhenMessage tianZhenMessage= tianzhenMessageService.selectById(tianchuangOderThird.getTianchuangId());                        JSONObject jsonObject = RSMlAPI.tcpredict(tianZhenMessage.getTianzhenData());                        if ("0".equals(jsonObject.get("code"))) {                            JSONObject jsonData = jsonObject.getJSONObject("data");                            if ("pass".equals(jsonData.get("predict"))) {//通过                                log.error("REQ_C++ 通过审核:"+jsonData.toString());                                ev.setStatus(EvaluationEnum.WAITAUDIT.getTypeName());                                ev.setRefuseReason(EvaluationEnum.AUTOCHECKPASS.getTypeName());                                ev.setType(2);                                checkType = "2";                                title = "审核通过";                                conent = "您在我们平台申请的借贷业务已经审核通过，稍许会有打款人员联系您，请保持电话畅通。";                                dx1 = "通过";                                dx2 = "请保持电话畅通";                                logTitle = logTitle + "审核通过";                                evaluationService.Cashier(ev);//打款分配                                try {                                    //短信通知                                    if (user != null) {                                        Boolean sendsms = RSSmsUtils.sendsms(user.getPhone(), "", "42343");                                    }                                } catch (Exception e) {                                    e.printStackTrace();                                }                            } else if ("reject".equals(jsonData.get("predict").toString())) {//审核拒绝                                log.error("REQ_C++ 审核拒绝:"+jsonData.toString());                                ev.setStatus(EvaluationEnum.CHECKREFUSE.getTypeName());                                ev.setRefuseReason("风控F拒绝+"+EvaluationEnum.AUTOCHECKREFUSE.getTypeName());                                checkType = "3";                                title = "审核失败";                                conent = "对不起，您在我们平台申请的手机租赁业务没有通过审核";                                dx1 = "拒绝";                                dx2 = "三十天后可再次提交申请";                                logTitle = logTitle + "审核拒绝";                                try {                                    //短信通知                                    if (user != null) {                                        Boolean sendsms = RSSmsUtils.sendsms(user.getPhone(), "", "42344");                                    }                                } catch (Exception e) {                                    e.printStackTrace();                                }                            }                            /* evaluation.setType(2);*/                            ev.setReviewTime(new Date());                            ev.setType(2);                            log.error("当前处理申请订单信息之后信息:"+ net.sf.json.JSONObject.fromObject(ev).toString());                            evaluationService.updateById(ev);                            //发送 消息通知用户                            UserMessage userMessage = new UserMessage();                            userMessage.setUserId(ev.getUserId());                            userMessage.setContent(conent);                            userMessage.setType(checkType);                            userMessage.setStatus("2");                            userMessage.setTitle(title);                            userMessage.setGmtDatetime(new Date());                            userMessageService.insert(userMessage);                            log.error("已成功推送消息给:"+ net.sf.json.JSONObject.fromObject(userMessage).toString());                            //TODO 添加信息跟踪                            TrackLog log = new TrackLog();                            log.setTitle(logTitle);                            log.setType(1);                            log.setAdminId(null);                            log.setEvaluationId(ev.getId());                            log.seteStatus(ev.getStatus());                            log.setCreateTime(new Date());                            log.setStatus(1);                        } else {                            System.out.print("c++端出错：错误码：" + jsonObject.get("code") + System.currentTimeMillis());                            log.error("c++端出错返回信息：:"+ jsonObject.toString());                            //   return;                        }                    }                }                if (GlobalEnums.Make.getValue().equals(sysGlobal.getSysKeys()) && "1".equals(sysGlobal.getSysValues())) {                    List listQuota=new ArrayList();                    listQuota.add("min_quota");                    listQuota.add("stride");                    listQuota.add("max_quota");                    EntityWrapper entitySysGlobal=new EntityWrapper();                    entitySysGlobal.in("sys_keys",listQuota);                    List<SysGlobal> lListSysGloba = sysGlobalService.selectList(entitySysGlobal);                    Page<Evaluation> evaluation = evaluationService.selectPage(new Page(1, 5000), new EntityWrapper<Evaluation>().eq("status", EvaluationEnum.WAITAUDIT.getTypeName()));                    for (Evaluation ev : evaluation.getRecords()) {                        log.error("进入打款处理逻辑单次执行5000条当前执行信息:"+ net.sf.json.JSONObject.fromObject(ev).toString());                        Map<String, String> map = new HashMap();                        map.put("evaluationId", ev.getId().toString());                        User user=userService.selectById(ev.getUserId());                       Integer Amount_of_payment=0;                       Map SysGlobahashMap=new HashMap();                        for (SysGlobal sy:lListSysGloba){                            if("stride".equals(sy.getSysKeys())){                                SysGlobahashMap.put("stride",sy.getSysValues());                            }                            if("min_quota".equals(sy.getSysKeys())){                                SysGlobahashMap.put("min_quota",sy.getSysValues());                            }                            if("max_quota".equals(sy.getSysKeys())){                                SysGlobahashMap.put("max_quota",sy.getSysValues());                            }                        }                        Amount_of_payment=user.getFrequency()*Integer.valueOf(SysGlobahashMap.get("stride").toString());                       if (Amount_of_payment < Integer.valueOf(SysGlobahashMap.get("min_quota").toString())){                           Amount_of_payment=Integer.valueOf(SysGlobahashMap.get("min_quota").toString());                       }                       if (Amount_of_payment > Integer.valueOf(SysGlobahashMap.get("max_quota").toString())){                           Amount_of_payment=Integer.valueOf(SysGlobahashMap.get("max_quota").toString());                       }                        map.put("money",Amount_of_payment.toString());                        log.error("当前执行打款用户信息:"+ net.sf.json.JSONObject.fromObject(user).toString());                        log.error("应打款额度Amount_of_payment:"+Amount_of_payment);                        paymentUser(map);                    }                }            }        } else {            System.out.print("系统出错!!!");        }    }    public R paymentUser(Map<String, String> params) throws Exception {        log.error("已进入去打款实施逻辑："+ net.sf.json.JSONObject.fromObject(params).toString());        if (StringUtils.isBlank(params.get("evaluationId"))) {            log.error("申请单ID为空:");            return R.error("申请单ID为空");        }        if (StringUtils.isBlank(params.get("money"))) {            log.error("打款金额不能为空:");            return R.error("打款金额不能为空");        }        Evaluation evaluation = evaluationService.selectById(params.get("evaluationId"));        if (evaluation == null) {            log.error("申请单不存在evaluationId:"+params.get("evaluationId"));            return R.error("申请单不存在");        }        Order order = orderService.selectOne(new EntityWrapper<Order>()                .eq("evaluation_id", evaluation.getId())        );        if (order != null) {            log.error("该申请单已生成订单:"+ net.sf.json.JSONObject.fromObject(order).toString());            return R.error("该申请单已生成订单");        }        //打款金额        EntityWrapper<ParamSetting> psew = new EntityWrapper<>();        psew.eq("status", StatusEnum.USED.getTypeName());        ParamSetting paramSetting = paramSettingService.selectOne(psew);        // String payMoney=new String(ConfigUtil.decode(params.get("money")));//获取解密后的打款金额        //评估费        BigDecimal assessMoney = new BigDecimal(paramSetting.getAssessMoney());        log.error("生成评估费:"+ assessMoney);        //扣掉7天租金        BigDecimal rentDayPortion = new BigDecimal(paramSetting.getRentDayMoney()).multiply(new BigDecimal(params.get("money"))).multiply(new BigDecimal(7));//日租金比例/*paramSettingService.days*/        log.error("扣掉7天租金:"+ rentDayPortion);        //保证金        BigDecimal deposit = new BigDecimal(paramSetting.getCashPledge()).multiply(new BigDecimal(params.get("money")));        log.error("保证金:"+ rentDayPortion);        BigDecimal paysMoney = new BigDecimal(params.get("money")).subtract(rentDayPortion).subtract(deposit).subtract(assessMoney).setScale(2, BigDecimal.ROUND_HALF_UP);        log.error("最终到账:"+ paysMoney);        System.out.println("最终到账*****************：" + paysMoney.toString());        if (paysMoney.compareTo(new BigDecimal("5")) == -1) {            log.error("实际打款不能小于5元");            return R.error("实际打款不能小于5元");        }        BankCard bankCard = bankCardService.selectOne(new EntityWrapper<BankCard>()                .eq("user_id", evaluation.getUserId())                .eq("status", StatusEnum.USED.getTypeName())        );        if (bankCard == null) {            log.error("银行卡不存在:"+evaluation.getUserId());            return R.error("银行卡不存在");        }        if (EvaluationEnum.WAITAUDIT.getTypeName().equals(evaluation.getStatus())) {            Map<String, String> sumbit = Maps.newHashMap();            sumbit.put("card", bankCard.getBankCardNo());            sumbit.put("account", bankCard.getName());            sumbit.put("money", (paysMoney.multiply(new BigDecimal("100")).setScale(0, BigDecimal.ROUND_HALF_UP)).stripTrailingZeros().toPlainString());            sumbit.put("meno", "备注");            R r = FuYouUtils.payUser(sumbit);            log.error("打款返回：" + r.toString());            User user = userService.selectById(evaluation.getUserId());            //短信推送            try {                if (user != null) {                    //您的借款申请已打款                    Boolean sendsms = RSSmsUtils.sendsms(user.getPhone(), "", "42345");                    System.out.println(sendsms);                }            } catch (Exception e) {                e.printStackTrace();            }            if (RRUtils.assertCode(r, "0")) {                evaluation.setEvaluationPrice(new BigDecimal(params.get("money"))); //修改评估金额                evaluation.setRentMoney(new BigDecimal(params.get("money")));//设置回租价值                evaluation.setPayMoney(paysMoney); //应打金额                evaluation.setBatchNo(String.valueOf(r.get("orderId")));                //evaluation.setAdminId(null);//打款人                evaluation.setFinalMoney(paysMoney);                evaluation.setStatus(StatusEnum.WAITMONEY.getTypeName());                evaluation.setPayType(2);                evaluationService.updateById(evaluation);                //日租金                BigDecimal dayRent = evaluation.getEvaluationPrice().multiply(new BigDecimal(paramSetting.getRentDayMoney()));                //生成订单                order = new Order();                order.setEvaluationId(evaluation.getId());                order.setStatus(OrderStatusEnum.NOT_ARRIVAL.getTypeName());                order.setDayRent(dayRent);                order.setOrderNumber(OrderUtils.getOrderNo());                order.setGmtDatetime(new Date());                order.setDepositStatus(DepositStatusEnum.NOTREFUND.getDesc());                orderService.insert(order);                log.error("打款成功生成订单信息：" + net.sf.json.JSONObject.fromObject(order).toString());                TrackLog log = new TrackLog();                log.setTitle("【申请单】 打款机");                log.setType(1);                log.setAdminId(null);                log.setEvaluationId(evaluation.getId());                log.seteStatus(EvaluationEnum.PASS.getTypeName());                log.setoStatus(OrderStatusEnum.NOT_APPLYING.getTypeName());                log.setCreateTime(new Date());                log.setStatus(1);                trackLogService.insert(log);                return R.ok();            } else {                log.error("打款失败信息：" + net.sf.json.JSONObject.fromObject(r).toString());                return r;            }        }        log.error("申请单不符合打款条件，打款失败");        System.out.println("申请单不符合打款条件，打款失败");        return R.error("申请单不符合打款条件，打款失败");    }}