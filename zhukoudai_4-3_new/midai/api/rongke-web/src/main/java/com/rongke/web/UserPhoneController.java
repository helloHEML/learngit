package com.rongke.web;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.rongke.commons.JsonResp;/*import com.rongke.duntong.TongdunApi;*/import com.rongke.duntong.TongdunApi;import com.rongke.model.Admin;import com.rongke.model.Authentication;import com.rongke.model.UserContact;import com.rongke.model.UserPhone;import com.rongke.service.AdminService;import com.rongke.service.AuthenticationService;import com.rongke.service.UserContactService;import com.rongke.service.UserPhoneService;import com.rongke.utils.ConstantFactory;import com.rongke.utils.DateUtils;import com.rongke.utils.RSMohe;import com.rongke.utils.ans.R;import com.rongke.web.ans.config.SysReader;import com.rongke.web.saas.RSSmsUtils;import com.rongke.web.sms.SmsUtils;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.text.ParseException;import java.util.Date;import java.util.List;/** * @UserPhoneController * @Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/userPhone")@Transactional@CrossOriginpublic class UserPhoneController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private UserPhoneService userPhoneService;    @Autowired    private AdminService adminService;    @Autowired    private AuthenticationService authenticationService;//认证    @Autowired    private UserContactService userContactService;//通话记录    @Autowired    private SmsUtils sms;//短信    /**     * @添加     * @param userPhone     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addUserPhone(@RequestBody UserPhone userPhone){        log.debug("添加");        userPhone.setGmtDatetime(new Date());        userPhoneService.insert(userPhone);        return JsonResp.ok(userPhone);    }    /**     * @修改     * @param userPhone     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateUserPhone(@RequestBody UserPhone userPhone){        log.debug("修改");        userPhone.setUptDatetime(new Date());        userPhoneService.updateById(userPhone);        return JsonResp.ok(userPhone);    }    /**     * @根据id查找     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectUserPhone(Long id){        log.debug("查找");        UserPhone userPhone = userPhoneService.selectById(id);        //运营商认证 ：状态        return JsonResp.ok(userPhone);    }    /**     * @根据条件查找     * @param userPhone     * @return 返回值JsonResp     */    @RequestMapping(value = "/selectByCondition", method = RequestMethod.POST)    public JsonResp selectUserPhoneByCondition(@RequestBody UserPhone userPhone){        log.debug("根据条件查找");        if(userPhone==null)            return JsonResp.toFail("参数不能为空");        List<UserPhone> userPhoneList=userPhoneService.selectByCondition(userPhone);        return JsonResp.ok(userPhoneList);    }    /**     * 手动认证通过     */    @RequestMapping(value = "/toSuccess", method = RequestMethod.POST)    public R toSuccess(@RequestParam String id,String content){        log.debug("手动认证通过");        UserPhone userPhone = userPhoneService.selectById(id);        if(userPhone==null|| StringUtils.isBlank(userPhone.getTaskId())){            return R.error("该用户未进行认证");        }        //获得认证列表        Authentication user_id = authenticationService.selectOne(new EntityWrapper<Authentication>().eq("user_id", userPhone.getUserId()));        if(StringUtils.isNotBlank(user_id.getPhoneRecordAuth())){            Admin admin = adminService.findLoginUser();            String mark = "";            if(user_id.getPhoneRecordAuth().equals("0")){                return R.error("该用户未进行认证");            }else if(user_id.getPhoneRecordAuth().equals("1")){                return R.error("用户已认证");            }else if("2".equals(user_id.getPhoneRecordAuth())){//认证失败                mark = content;            }else if("3".equals(user_id.getPhoneRecordAuth())){//未回调                try {                    Long aLong = DateUtils.YYMMDDHHMMSSDate(new Date()).getTime()-DateUtils.YYMMDDHHMMSSDate(userPhone.getGmtDatetime()).getTime();                    if(aLong/1000<3600){                        return R.error("【运营商认证】 魔盒未回调，未超过2小时");                    }                } catch (ParseException e) {                    e.printStackTrace();                }                mark = "数据魔盒未回调";            }else{                return R.error("【运营商认证】 状态不正确");            }            user_id.setPhoneRecordAuth("1");//通过            user_id.setMarks("【运营商认证】手动通过。【手动原因】 "+mark+" 【操作人】"+admin.getName());            authenticationService.updateById(user_id);            if("未知".equals(userPhone.getNetAge())){                userPhone.setNetAge("未知:已通过");                userPhoneService.updateById(userPhone);            }            //发送短信通知            try {                //短信通知                Boolean sendsms = RSSmsUtils.sendsms(userPhone.getPhone(), "", "42340");            } catch (Exception e) {                e.printStackTrace();            }            return R.ok("通过");        } else {            return R.error("用户未进行认证");        }    }    /**     * 手动拒绝     */    @RequestMapping(value = "/toError", method = RequestMethod.POST)    public R toError(String id,String content){        log.debug("手动认证通过");        Admin admin = adminService.findLoginUser();        UserPhone userPhone = userPhoneService.selectById(id);        if(userPhone==null){            return R.error("该用户未进行认证");        }        //获得认证列表        Authentication user_id = authenticationService.selectOne(new EntityWrapper<Authentication>().eq("user_id", userPhone.getUserId()));        user_id.setPhoneRecordAuth("2");        user_id.setMarks("【运营商认证】手动拒绝; 【拒绝原因】"+content+"； 【操作人】 "+admin.getName());//设置失败理由        authenticationService.updateById(user_id);        if("未知".equals(userPhone.getNetAge())){            userPhone.setNetAge("未知:已拒绝");            userPhoneService.updateById(userPhone);        }        //发送短信通知        try {            //短信通知            Boolean sendsms = RSSmsUtils.sendsms(userPhone.getPhone(), "", "42341");        } catch (Exception e) {            e.printStackTrace();        }        return R.ok("拒绝成功");    }    /**     * 手动获取数据     */    @RequestMapping(value = "/toManual", method = RequestMethod.GET)    public R toManual(@RequestParam String id){        log.debug("手动获取数据");        UserPhone userPhone = userPhoneService.selectById(id);        if(userPhone==null){            return R.error("该用户未进行认证");        }        //获得数据//        JSONObject resultJO = TongdunApi.getAll(userPhone.getTaskId(),ConstantFactory.getConfig().getMoheCode(),ConstantFactory.getConfig().getMoheKey());        JSONObject resultJO = RSMohe.getAll(userPhone.getTaskId());        if(resultJO.getIntValue("code")==0){            //全部内容            JSONObject data = resultJO.getJSONObject("data");            //内容            JSONObject taskData = resultJO.getJSONObject("data").getJSONObject("task_data");            //账户信息            JSONObject accountInfo = taskData.getJSONObject("account_info");            //入网年龄            String netAge = accountInfo.getString("net_age");            if(netAge==null){                netAge="未知";            }            //记录账单信息            StringBuffer billInfoBuffer = new StringBuffer(""); //需要存储入表的账单记录字段            String billInfoString = taskData.getString("bill_info"); //账单费用            List<String> billInfoList = JSON.parseArray(billInfoString, String.class);            for (int i = 0; i < billInfoList.size(); i++ ) {                JSONObject billInfo = JSON.parseObject(billInfoList.get(i));                if (i != 0) {                    billInfoBuffer.append(",");                }                billInfoBuffer.append(billInfo.getString("bill_cycle") + ":" + billInfo.getString("bill_fee"));            }            userPhone.setNetAge(netAge);//入网年龄            userPhone.setBillFee(billInfoBuffer.toString());            userPhone.setOperatorName(data.getString("channel_src"));            userPhone.setAccountStar(accountInfo.getString("credit_level"));            userPhone.setAccountStatus(accountInfo.getString("mobile_status"));            userPhone.setAutonym(accountInfo.getString("real_info"));            userPhone.setAccountIntegral(accountInfo.getString("credit_point"));            userPhoneService.updateById(userPhone);            // 记录通话总时长和次数\            EntityWrapper<UserContact> wrapperContact = new EntityWrapper<>();            wrapperContact.eq("user_id", userPhone.getUserId());            List<UserContact> contacts = userContactService.selectList(wrapperContact);            JSONArray callInfoArray = JSONObject.parseArray(taskData.getString("call_info"));            System.err.println(callInfoArray.toJSONString());            if (callInfoArray.size() > 2) {                callInfoArray.remove(0);                callInfoArray.remove(0);            }            String callInfo = callInfoArray.toString();//                    List<String> ciList = JSON.parseArray(callInfo, String.class);            //计算每个号码的联系次数            String subString = "";            String str = "call_other_number";            if (!StringUtils.isEmpty(callInfo)) {                for (int idx = 0; (idx = callInfo.indexOf(str, idx)) != -1; idx += str.length()) {                    subString += callInfo.substring(idx, idx + str.length() + 14);                }            }            for (UserContact userContact : contacts) {                Integer callNum = 0; //记录总次数                callNum = StringUtils.countMatches(subString, userContact.getPhone());                userContact.setCallCount(callNum);            }            userContactService.updateBatchById(contacts);            return R.ok().put("data",userPhone);        }else{            return R.error(resultJO.getString("message"));        }    }    /**     * 状态     */    @RequestMapping(value = "/phoneAuthStatus", method = RequestMethod.GET)    public R phoneAuthStatus(@RequestParam String id){        Integer toSuccess = 1;        Integer toError = 1;        Integer toManual = 1;        String msg ="";        String remark ="";        log.debug("手动获取数据");        UserPhone userPhone = userPhoneService.selectById(id);        if(userPhone==null){            return R.error("该用户未进行认证");        }        Authentication user_id = authenticationService.selectOne(new EntityWrapper<Authentication>().eq("user_id", userPhone.getUserId()));        if("0".equals(user_id.getPhoneRecordAuth())){            toSuccess = 0;            toError = 0;            toManual = 0;            msg = "【运营商认证】  未进行";            remark = "暂无";        }else if("1".equals(user_id.getPhoneRecordAuth())){            toSuccess = 0;            toError = 0;            toManual = 0;            msg = "【运营商认证】  已认证";            if(StringUtils.isNotBlank(user_id.getMarks())){                remark = user_id.getMarks();            }else{                remark = "已认证";            }        }else if("2".equals(user_id.getPhoneRecordAuth())){//认证失败            toSuccess = 0;            toError = 0;            toManual = 1;            msg = "【运营商认证】  认证失败";            remark = user_id.getMarks();            if(StringUtils.isNotBlank(userPhone.getNetAge())){                toSuccess = 1;                toError = 0;                toManual = 0;            }        }else if("3".equals(user_id.getPhoneRecordAuth())){//没有回调            toSuccess = 0;            toError = 0;            toManual = 1;            msg = "【运营商认证】  结果未回调";            if(userPhone.getGmtDatetime()!=null){                remark = "创建时间："+DateUtils.dateSimpleSFM(userPhone.getGmtDatetime());            }else{                remark = "创建时间：未知";            }            if(StringUtils.isNotBlank(userPhone.getNetAge())){                toSuccess = 1;                toError = 1;                toManual = 0;            }        }        return R.ok(msg).put("remark",remark).put("toSuccess",toSuccess).put("toError",toError).put("toManual",toManual);    }    /**     * @静默数据拉取     * @param     * @return 返回值JsonResp     *///    @RequestMapping(value = "/getSilence", method = RequestMethod.GET)//    public JsonResp getSilence(String taskId){//        final String partnerMoheCode =ConstantFactory.getConfig().getMoheCode();// 数据魔盒合作方标识  /*tthz_mohe*///        final String partnerMoheKey  = ConstantFactory.getConfig().getMoheKey();//数据合作方密钥 c05eea63d3e74fff923f22a7070aafa9////        EntityWrapper<UserPhone> wrapper = new EntityWrapper<>();//        wrapper.eq("task_id",taskId);//        UserPhone userPhone = userPhoneService.selectOne(wrapper);//        JSONObject active = TongdunApi.activeMsg(taskId,partnerMoheCode,partnerMoheKey).getJSONObject("active_silence_stats");//        String silence3M3 = active.getString("continue_silence_day_over3_0call_active_3month");//        String silence3M6 = active.getString("continue_silence_day_over3_0call_active_6month");//        String silence15M3 = active.getString("continue_silence_day_over15_0call_active_3month");//        String silence15M6 = active.getString("continue_silence_day_over15_0call_active_6month");//////        userPhoneService.updateById(userPhone);////        return JsonResp.ok(userPhone);////    }}