package com.rongke.web;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.rongke.commons.JsonResp;import com.rongke.commons.PageDto;import com.rongke.enums.FileType;import com.rongke.enums.StatusEnum;import com.rongke.model.*;import com.rongke.service.*;import com.rongke.yibaoApi.BindCardApi;import com.rongke.yibaoModel.AuthBindCardBean;import com.rongke.youdun.UDNotifyResultProcessor;import org.apache.log4j.Logger;import org.apache.poi.xssf.usermodel.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.IOException;import java.security.NoSuchAlgorithmException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @BankCardController * @用户银行卡Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/bankCard")@Transactional@CrossOriginpublic class BankCardController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private BankCardService bankCardService;    @Autowired    private UserService userService;    @Autowired    private ProtocolService protocolService;    @Autowired    private AuthenticationService authenticationService;    @Resource    private UserIdentityService userIdentityService;    @Resource    private AdminService adminService;    @Autowired    private AdminRoleService adminRoleService;    /**     * @添加用户银行卡     * @param bankCard     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addBankCard(@RequestBody BankCard bankCard){        log.debug("添加用户银行卡");        User user=userService.selectCurrentUser();        //先查询用户是否有银行卡        //判断更换的银行卡是否存在        EntityWrapper<BankCard>  bcew = new EntityWrapper<>();        bcew.eq("bank_card_no",bankCard.getBankCardNo());        bcew.eq("status",StatusEnum.USED.getTypeName());        BankCard oldBankCard=bankCardService.selectOne(bcew);        if(oldBankCard!=null){            return JsonResp.fa("您已添加过该银行卡，请勿重复添加");        }        bankCard.setGmtDatetime(new Date());        bankCard.setUserId(user.getId());        bankCard.setStatus(StatusEnum.USED.getTypeName());        bankCardService.insert(bankCard);        return JsonResp.ok();    }    /**     * @查询银行卡     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp addBankCard(){          User user = userService.selectCurrentUser();        log.debug("获取银行卡信息");        //先查询该银行卡是否已有添加        EntityWrapper<BankCard>  bcew=new EntityWrapper<>();        bcew.eq("user_id",user.getId());        bcew.eq("status",StatusEnum.USED.getTypeName());        BankCard oldBankCard=bankCardService.selectOne(bcew);        return JsonResp.ok(oldBankCard);    }    /**     * 易宝银行卡认证     */    @RequestMapping(value = "/bankCardAuth1", method = RequestMethod.GET)    public JsonResp bankCardAuth1(HttpServletRequest request){        User user=userService.selectCurrentUser();        String bankcardno=request.getParameter("bankcardno");//卡号        String name=request.getParameter("name");//真实姓名        String idcardno=request.getParameter("idcardno");//身份证号        if(idcardno==null){            JsonResp.fa("银行卡号不能为空");            System.out.print("银行卡号为空"+idcardno);        }        String phone=request.getParameter("phone");        //判断认证银行卡与身份认证是否一致        EntityWrapper<UserIdentity> identityEntityWrapper = new EntityWrapper<>();        identityEntityWrapper.eq("user_id",user.getId());        System.out.print("银行卡认证用户id"+user.getId());        UserIdentity userIdentity = userIdentityService.selectOne(identityEntityWrapper);        if (!idcardno.equals(userIdentity.getIdentityNum())) {            return JsonResp.fa("银行卡、身份证认证信息不一致");        }        AuthBindCardBean authBindCardBean = new AuthBindCardBean();        authBindCardBean.setBankCardNo(bankcardno);//银行卡号        authBindCardBean.setPhone(user.getPhone());//手机号        authBindCardBean.setUserPhone(phone);//用户手机号        authBindCardBean.setIdCardNo(idcardno);//身份证号        authBindCardBean.setIssMs("true"); //是否发送短信验证        authBindCardBean.setUserName(name);//用户姓名        Map<String, Object>  resultMap= BindCardApi.authBindCardRequest(authBindCardBean);        /****************/        System.out.println("*************************"+resultMap);        if (resultMap.get("status").equals("TO_VALIDATE")) {            return JsonResp.ok(resultMap);        } else {            return JsonResp.fa(resultMap.get("errormsg").toString());        }    }    /**     * @return 返回值JsonResp     * @鉴权绑卡短信确认     */    @RequestMapping(value = "/bankCardAuth2", method = RequestMethod.GET)    public JsonResp bankCardAuth2(String code, String requestno, String phone, String bankcardno, String idcardno, String bankName) throws Exception {        System.out.println("22222222222222222222222222");        User user = userService.selectCurrentUser();        //先校验易宝鉴权绑卡的短信验证码        Map<String, String> resultMap = BindCardApi.authBindCardConfirm(code, requestno);        if (resultMap.get("status").equals("BIND_SUCCESS")) {            EntityWrapper<BankCard> ewBank = new EntityWrapper();            ewBank.eq("user_id", user.getId());            ewBank.eq("status", StatusEnum.USED.getTypeName());            BankCard userBank1 = bankCardService.selectOne(ewBank);            if (userBank1 != null) {//将之前认证银行卡状态改为废弃                userBank1.setStatus(StatusEnum.UNUSED.getTypeName());                userBank1.setUptDatetime(new Date());                bankCardService.updateById(userBank1);            }            BankCard userBank = new BankCard();            userBank.setUserId(user.getId());            userBank.setBankCardNo(bankcardno);            userBank.setBankCardCode(resultMap.get("bankcode"));            if("邮政储蓄银行".equals(bankName) || "邮储银行".equals(bankName)){                bankName="中国邮政储蓄银行";            }            userBank.setName(user.getRealName());            userBank.setIdCardNo(idcardno);            userBank.setBankCardName(bankName);            userBank.setPhone(phone);            userBank.setGmtDatetime(new Date());            userBank.setStatus(StatusEnum.USED.getTypeName());            bankCardService.insert(userBank);            Authentication authentication = new Authentication();            EntityWrapper auew = new EntityWrapper();            auew.eq("user_id", user.getId());            authentication.setBankCardAuth("1");            authenticationService.update(authentication,auew);            return JsonResp.ok();        }        return JsonResp.fa("短信校验异常");    }    /**     * @return 返回值JsonResp     * @有盾银行卡认证     */    @RequestMapping(value = "/bankCardAuth", method = RequestMethod.GET)    public JsonResp bankCardAuth(HttpServletRequest request) throws IOException, NoSuchAlgorithmException {        User user=userService.selectCurrentUser();        String bankcardno=request.getParameter("bankcardno");//卡号        String name=request.getParameter("name");//真实姓名        String idcardno=request.getParameter("idcardno");//身份证号        if(idcardno==null){            JsonResp.fa("银行卡号不能为空");            System.out.print("银行卡号为空"+idcardno);        }        String phone=request.getParameter("phone");        //判断认证银行卡与身份认证是否一致        EntityWrapper<UserIdentity> identityEntityWrapper = new EntityWrapper<>();        identityEntityWrapper.eq("user_id",user.getId());        System.out.print("银行卡认证用户id"+user.getId());        UserIdentity userIdentity = userIdentityService.selectOne(identityEntityWrapper);        if (!idcardno.equals(userIdentity.getIdentityNum())) {            return JsonResp.fa("银行卡、身份证认证信息不一致");        }        String pubKey="";//8ae2a1fd-530f-4141-a527-adf948d6501c        String securityKey=""; //b85fb58e-0e0b-427f-ab5b-9aac815658ee        Map<String,String> map = new HashMap<>();        map.put("id_name",name);        map.put("bank_card_no",bankcardno);        map.put("id_no",idcardno);        map.put("mobile",phone);        map.put("req_type","01");        JSONObject jo = UDNotifyResultProcessor.youDunBank4(JSON.toJSONString(map),pubKey,securityKey);        String ret_code = jo.getJSONObject("header").getString("ret_code");        JSONObject bodyJO = jo.getJSONObject("body");        if("000000".equals(ret_code)){            String status = bodyJO.getString("status");            if("1".equals(status)){                String bankCardName=bodyJO.getString("org_name");                String bankCardCode=bodyJO.getString("org_code");                //判断之前是否已认证                EntityWrapper<BankCard> ewBank = new EntityWrapper();                ewBank.eq("user_id", user.getId());                ewBank.eq("status", StatusEnum.USED.getTypeName());                BankCard userBank1 = bankCardService.selectOne(ewBank);                if (userBank1 != null) {//将之前认证银行卡状态改为废弃                    userBank1.setStatus(StatusEnum.UNUSED.getTypeName());                    userBank1.setUptDatetime(new Date());                    bankCardService.updateById(userBank1);                }                BankCard userBank = new BankCard();                userBank.setUserId(user.getId());                userBank.setBankCardNo(bankcardno);                userBank.setBankCardCode(bankCardCode);                if("邮政储蓄银行".equals(bankCardName) || "邮储银行".equals(bankCardName)){                    bankCardName="中国邮政储蓄银行";                }                userBank.setName(name);                userBank.setIdCardNo(idcardno);                userBank.setBankCardName(bankCardName);                userBank.setPhone(phone);                userBank.setGmtDatetime(new Date());                userBank.setStatus(StatusEnum.USED.getTypeName());                bankCardService.insert(userBank);                //绑卡//                String requestno= RandomStringUtils.random(64,true,true);//               Map map1= PaperOrder.authbindcardrequest(requestno,String.valueOf(user.getId()),"USER_ID",bankcardno,idcardno,"ID",name,phone,"true",new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()),"COMMON_FOUR");                Authentication authentication = new Authentication();                EntityWrapper auew = new EntityWrapper();                auew.eq("user_id", user.getId());                authentication.setBankCardAuth("1");                authenticationService.update(authentication,auew);                return JsonResp.ok();            }else {                return JsonResp.fa(bodyJO.getString("message"));            }        }else {            return JsonResp.fa(jo.getJSONObject("header").getString("ret_msg"));        }    }    /**     * @param     * @return 返回值JsonResp     * @根据id查找     */    @RequestMapping(value = "/findByPage", method = RequestMethod.GET)    public JsonResp findByPage(Integer pageNo, Integer pageSize,String realName,String time){        log.debug("分页查找银行卡认证信息");        Admin admin=adminService.findLoginUser();        AdminRole adminRole=adminRoleService.selectById(admin.getAdminRoleId());        Page page = new Page(pageNo,pageSize);        EntityWrapper<BankCard> entityWrapper = new EntityWrapper<>();        if (!realName.equals("")) {            entityWrapper.like("name",realName);        }        Page page1 = null;        String time1="",time2="";        if(adminRole.getType()==1) {//如果是审核员角色则根据角色来查询数据            Map map=new HashMap();            map.put("name",realName);            map.put("startIndex",(pageNo-1)*pageSize);            map.put("size",pageSize);            map.put("status",StatusEnum.USED.getTypeName());            map.put("adminId",admin.getId());            if(time!=null && !"".equals(time)){                String[] array = time.split("~");                time1 = array[0];                time2 = array[1];            }            map.put("time1",time1);            map.put("time2",time2);            List<BankCard> bankCards=bankCardService.selectByPage(map);            Integer size=bankCardService.selectCount(map);            page1=new Page();            page1.setRecords(bankCards);            page1.setTotal(size);        }else {            entityWrapper.eq("status",StatusEnum.USED.getTypeName());            if(time!=null && !"".equals(time)){                String[] array = time.split("~");                time1 = array[0];                time2 = array[1];                entityWrapper.where("datediff(gmt_datetime,'"+time2+"')<=0").where("datediff(gmt_datetime,'"+time1+"')>=0");            }            entityWrapper.orderBy("gmt_datetime",false);            page1=bankCardService.selectPage(page,entityWrapper);        }        entityWrapper.orderBy("gmt_datetime",false);        return JsonResp.ok(new PageDto(pageNo,pageSize,page1.getRecords(),page1.getTotal()));    }    /**     * @param     * @return 返回值JsonResp     * @根据id查找     */    @RequestMapping(value = "/findMyBank", method = RequestMethod.GET)    public JsonResp findMyBank(){        log.debug("查询我的银行卡(还款银行卡)");        User user = userService.selectCurrentUser();        EntityWrapper<BankCard> entityWrapper = new EntityWrapper<>();        entityWrapper.eq("user_id",user.getId());        entityWrapper.eq("status",StatusEnum.USED.getTypeName());        return JsonResp.ok(bankCardService.selectList(entityWrapper));    }    /**     * @param     * @return 生成excel     */    @RequestMapping(value = "/makeExcle", method = RequestMethod.GET)    public JsonResp makeExcle(HttpServletRequest request, HttpServletResponse response, String realName,String time) throws IOException {        // TODO Auto-generated method stub        EntityWrapper<BankCard> entityWrapper = new EntityWrapper<>();        if (!realName.equals("")) {            entityWrapper.like("name",realName);        }        String time1="",time2="";        if(time!=null && !"".equals(time)){            String[] array = time.split("~");            time1 = array[0];            time2 = array[1];            entityWrapper.where("datediff(gmt_datetime,'"+time2+"')<=0").where("datediff(gmt_datetime,'"+time1+"')>=0");        }        List<BankCard> list = bankCardService.selectList(entityWrapper);        if (list.isEmpty()) {            return JsonResp.fa("未选择导出数据");        }        XSSFWorkbook excelbook = new XSSFWorkbook(); //创建workBook        XSSFSheet excelSheet = excelbook.createSheet();//创建sheet表        XSSFRow excelRow = excelSheet.createRow(0);//创建第一行        XSSFCellStyle headerStyle = excelbook.createCellStyle();//设置 居中        headerStyle.setAlignment(XSSFCellStyle.ALIGN_CENTER);        //接下来是创建 列标题 ,cell的起始值是 0,可创建n个列标题        String[] Title = { "银行卡号码", "用户姓名", "预留手机号", "身份证号","认证时间"};        for(int a=0;a<Title.length;a++){            XSSFCell cell = excelRow.createCell(a);            cell.setCellStyle(headerStyle);//居中            cell.setCellValue(Title[a]);        }        //接下来遍历List,并写入EXCEL中        for(int i = 0; i < list.size(); i++) {            //创建行,行号应从1开始,因为表头行(列标题)占据了第0行            excelRow = excelSheet.createRow(i + 1);            //将该行每一列的数据写入,可写n列            BankCard bankCard = list.get(i); // List 的起始值是0            excelRow.createCell(0).setCellValue(bankCard.getBankCardName());            excelRow.createCell(1).setCellValue(bankCard.getName());            excelRow.createCell(2).setCellValue(bankCard.getPhone());            excelRow.createCell(3).setCellValue(bankCard.getIdCardNo());            excelRow.createCell(4).setCellValue(new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(bankCard.getGmtDatetime()));        }        String fileanme = "银行卡认证";        String date = new SimpleDateFormat("yyyyMMdd").format(new Date());        FileType fileType = FileType.XLS;        String path = fileType.getAbsolutePath();        String filePath = path + File.separator+fileanme+date+".xls";        log.info("filePath"+filePath);        EvaluationController.writeExcel(request,response, excelbook, filePath, "文件名");//具体导出的方法        String url = request.getRequestURL().toString().split("api")[0]+"/pic/xls/"+File.separator+fileanme+date+".xls";        return JsonResp.ok(url);    }    /**     *  有盾     */    public static void main(String[] args) throws NoSuchAlgorithmException {    }}