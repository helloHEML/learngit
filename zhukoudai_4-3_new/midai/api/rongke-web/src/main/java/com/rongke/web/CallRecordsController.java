package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.rongke.commons.JsonResp;import com.rongke.commons.PageDto;import com.rongke.model.CallRecords;import com.rongke.model.UserPhoneRecord;import com.rongke.service.CallRecordsService;import com.rongke.service.UserPhoneRecordService;import com.rongke.service.UserService;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @CallRecordsController * @用户通话记录Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/callRecords")@Transactional@CrossOriginpublic class CallRecordsController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private CallRecordsService callRecordsService;    @Autowired    private UserPhoneRecordService userPhoneRecordService;    @Autowired    private UserService userService;    /**     * @添加用户通话记录     * @param callRecords     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addCallRecords(@RequestBody CallRecords callRecords){        log.debug("添加用户通话记录");        callRecordsService.insert(callRecords);        return JsonResp.ok(callRecords);    }    /**     * @修改用户通话记录     * @param callRecords     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateCallRecords(@RequestBody CallRecords callRecords){        log.debug("修改用户通话记录");        callRecordsService.updateById(callRecords);        return JsonResp.ok(callRecords);    }    /**     * @根据id查找用户通话记录     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectCallRecords(Long id){        log.debug("查找用户通话记录");        CallRecords callRecords = callRecordsService.selectById(id);        return JsonResp.ok(callRecords);    }    /**     * @出现用户通话记录     * @param     * @return 返回值JsonResp     */    @RequestMapping(value="/findCallRecordByUser", method = RequestMethod.GET)    public JsonResp findCallRecordByUser(Long userId, Page page, String phone, String userName){        log.debug("查找用户通话记录");        EntityWrapper<CallRecords> wrapper = new EntityWrapper<>();        wrapper.eq("user_id",userId);        if (!userName.equals("")) {            wrapper.like("user_name",userName);        }        if (!phone.equals("")) {            wrapper.eq("phone",phone);        }        Page page1 = callRecordsService.selectPage(page,wrapper);        return JsonResp.ok(new PageDto(page1.getCurrent(),page1.getSize(),page1.getRecords(),page1.getTotal()));    }    /**     * 查询用户通话记录，并记录     * @param userId     * @return     */    @RequestMapping(value="/findTopCallRecords", method = RequestMethod.GET)    public JsonResp findTopCallRecords(Long userId){        Map returnMap = new HashMap<>();        EntityWrapper<CallRecords> wrapper = new EntityWrapper<>();        wrapper.eq("user_id",userId);        List<CallRecords> callRecordses = callRecordsService.selectList(wrapper);        if (!callRecordses.isEmpty()) {            //说明通话记录被筛选存储了            returnMap.put("key",true);            return JsonResp.ok(returnMap);        }        //统计筛选后的记录信息        List<CallRecords> list2 = new ArrayList<>();        //按照通话时长升序查询出通话电话号码        List<String> phones = userPhoneRecordService.selectConnTimeTop(userId);        Map<String,Object> map = new HashMap<>();        map.put("callType","主叫");        map.put("userId",userId);        List<UserPhoneRecord> list = userPhoneRecordService.selectByUserId(map);//主叫统计        map.put("callType","被叫");        List<UserPhoneRecord> list1 = userPhoneRecordService.selectByUserId(map); //被叫统计        //合并主被叫记录        for (int i = 0; i < phones.size(); i++) {            CallRecords callRecords = new CallRecords();            callRecords.setPhone(phones.get(i));            callRecords.setId(new Long(i));            callRecords.setCallTimeZ("0");            callRecords.setCallCountZ(0);            callRecords.setCallTimeB("0");            callRecords.setCallCountB(0);            for (UserPhoneRecord up : list) {                if (phones.get(i).equals(up.getPhone())) {                    callRecords.setCallTimeZ(up.getConnTimes());                    callRecords.setCallCountZ(Integer.valueOf(up.getCallTimes()));                    if (up.getpUserId() != null   && up.getListUserId() != null && up.getListUserId().equals(userId.toString())) {                        callRecords.setpUserId(up.getpUserId());                        callRecords.setLink(up.getLink());                        callRecords.setUserName(up.getUserName());                    }                    break;                }            }            for (UserPhoneRecord up : list1) {                if (phones.get(i).equals(up.getPhone())) {                    callRecords.setCallTimeB(up.getConnTimes());                    callRecords.setCallCountB(Integer.valueOf(up.getCallTimes()));                    if (up.getpUserId() != null  && up.getListUserId() != null && up.getListUserId().equals(userId.toString())) {                        callRecords.setpUserId(up.getpUserId());                        callRecords.setLink(up.getLink());                        callRecords.setUserName(up.getUserName());                    }                    break;                }            }            callRecords.setUserId(userId);            list2.add(callRecords);        }        if (!list2.isEmpty()) {            callRecordsService.saveCallRecords(list2);        }        returnMap.put("key",false);        return JsonResp.ok(returnMap);    }}