package com.rongke.web;import com.rongke.commons.JsonResp;import com.rongke.model.AdminPermission;import com.rongke.rediscluster.CacheUtil;import com.rongke.service.AdminPermissionService;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @AdminPermissionController * @Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/adminPermission")@Transactional@CrossOriginpublic class AdminPermissionController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private AdminPermissionService adminPermissionService;    @Autowired    private CacheUtil redisClusterCache;    /**     * @添加     * @param adminPermission     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addAdminPermission(@RequestBody AdminPermission adminPermission){        log.debug("添加");        adminPermissionService.insert(adminPermission);        return JsonResp.ok(adminPermission);    }    /**     * @修改     * @param adminPermission     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateAdminPermission(@RequestBody AdminPermission adminPermission){        log.debug("修改");        adminPermissionService.updateById(adminPermission);        return JsonResp.ok(adminPermission);    }    /**     * @所有目录列表     * @param roleId     * @return 返回值JsonResp     */    @RequestMapping(value="/selectMenus", method = RequestMethod.GET)    public JsonResp selectMenus(Integer roleId){        log.debug("所有目录列表");        List<Map> menumaps=null;        //查询该角色下的所有目录列表        List<Integer> adminRolePermissionsIds =null;        if(roleId!=null){            //如果缓存中有  直接从缓存中获取            if(redisClusterCache.hasKey("menuList"+roleId)){                try {                    menumaps=redisClusterCache.getCache("menuList"+roleId);                } catch (Exception e) {                    e.printStackTrace();                }                return JsonResp.ok(menumaps);            }            adminRolePermissionsIds=adminPermissionService.selectMenus(roleId);        }else {            //如果缓存中有  直接从缓存中获取            if(redisClusterCache.hasKey("menuList")){                try {                    menumaps=redisClusterCache.getCache("menuList");                } catch (Exception e) {                    e.printStackTrace();                }                return JsonResp.ok(menumaps);            }        }        //查询所有目录列表        List<AdminPermission> adminPermissions=adminPermissionService.selectList(null);        if(adminRolePermissionsIds==null){            menumaps=new ArrayList<>();            for(int i=0,y=adminPermissions.size();i<y;i++){                AdminPermission ap=adminPermissions.get(i);                Map map=new HashMap();                map.put("id",ap.getId());                map.put("pId",ap.getParentid());                map.put("name",ap.getName());                map.put("checked",false);                if(0==ap.getParentid()){                    map.put("open",true);                }                menumaps.add(map);            }            //放入缓存            try {                redisClusterCache.putCache("menuList",menumaps);            } catch (Exception e) {                e.printStackTrace();            }        }else {            menumaps=new ArrayList<>();            for(int i=0,y=adminPermissions.size();i<y;i++){                AdminPermission ap=adminPermissions.get(i);                Map map=new HashMap();                map.put("id",ap.getId());                map.put("pId",ap.getParentid());                map.put("name",ap.getName());                if(0==ap.getParentid()){                    map.put("open",true);                }else {                   if(adminRolePermissionsIds.contains(ap.getId())){                       map.put("checked",true);                   }else {                       map.put("checked",false);                   }                }                menumaps.add(map);            }            //放入缓存            try {                redisClusterCache.putCache("menuList"+roleId,menumaps);            } catch (Exception e) {                e.printStackTrace();            }        }        return JsonResp.ok(menumaps);    }}