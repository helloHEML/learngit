package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.rongke.commons.JsonResp;import com.rongke.mapper.UserMessageMapper;import com.rongke.model.User;import com.rongke.model.UserMessage;import com.rongke.service.UserMessageService;import com.rongke.service.UserService;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.math.BigInteger;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @UserMessageController * @用户消息Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/userMessage")@Transactional@CrossOriginpublic class UserMessageController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private UserMessageService userMessageService;    @Autowired    private UserService userService;    /**     * @添加用户消息     * @param userMessage     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addUserMessage(@RequestBody UserMessage userMessage){        log.debug("添加用户消息");        userMessage.setGmtDatetime(new Date());        userMessageService.insert(userMessage);        return JsonResp.ok(userMessage);    }    /**     * @修改用户消息     * @param userMessage     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateUserMessage(@RequestBody UserMessage userMessage){        log.debug("修改用户消息");        userMessage.setUptDatetime(new Date());        userMessageService.updateById(userMessage);        return JsonResp.ok(userMessage);    }    /**     * @根据id查找用户消息     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectUserMessage(Long id){        log.debug("查找用户消息");        UserMessage userMessage = userMessageService.selectById(id);        return JsonResp.ok(userMessage);    }    /**     * @根据条件查找用户消息     * @param userMessage     * @return 返回值JsonResp     */    @RequestMapping(value = "/selectByCondition", method = RequestMethod.POST)    public JsonResp selectUserMessageByCondition(@RequestBody UserMessage userMessage){        log.debug("根据条件查找用户消息");        if(userMessage==null)            return JsonResp.toFail("参数不能为空");        List<UserMessage> userMessageList=userMessageService.selectByCondition(userMessage);        return JsonResp.ok(userMessageList);    }    /**     * @当前登录用户的消息信息列表     * @param     * @return 返回值JsonResp     */    @RequestMapping(value="/selectListByUser", method = RequestMethod.GET)    public JsonResp selectListByUser(int page,int size){        if(page==0){            page = 1;        }        if(size==0){            size=10;        }        log.debug("当前登录用户的推送信息列表");        User user = userService.selectCurrentUser();        //获得分页列表        EntityWrapper<UserMessage> wrapper = new EntityWrapper<UserMessage>();        wrapper.eq("user_id",31);       // wrapper.orderDesc();        Page<UserMessage> userMessagePage = userMessageService.selectPage(new Page<UserMessage>(page,size),wrapper);        return JsonResp.ok(userMessagePage);    }}