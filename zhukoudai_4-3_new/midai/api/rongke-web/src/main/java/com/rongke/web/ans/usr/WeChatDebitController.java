package com.rongke.web.ans.usr;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.google.common.collect.Maps;import com.rongke.model.ans.TblAccountEntity;import com.rongke.model.ans.UserDebitEntity;import com.rongke.model.ans.WxBandcardEntity;import com.rongke.model.ans.WxDebittipEntity;import com.rongke.service.BankCardService;import com.rongke.service.ans.sys.TblAccountService;import com.rongke.service.ans.sys.UserDebitService;import com.rongke.service.ans.sys.WxBandcardService;import com.rongke.service.ans.sys.WxDebittipService;import com.rongke.service.ans.usr.WeChatUserService;import com.rongke.service.impl.ans.utils.UserDebitUtils;import com.rongke.utils.DateUtils;import com.rongke.utils.StringUtil;import com.rongke.utils.ans.MapUtils;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.R;import com.rongke.utils.ans.StringEncodingUtil;import com.rongke.web.ans.conterver.Debit2DebitVO;import com.rongke.web.ans.utils.YiBaoUtils;import com.rongke.web.ans.vo.DebitVO;import com.rongke.web.yibao.PaperOrder;import com.rongke.web.yibao.YeepayService;import com.yeepay.g3.facade.yop.ca.dto.DigitalEnvelopeDTO;import com.yeepay.g3.facade.yop.ca.enums.CertTypeEnum;import com.yeepay.g3.frame.yop.ca.DigitalEnvelopeUtils;import com.yeepay.g3.sdk.yop.utils.InternalConfig;import com.yeepay.shade.org.apache.commons.lang3.RandomStringUtils;import com.yeepay.shade.org.springframework.web.bind.annotation.RequestBody;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import javax.servlet.http.HttpServletRequest;import java.math.BigDecimal;import java.security.PrivateKey;import java.security.PublicKey;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @author Ans * @email 867917319@qq.com * @date 2018-08-16 18:53:30 */@RestController@RequestMapping("api/userdebit")public class WeChatDebitController {    @Autowired    private UserDebitService userDebitService;      //借条service    @Autowired    private WeChatUserService weChatUserService;    //用户service    @Autowired    private WxBandcardService wxBandcardService;    //用户银行卡    @Autowired    private TblAccountService tblAccountService;    //查询用户    @Autowired    private WxDebittipService wxDebittipService;    //微信服务费    /**     * 获取借条个人     */    @RequestMapping("/list")    public R list(@RequestParam Map<String, Object> params){        TblAccountEntity tblAccountEntity = weChatUserService.selectWechatUser();        params.put("accountID",tblAccountEntity.getAccountId());        PageUtils page = weChatUserService.userDebit(params,tblAccountEntity);        return R.ok().put("data",page.getList()).put("totle",page.getTotalCount());    }    /**     * 确认/驳回 删除     * type 1 确认 2 驳回 3 删除     */    @RequestMapping("/ConfirmOrCancel")    public R ConfirmOrCancel(@RequestParam("id") String id,Integer type){        TblAccountEntity account = weChatUserService.selectWechatUser();        UserDebitEntity userDebitEntity = userDebitService.selectOne(new EntityWrapper<UserDebitEntity>().                eq("id", id).and("((WeChatUser_ID={0} AND type=2)",account.getAccountId())                .or("(targetId = {0} AND type=1))",account.getAccountId()));        if(userDebitEntity==null){            return R.error("该借条不存在");        }        if(userDebitEntity.getDebitstatus()!=1){            return  R.error("订单状态不正确");        }        boolean result = true;        if(type==null){            type = 1;        }        if(type==1){            //确认            userDebitEntity.setDebitstatus(2);//同意(还款中)            result = userDebitService.updateById(userDebitEntity);        }else if(type==2){            //驳回            userDebitEntity.setDebitstatus(3);//已驳回            result = userDebitService.updateById(userDebitEntity);        }else if(type==3){            //删除            userDebitEntity.setDebitstatus(88);            result = userDebitService.updateById(userDebitEntity);        }        return R.ok().put("data",userDebitEntity.getDebitstatus());    }    /**     * 借条详情     */    @RequestMapping("/details")    public R details(@RequestParam("id") String id){        //获得用户信息        TblAccountEntity tblAccountEntity = weChatUserService.selectWechatUser();        //获取借条信息        UserDebitEntity userDebitEntity = userDebitService.selectOne(new EntityWrapper<UserDebitEntity>().                eq("id", id));        if(userDebitEntity==null){            return R.error("借条存在");        }        return  R.ok().put("data",userDebitEntity);    }    /**     * 添加借条     */    @RequestMapping("/save")    public R save(UserDebitEntity userDebitEntity,@RequestParam String serviceMoney){        //登陆人信息数据        TblAccountEntity tblAccountEntity = weChatUserService.selectWechatUser();        boolean insert=false;        if(userDebitEntity.getId()==null||userDebitEntity.getId()==0){            //获得目标人            TblAccountEntity account= tblAccountService.selectOne(new EntityWrapper<TblAccountEntity>().                    eq("Account_Name",userDebitEntity.getTargetname()));            //查询目标是否实名认证            int i = wxBandcardService.selectCount(new EntityWrapper<WxBandcardEntity>()                    .eq("Account_ID", account.getAccountId()));            if(i==0){                return R.error("对方未实名认证");            }            if(account==null){                String name = userDebitEntity.getType().equals("1")?"出借人不存在":"借款人不存在";                return R.error(name);            }            if(account.getAccountId().equals(tblAccountEntity.getAccountId())){                return R.error("不能向自己发起借条");            }            if("1".equals(userDebitEntity.getType())){                userDebitEntity.setTyperemark("借入条");            }else{                userDebitEntity.setTyperemark("出借条");            }            userDebitEntity.setServiceMoney(new BigDecimal(serviceMoney));            userDebitEntity.setWechatuserName(tblAccountEntity.getAccountName());//发起人当前姓名            userDebitEntity.setOrderId("JTDE"+StringEncodingUtil.createNewId());//订单ID            userDebitEntity.setSurplusMoney(userDebitEntity.getHuankuan());//剩余金额            userDebitEntity.setTargetid(account.getAccountId());//绑定目标人ID            userDebitEntity.setWechatuserId(tblAccountEntity.getAccountId());//发起人ID            userDebitEntity.setCreateTime(new Date());//创建时间            userDebitEntity.setUpdateTime(new Date());//修改时间            userDebitEntity.setPaydebit(1); //1 未支付服务费 2 已支付服务费 3 已退回服务费            userDebitEntity.setDebitstatus(1);//1 待确认            insert = userDebitService.insert(userDebitEntity);        }else{            userDebitEntity = userDebitService.selectById(userDebitEntity.getId());            if(userDebitEntity==null){                return R.error("借条不存在");            }        }        //TODO 发起易宝支付扣除服务费        //获得银行卡        WxBandcardEntity account_id = wxBandcardService.selectOne(new EntityWrapper<WxBandcardEntity>().eq("Account_ID", tblAccountEntity.getAccountId()));        R phone = YiBaoUtils.bankCardFind(account_id.getPhone(), "PHONE");        if(((Integer)phone.get("code"))!=0){            return R.error("请绑定银行卡");        }        String cardtop=null,cardlast=null;        JSONObject json= JSON.parseObject(JSON.toJSONString(phone.get("data")));        cardtop=json.getString("cardtop");//拿第一张卡 （前六位）        cardlast=json.getString("cardlast");//卡号后六位        String requestno = userDebitEntity.getOrderId();//支付号        String callbackurl= "http://app.yrrzzl.com/api/userdebit/callback";//支付后回调地址        System.err.println(callbackurl);        Map<String, String> map = null;        map = PaperOrder.unibindcardpay(requestno,"false",account_id.getPhone(),"PHONE",cardtop,cardlast,                userDebitEntity.getServiceMoney().toString(),"借条服务费",callbackurl,                new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()),"SQKKSCENE10");        System.err.println(map.toString());        if(insert){            return R.ok("成功").put("data",userDebitEntity);//1易宝付款 2余额扣款        }else{            return R.error("失败");        }    }    /**     * 取消借条     */    @RequestMapping("/cancel")    public R cancel(@RequestBody UserDebitEntity userDebitEntity){        if(userDebitEntity.getId()==null){            return R.error("借条ID不能为空");        }        //登陆人信息数据        TblAccountEntity tblAccountEntity = weChatUserService.selectWechatUser();        //获得借条信息        UserDebitEntity weChatUser_id = userDebitService.selectOne(new EntityWrapper<UserDebitEntity>().                eq("WeChatUser_ID", userDebitEntity.getId()));        if(weChatUser_id==null){            return R.error("借条不存在");        }        if(!weChatUser_id.getWechatuserId().equals(tblAccountEntity.getAccountId())){            return R.error("仅限取消自己的借条");        }        if(weChatUser_id.getPaydebit()==2&&                DateUtils.DaysubDay(DateUtils.dateSimpleSFM(weChatUser_id.getCreateTime()),DateUtils.dateSimpleSFM(new Date()))>7){            //给用户退款//            tblAccountEntity.setAccountBalance(new BigDecimal());        }        return R.ok();    }    /**     * 待还/待收 金额 统计页面     */    @RequestMapping("/SCMoney")    public R SCMoney(@RequestParam String isType){        return weChatUserService.StillANDCollectMoney(isType);    }    /**     * 待还/待收 金额 统计页面列表     */    @RequestMapping("/DebitSCList")    public R SCMoneyList(@RequestParam Map<String,Object> params){        //登陆用户        TblAccountEntity tblAccountEntity = weChatUserService.selectWechatUser();        //获得内容        if(StringUtils.isBlank((String) params.get("isType"))){            params.put("isType","1");        }        params.put("accountID",tblAccountEntity.getAccountId());//设置查询人        PageUtils pageUtils = weChatUserService.userDebit(params,tblAccountEntity);//获得信息        //转换VO对象        List<DebitVO> converter = Debit2DebitVO.converter((List<UserDebitEntity>) pageUtils.getList());        return R.ok().put("total",pageUtils.getTotalCount()).put("data",converter);    }    /**     * 借条服务费回调     */    @RequestMapping("/callback")    public String callback(HttpServletRequest request){        Map<String, String> params = new HashMap<>();        String response=request.getParameter("response");        DigitalEnvelopeDTO dto = new DigitalEnvelopeDTO();        dto.setCipherText(response);        PrivateKey privateKey = InternalConfig.getISVPrivateKey(CertTypeEnum.RSA2048);        PublicKey publicKey = InternalConfig.getYopPublicKey(CertTypeEnum.RSA2048);        dto = DigitalEnvelopeUtils.decrypt(dto, privateKey, publicKey);        params= YeepayService.parseResponse(dto.getPlainText());        System.out.println(params);        if(StringUtil.isEmpty(params.get("errorcode")) || !params.containsKey("errorcode") ){ //返回结果没有异常信息 更新订单支付时间            //没有异常            String  requestno = params.get("requestno");//返回的请求号            UserDebitEntity userDebitEntity = userDebitService.selectOne(new EntityWrapper<UserDebitEntity>()                    .eq("order_id", requestno));            if(userDebitEntity!=null){                userDebitEntity.setPaydebit(2);//2 已支付                boolean b = userDebitService.updateById(userDebitEntity);            }        }        return "SUCCESS";    }    /**     * 获得用户借入/出 总额  应还总额， 借入/出 次数     */    @RequestMapping("/SCSMoney")    public R SCSMoney(@RequestParam String type){        TblAccountEntity tblAccountEntity = weChatUserService.selectWechatUser();        List<String> strings = userDebitService.daydebitZHC(tblAccountEntity.getAccountId().toString(), type);        Map<String,Object>resulr = new MapUtils().put("data1",strings.get(0));        if(StringUtils.isNotBlank(strings.get(0))&&StringUtils.isNotBlank(strings.get(1))){            resulr.put("data2",new BigDecimal(strings.get(1)).subtract(new BigDecimal(strings.get(0))));        }        if(strings.get(2).indexOf(".00")!=-1){            resulr.put("data3",strings.get(2).replaceAll(".00",""));        }        return R.ok().put("data",resulr);    }    /**     * 根据借条ID获得内容双方内容     */    @RequestMapping("/debitUsrTWO")    public R debitUsrTWO(@RequestParam String id){        TblAccountEntity tblAccountEntity = weChatUserService.selectWechatUser();        UserDebitEntity userDebitEntity = userDebitService.selectById(id);        WxBandcardEntity user = wxBandcardService.selectOne(new EntityWrapper<WxBandcardEntity>().eq("Account_ID",tblAccountEntity.getAccountId()));;        if(userDebitEntity==null){            return R.error("访问不存在");        }        TblAccountEntity targer = null;        WxBandcardEntity targerCard = null;        if(userDebitEntity.getTargetid()==tblAccountEntity.getAccountId()){            targer = tblAccountService.selectById(userDebitEntity.getTargetid());            targerCard = wxBandcardService.selectOne(new EntityWrapper<WxBandcardEntity>().eq("Account_ID",userDebitEntity.getTargetid()));        }else{            targer = tblAccountService.selectById(userDebitEntity.getWechatuserId());            targerCard = wxBandcardService.selectOne(new EntityWrapper<WxBandcardEntity>().eq("Account_ID",userDebitEntity.getWechatuserId()));        }        Map<String,Object> j = new MapUtils();        Map<String,Object> c = new MapUtils();        if(userDebitEntity.getType().equals("1")){//借款条            if(userDebitEntity.getWechatuserId().equals(tblAccountEntity.getAccountId())){                j.put("name",tblAccountEntity.getAccountName());                j.put("phone",tblAccountEntity.getAccountMobile());                j.put("card",user.getBankCard());                c.put("name",targer.getAccountName());                c.put("phone",targer.getAccountMobile());                c.put("card",targerCard.getBankCard());            }else{                j.put("name",targer.getAccountName());                j.put("phone",targer.getAccountMobile());                j.put("card",targerCard.getBankCard());                c.put("name",tblAccountEntity.getAccountName());                c.put("phone",tblAccountEntity.getAccountMobile());                c.put("card",user.getBankCard());            }        }else{            if(userDebitEntity.getTargetid().equals(tblAccountEntity.getAccountId())){                j.put("name",targer.getAccountName());                j.put("phone",targer.getAccountMobile());                j.put("card",targerCard.getBankCard());                c.put("name",tblAccountEntity.getAccountName());                c.put("phone",tblAccountEntity.getAccountMobile());                c.put("card",user.getBankCard());            }else{                j.put("name",targer.getAccountName());                j.put("phone",targer.getAccountMobile());                j.put("card",targerCard.getBankCard());                c.put("name",tblAccountEntity.getAccountName());                c.put("phone",tblAccountEntity.getAccountMobile());                c.put("card",user.getBankCard());            }        }        return R.ok().put("jkr",j).put("ckr",c);    }}