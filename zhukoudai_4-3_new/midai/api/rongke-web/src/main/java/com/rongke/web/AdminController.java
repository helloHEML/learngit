package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.rongke.commons.JsonResp;import com.rongke.enums.GlobalEnums;import com.rongke.enums.SMSEnums;import com.rongke.model.*;import com.rongke.service.*;import com.rongke.utils.Md5;import com.rongke.utils.RRUtils;import com.rongke.utils.RandomUtils;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.R;import com.rongke.web.ans.config.SysReader;import com.rongke.web.modules.sys.service.LogSmsService;import com.rongke.web.modules.sys.service.SysGlobalssService;import com.rongke.web.modules.sys.service.SysOnlineService;import com.rongke.web.saas.RSSmsUtils;import com.rongke.web.sms.SmsUtils;import org.apache.commons.codec.digest.DigestUtils;import org.apache.commons.lang3.StringUtils;import org.apache.commons.lang3.builder.ReflectionToStringBuilder;import org.apache.commons.lang3.builder.ToStringStyle;import org.apache.log4j.Logger;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.*;import org.apache.shiro.subject.Subject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.*;/** * @AdminController * @后台登录Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/admin")@Transactional@CrossOriginpublic class AdminController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private AdminService adminService;    @Autowired    private AdminRoleService adminRoleService;    @Autowired    private AdminRolePermissionService adminRolePermissionService;    @Autowired    private AdminPermissionService adminPermissionService;    @Autowired    private ChannelUserService channelUserService;    @Autowired    private SmsUtils smsUtils;//短信发送    @Autowired    private LogSmsService logSmsService;//短信    @Autowired    private SysOnlineService sysOnlineService;//登陆    @Autowired    private SysGlobalssService sysGlobalService;    /**     * @添加后台登录     * @param admin     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public R addAdmin(@RequestBody Admin admin){        Admin loginUser = adminService.findLoginUser();        if(StringUtils.isBlank(admin.getCode())){            return R.error("请输入验证码");        }        //验证码        R r = logSmsService.adminUPSms(admin.getCode());        if(RRUtils.assertCode(r,"500")){            return r;        }        log.debug("添加后台登录");        ChannelUser login_name = channelUserService.selectOne(new EntityWrapper<ChannelUser>()                .eq("login_name", admin.getLoginName()));        if(login_name!=null){            return R.error("账号已存在");        }        Admin admin1 = adminService.selectOne(new EntityWrapper<Admin>().eq("login_name", admin.getLoginName()));        if(admin1!=null){            return  R.error("账号已存在");        }        if(StringUtils.isBlank(admin.getPassword())){            return R.error("请输入密码");        }        admin.setPassword(Md5.md5Encode(admin.getPassword()));        admin.setGmtDatetime(new Date());        admin.setStatus("上线");        adminService.insert(admin);        return R.ok();    }    /**     * @添加后台登录     * @param admin     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public R update(@RequestBody Admin admin){        Admin loginUser = adminService.findLoginUser();        if(StringUtils.isBlank(admin.getCode())){            return R.error("请输入验证码");        }        //验证码        R r = logSmsService.adminUPSms(admin.getCode());        if(RRUtils.assertCode(r,"500")){            return r;        }        //验证码        ChannelUser login_name = channelUserService.selectOne(new EntityWrapper<ChannelUser>()                .eq("login_name", admin.getLoginName()));        if(login_name!=null){            return R.error("账号已存在");        }        if(StringUtils.isNotBlank(admin.getPassword())){            admin.setPassword(Md5.md5Encode(admin.getPassword()));        }else{            admin.setPassword(null);        }        admin.setGmtDatetime(new Date());        admin.setStatus("上线");        adminService.updateById(admin);        return R.ok();    }    /**     * @删除管理员     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/deleteAdmin", method = RequestMethod.GET)    public JsonResp deleteAdmin(Integer id){        log.debug("删除管理员");        adminService.deleteById(id);        return JsonResp.ok();    }    /**     * @添加后台登录     * @param roleId 角色id  adminId管理员id     * @return 返回值JsonResp     */    @RequestMapping(value="/updateAdminRole", method = RequestMethod.GET)    public JsonResp updateAdminRole(Integer roleId,Integer adminId ){        log.debug("添加后台登录");        Admin admin=adminService.selectById(adminId);        admin.setAdminRoleId(roleId);        admin.setUptDatetime(new Date());        adminService.updateById(admin);        return JsonResp.ok();    }    /**     * @获取后台当前登录者所有可见菜单列表     * @return 返回值JsonResp     */    @RequestMapping(value="/getJurisdiction", method = RequestMethod.GET)    public JsonResp getJurisdiction(){        log.debug("获取后台当前登录者所有可见菜单列表");        Admin admin=adminService.findLoginUser();        EntityWrapper<AdminRolePermission>  arpew=new EntityWrapper<>();        arpew.eq("admin_role_id",admin.getAdminRoleId());        List<AdminRolePermission> arpList=adminRolePermissionService.selectList(arpew);        Set<Integer> adminPermissionIds=new HashSet<>();        for (AdminRolePermission arp:arpList) {            adminPermissionIds.add(arp.getAdminPermissionId());        }        if(arpList.isEmpty()){            return JsonResp.fa("您尚未分配操作目录");        }        EntityWrapper<AdminPermission> apew=new EntityWrapper<>();        apew.in("id",adminPermissionIds);        List<AdminPermission> apList=adminPermissionService.selectList(apew);        adminPermissionIds.clear();        for (AdminPermission arp:apList) {            adminPermissionIds.add(arp.getParentid());        }//        Set<Integer> oneMenuSet=new HashSet<>();        EntityWrapper<AdminPermission> ew=new EntityWrapper<>();        ew.in("id",adminPermissionIds);        List<AdminPermission> aps=adminPermissionService.selectList(ew);    /*    for (AdminPermission arp:aps) {            oneMenuSet.add(arp.getParentid());        }*/        Map map=new HashMap();        map.put("parentMenu",aps);        map.put("menu",apList);        map.put("adminName",admin.getName());        //放入缓存//        cacheUtil.hset("myJurisdiction",String.valueOf(admin.getId()),map);        return JsonResp.ok(map);    }    /**     * @根据id查找后台登录     * @return 返回值JsonResp     */    @RequestMapping(value="/selectList", method = RequestMethod.GET)    public JsonResp selectAdmin(Page page){        log.debug("查找后台登录");        Map map=new HashMap();        map.put("startIndex",(page.getCurrent()-1)*page.getSize());        map.put("size",page.getSize());        List<Map> admins = adminService.getAdminList(map);        Integer size=adminService.getAdminListSize();        page.setRecords(admins);        page.setTotal(size);        return JsonResp.ok(page);    }    /**     * @根据id查找后台登录     * @return 返回值JsonResp     */    @RequestMapping(value="/updateStatus", method = RequestMethod.GET)    public JsonResp selectAdmin(Integer id,Integer type){        log.debug("查找后台登录");        Admin admin=adminService.selectById(id);        if(type==1){            admin.setStatus("上线");//上线            adminService.updateById(admin);        }else if(type==2) {            admin.setStatus("下线");//下线            adminService.updateById(admin);        }else{            return JsonResp.fa("状态有误");        }        return JsonResp.ok();    }    /**     * @退出登录     * @return 返回值JsonResp     */    @RequestMapping(value="/logout", method = RequestMethod.GET)    public JsonResp logout(){        log.debug("退出登录");        adminService.logout();        return JsonResp.ok();    }    /**     * @修改密码     * @return 返回值JsonResp     */    @RequestMapping(value="/updatePassword", method = RequestMethod.GET)    public R updatePassword(Integer id,String oldPassword,String newPassword){        log.debug("修改密码");        Admin admin=adminService.selectById(id);        if(!admin.getPassword().equals(Md5.md5Encode(oldPassword))){            return R.error("旧密码不正确");        }        if(StringUtils.isBlank(newPassword)){            return R.error("新密码不能为空");        }        admin.setPassword(Md5.md5Encode(newPassword));        adminService.updateById(admin);        return R.ok();    }    @RequestMapping("/adminPage")    public PageUtils adminPage(@RequestParam Map<String,Object> params){        Admin loginUser = adminService.findLoginUser();        return adminService.adminPage(params);    }    @RequestMapping(value = "/delete",method = RequestMethod.POST)    public R delete(@RequestBody Long[] ids){        Admin loginUser = adminService.findLoginUser();        adminService.deleteBatchIds(Arrays.asList(ids));        return R.ok();    }    /**     * 上线     */    @RequestMapping(value = "/disable",method = RequestMethod.GET)    public R disable(Integer id,String status){        Admin loginUser = adminService.findLoginUser();        Admin admin = adminService.selectById(id);        if(admin!=null){            admin.setStatus(status);            adminService.updateById(admin);        }        return R.ok();    }    @RequestMapping(value = "/thisInfo",method = RequestMethod.GET)    public R thisInfo(){        Admin loginUser = adminService.findLoginUser();        //查看角色        AdminRole adminRole = adminRoleService.selectById(loginUser.getAdminRoleId());        return R.ok().put("admin",loginUser).put("role",adminRole);    }    @RequestMapping(value = "/info/{id}",method = RequestMethod.GET)    public R info(@PathVariable("id") String id){        Admin loginUser = adminService.findLoginUser();        //查看角色        Admin admin = adminService.selectById(id);        return R.ok().put("admin",admin);    }    /**     * 根据角色类型获得管理员     */    @RequestMapping(value = "/selroleAdmin",method = RequestMethod.GET)    public R selroleAdmin(@RequestParam Map<String,Object> params){        Admin loginUser = adminService.findLoginUser();        //查看角色        return adminService.selroleAdmin(params);    }    /**     * 修改自己密码     */    @RequestMapping(value = "/ansUpdatePassword",method = RequestMethod.GET)    public R ansUpdatePassword(@RequestParam String jpassword,String newPassword){        Admin loginUser = adminService.findLoginUser();        //查看角色        if(!DigestUtils.md5Hex(jpassword).equals(loginUser.getPassword())){            return R.error("旧密码错误");        }        loginUser.setPassword(DigestUtils.md5Hex(newPassword));        adminService.updateById(loginUser);        return R.ok();    }    /**     *  后台登陆验证码     */    @RequestMapping(value = "/hSmsCode",method = RequestMethod.GET)    public R hSmsCode(@RequestParam Map<String,String> params) throws Exception {        Admin admin = adminService.selectOne(new EntityWrapper<Admin>().eq("login_name", params.get("username")));        if(admin==null){            return R.error("未知账户");        }        if(StringUtils.isBlank(admin.getPhone())){            return R.error("手机号未设置，请联系总管理员设置验证手机");        }        String s = RandomUtils.randomString(4);        R r = RSSmsUtils.sendsms2(admin.getPhone(), s);        if(RRUtils.assertCode(r,"500")){            return r;        }        LogSms logSms = new LogSms();        logSms.setCode(s);        logSms.setIsuse(0);        logSms.setType(String.valueOf(SMSEnums.LOGIN_SMS.getType()));        logSms.setTarget(params.get("username"));        logSms.setCreateTime(new Date());        logSms.setResult("未使用");        logSms.setExpriedTime(new Date(logSms.getCreateTime().getTime()+120 * 1000));        logSmsService.insert(logSms);        return R.ok().put("phone", admin.getPhone().replaceAll("(\\d{3})\\d{4}(\\d{4})","$1****$2"));    }    /**     *  修改验证码     */    @RequestMapping(value = "/adminUpCode",method = RequestMethod.GET)    public R adminUpCode(@RequestParam Map<String,String> params) throws Exception {        Admin admin = adminService.findLoginUser();        if(admin==null){            return R.error("未知账户");        }        if(StringUtils.isBlank(admin.getPhone())){            return R.error("手机号未设置，请联系总管理员设置验证手机");        }        String randomString = RandomUtils.randomString(6);        R r = RSSmsUtils.sendsms2(admin.getPhone(), randomString);        if(RRUtils.assertCode(r,"500")){            return r;        }        SysOnline online = sysOnlineService.onlineG();        if(online==null){            return R.error("请登录");        }        LogSms logSms = new LogSms();        logSms.setCode(randomString);        logSms.setIsuse(0);        logSms.setType(String.valueOf(SMSEnums.ADMIN_UP_SMS.getType()));        logSms.setTarget(String.valueOf(online.getId()));        logSms.setCreateTime(new Date());        logSms.setResult("未使用");        logSms.setExpriedTime(new Date(logSms.getCreateTime().getTime()+ 60 * 60 * 1000));        logSmsService.insert(logSms);        return R.ok();    }    /**     * @后台登录     */    @RequestMapping(value="/login", method = RequestMethod.POST)    public R login(@RequestParam Map<String,Object> params){        log.debug("后台登录");        if(StringUtils.isBlank(String.valueOf(params.get("username")))||StringUtils.isBlank(String.valueOf(params.get("password")))){            return R.error("密码不能为空");        }        UsernamePasswordToken token = new UsernamePasswordToken((String) params.get("username"), Md5.md5Encode((String) params.get("password")));        token.setRememberMe(true);        System.out.print("为验证登录用户而封装的Token:");        System.out.println(ReflectionToStringBuilder.toString(token, ToStringStyle.MULTI_LINE_STYLE));        //获取当前的Subject        Subject currentUser = SecurityUtils.getSubject();        try {            currentUser.login(token);        }catch(UnknownAccountException uae){            return R.error("未知账户");        }catch(IncorrectCredentialsException ice){            return R.error("密码不正确");        }catch(LockedAccountException lae){            return R.error("账户已锁定");        }catch(ExcessiveAttemptsException eae){            return R.error("用户名或密码错误次数过多");        }catch(AuthenticationException ae){            //通过处理Shiro的运行时AuthenticationException就可以控制用户登录失败或密码错误时的情景            System.out.println("对用户[" + params.get("username") + "]进行登录验证...验证未通过，堆栈轨迹如下");            ae.printStackTrace();            return R.error("用户名或密码不正确");        }        //验证是否登录成功        if(currentUser.isAuthenticated()){            EntityWrapper<Admin> ew=new EntityWrapper<>();            ew.eq("login_name",params.get("username"));            Admin admin1=adminService.selectOne(ew);            //查看角色是否可用            AdminRole adminRole=adminRoleService.selectById(admin1.getAdminRoleId());            if(adminRole==null){                return R.error("拥有角色已被删除！");            }            if("2".equals(adminRole.getAvailable())){                return R.error("管理员所分配角色已被禁用！");            }            admin1.setUptDatetime(new Date());            admin1.setToken(currentUser.getSession().getId().toString());            adminService.updateById(admin1);            params.put("IPKEY", SysReader.getString("IPKEY"));            params.put("admin",admin1);            params.put("sessionId",currentUser.getSession().getId().toString());            return sysOnlineService.online(params);//            return R.ok();        }else{            token.clear();            return R.error();        }    }    /**     * 获得所有催收人员     */    @RequestMapping(value="/csAdmin")    public PageUtils csAdmin(@RequestParam Map<String,Object> params){        return adminService.adminTypePage(params);    }    @RequestMapping("/dakuanCS/{id}")    public R dakuanCS(@PathVariable String id){        SysGlobal key = sysGlobalService.key(GlobalEnums.PAYPASSWORD.getValue());        if(!key.getSysValues().equals(DigestUtils.md5Hex(id))){            return R.error("打款密码不正确");        }        return R.ok();    }}