package com.rongke.web;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.google.common.collect.Lists;import com.rongke.PictureCode.ImageUtil;import com.rongke.commons.JsonResp;import com.rongke.duntong.TongdunApi;import com.rongke.enums.FileType;import com.rongke.enums.StatusEnum;import com.rongke.enums.UserStatusEnum;import com.rongke.model.*;import com.rongke.rediscluster.CacheUtil;import com.rongke.service.*;import com.rongke.utils.*;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.R;import com.rongke.web.ans.config.SysReader;import com.rongke.web.ans.utils.YoudunUtils;import com.rongke.web.common.IPConfig;import com.rongke.web.saas.RSSmsUtils;import com.rongke.web.sms.SmsUtils;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.Logger;import org.apache.poi.xssf.usermodel.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import org.springframework.web.client.RestTemplate;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.*;/** * @UserController * @用户Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/user")@Transactional@CrossOriginpublic class UserController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private UserService userService;    @Autowired    private SmsUtils smsUtil;    @Autowired    private CacheUtil redisClusterCache;    @Autowired    private UserIdentityService userIdentityService;//用户身份证信息    @Autowired    private AuthenticationService authenticationService;    @Autowired    private ChannelService channelService;    @Autowired    private AdminService adminService;    @Autowired    private UserContactService userContactService;    @Autowired    private UserBaseMsgService userBaseMsgService;    @Autowired    private DataReportService dataReportService;    @Autowired    private UserPhoneService userPhoneService;//手机认证    @Autowired    private DownloadService downloadService; //运行商    @Autowired    private UserFunctionService userFunctionService;//用户功能    @Autowired    private AddressService addressService;//用户地址    @Autowired    private UserZmService userZmService;//芝麻分    @Autowired    private UserTaobaoService userTaobaoService;//淘宝地址    @Autowired    private UserPhoneRecordService userPhoneRecordService;//通话任务    /**     * @添加用户     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addUser(@RequestBody User user){        log.debug("添加用户");        userService.insert(user);        return JsonResp.ok(user);    }    /**     * @param phone    手机号     * @param password 密码     */    @RequestMapping(value = "/login", method = RequestMethod.GET)    public JsonResp loginByPhone(String phone, String password, String devAlias,String version,HttpServletRequest request){        log.debug("登录");//        User user = userMapper.selectByPhone(phone);        EntityWrapper<User> ew=new EntityWrapper<>();        ew.eq("phone",phone);        User user=userService.selectOne(ew);        if (user == null) {            return JsonResp.fa("该用户不存在！");        }        if (StringUtil.isEmpty(password) || !Md5.md5Encode(password).equals(user.getPassword())) {            return JsonResp.fa("密码错误!");        }        if(UserStatusEnum.DISABLE.getTypeName().equals(user.getStatus())){            return JsonResp.fa("账号已禁用");        }        if(UserStatusEnum.NOTQUALIFIED.getTypeName().equals(user.getStatus())){            return JsonResp.fa("你已被列入黑名单");        }        if(StringUtils.isNotBlank(user.getSource())){            if(!user.getSource().equals("")){                Channel channel = channelService.selectById(user.getSource());                if(channel==null){                    return JsonResp.fa("该应用已关闭登陆");                }            }        }        String token = null;        redisClusterCache.get("3421");        if (redisClusterCache.hasKey(String.valueOf(user.getId()))) {            try {                token = redisClusterCache.getCache(String.valueOf(user.getId()));            } catch (Exception e) {                e.printStackTrace();            }            try {                redisClusterCache.delkey(String.valueOf(user.getId()));                redisClusterCache.delkey(token);            } catch (Exception e) {                e.printStackTrace();            }        }        //生成一个新的token,缓存7天;        token = Md5.md5Encode(phone + new Date().getTime());        try {            redisClusterCache.set(String.valueOf(user.getId()), token, 7 * 24 * 60 * 60);            redisClusterCache.set(token,user,7 * 24 * 60 * 60);        } catch (Exception e) {            e.printStackTrace();        }        Enumeration   typestr = request.getHeaderNames();        String s1 = request.getHeader("user-agent");//        if(s1.contains("Android")) {//            user.setLandingport("Android");//        } else if(s1.contains("iPhone")) {//            user.setLandingport("iPhone");//        }  else if(s1.contains("iPad")) {//            user.setLandingport("iPad");//        }  else {//            user.setLandingport("其他客户端设备");//        }        UserFunction uFunction = userFunctionService.selectOne(new EntityWrapper<UserFunction>().eq("user_Id", user.getId()));        if(uFunction==null){            uFunction = new UserFunction();            uFunction.setUserId(user.getId());            uFunction.setCreateTime(new Date());            uFunction.setUpdateTime(new Date());            uFunction.setStatus(1);        }        uFunction.setAppVersion(version);        userFunctionService.insertOrUpdate(uFunction);        user.setToken(token);        user.setDevAlias(devAlias);        user.setUptDatetime(new Date());        userService.updateById(user);        return   JsonResp.ok(user);    }    /**     * @根据id查询用户     * @param     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectOne(Long id){        log.debug("根据id查询用户");        User user = userService.selectById(id);        return JsonResp.ok(user);    }    /**     * @app获取验证码     * @param phone     * @return 返回值JsonResp     */    @RequestMapping(value="/sendMsg/{secret}/{phone}", method = RequestMethod.GET)    public JsonResp sendMsg(HttpServletRequest request,@PathVariable("secret") String secret,@PathVariable("phone") String phone){        log.debug("获取验证码");        String ip= IPConfig.getIpAddr(request);        System.out.print("访问者ip："+ip);        String salt="tt^hz";        if(!MobileUtil.isPhoneBase(phone)) {            return JsonResp.fa("手机号码格式不正确");        }        String checkSecret=Md5.md5Encode(phone.substring(phone.length()-4)+salt);        if(!checkSecret.equals(secret)){            return JsonResp.fa("签名验签失败");        }        String code=null; //验证码        code = RandomUtils.randomString(6);//        String content=code+"##"+2;        Boolean flag= null;        try {            flag = RSSmsUtils.sendsms(phone,code);        } catch (Exception e) {            log.debug("发送验证码出错");            e.printStackTrace();        }        try {            redisClusterCache.set(phone,code,120);        }catch (Exception e) {            e.printStackTrace();        }        return flag==true?JsonResp.ok():JsonResp.fa("获取验证码失败");    }    /**     * @注册用户     */    @RequestMapping(value = "/register", method = RequestMethod.GET)    public JsonResp register1(String phone, String password, String code,String channelName,HttpServletRequest request) {        Boolean flag = smsUtil.checkCode(phone, code);        if (!flag) {            return JsonResp.fa("验证码错误");        }        EntityWrapper<User> ew = new EntityWrapper<User>();        ew.eq("phone", phone);        List<User> users = userService.selectList(ew);        if(!users.isEmpty()){            return JsonResp.fa("该号码已被注册");        }        User user = new User();        Channel channel = null;        //判断是否是渠道商引流        if (channelName != null&& !"".equals(channelName) && !"null".equals(channelName)){            EntityWrapper<Channel> wrapper = new EntityWrapper<>();            wrapper.eq("encryption",channelName);            channel = channelService.selectOne(wrapper);            if (channel != null) {                if (channel.getStatus() == 2) {                    return JsonResp.fa("该渠道注册通道已关闭");                }                user.setSource(channel.getId()+"");            }        }        if(channel==null){            String ip = IPConfig.getIpAddr(request);            Download download = downloadService.selectOne(new EntityWrapper<Download>().eq("ip", ip));            if(download!=null){                channel = channelService.selectById(download.getChannlid());                if(channel!=null){                    if(StringUtils.isNotBlank(channel.getName())){                        user.setSource(channel.getId()+"");                    }                }            }        }        user.setGmtDatetime(new Date());        user.setPhone(phone);        user.setStatus(UserStatusEnum.QUALIFIED.getTypeName());        user.setPassword(Md5.md5Encode(password));        userService.insert(user);        Authentication authentication = new Authentication();        authentication.setGmtDatetime(new Date());        authentication.setUptDatetime(new Date());        authentication.setUserId(user.getId());        authenticationService.insert(authentication);        //更新相关报表统计        DataReport dataReport = dataReportService.selectById(1);        dataReport.setRegisterCount(dataReport.getRegisterCount()+1);        dataReportService.updateById(dataReport);        return JsonResp.ok();    }    /**     * 忘记密码     * @param phone 手机号     * @param code  验证码     * @param password 新密码     */    @RequestMapping(value="/lostPassword", method = RequestMethod.GET)    public JsonResp lostPassword(String phone, String code, String password){        log.debug("忘记密码");        Boolean flag = smsUtil.checkCode(phone, code);        if (!flag) {            return JsonResp.fa("验证码错误");        }        EntityWrapper<User> ew = new EntityWrapper();        ew.eq("phone",phone);        User user = userService.selectOne(ew);        if (user == null){            return JsonResp.fa("该手机号不存在！");        }        user.setPassword(Md5.md5Encode(password));        userService.updateById(user);        return JsonResp.ok();    }    /**     * @根据id查找用户基本信息(后台)     * @param authStatus  会员状态     *  @param param  搜索条件 姓名或电话     * @return 返回值JsonResp     */    @RequestMapping(value="/admin/findUserDateList", method = RequestMethod.GET)//    @RequiresPermissions("item:query")    public JsonResp findUserDateList(String authStatus, String param, Page page,String gmtDateTime){        log.debug("查找用户基本信息");        Map map=new HashMap();        if(authStatus!=null ){            map.put("authStatus",authStatus);        }        if(MobileUtil.isPhoneBase(param)){            map.put("phone",param);        }else {            map.put("userName",param);        }        String time1="",time2="";        if (StringUtil.isNotEmpty(gmtDateTime)) {            String[] array = gmtDateTime.split("~");            time1 = array[0];            time2 = array[1];        }        map.put("time1",time1);        map.put("time2",time2);        map.put("startIndex",(page.getCurrent()-1)*page.getSize());        map.put("size",page.getSize());        List<User> userList = userService.findUserDateList(map);        Integer size=userService.findUserDateListSize(map);        List<String> uids = Lists.newArrayList();        for(User u:userList){            if(StringUtils.isNotBlank(u.getSource())&&!uids.contains(u.getSource())){                uids.add(u.getSource());            }        }        List<Channel> channels = channelService.selectList(new EntityWrapper<Channel>().setSqlSelect("id,name").in("id",uids));        if(!channels.isEmpty()){            for(User u:userList){                for(Channel c:channels){                    if(StringUtils.isNotBlank(u.getSource())&&u.getSource().equals(c.getId()+"")){                        u.setSource(c.getName());                    }else{                        u.setSource("未知");                    }                }            }        }        page.setRecords(userList);        page.setTotal(size);        log.debug("查找用户基本信息");        return JsonResp.ok(page);    }    /**     * @根据id拉黑某用户     * @param userId     * @return 返回值JsonResp     */    @RequestMapping(value = "/defriendUser", method = RequestMethod.GET)    public JsonResp defriendUser(Long userId,Integer type,String defriendReason){        log.debug("根据id拉黑某用户");        User user=userService.selectById(userId);        if(user!=null){            if(type==2){                user.setStatus(UserStatusEnum.NOTQUALIFIED.getTypeName());                user.setDefriendReason(defriendReason);            }else if(type==1){                user.setStatus(UserStatusEnum.QUALIFIED.getTypeName());            }            userService.updateById(user);        }        return JsonResp.ok();    }    /**     * @根据id禁用用户     * @param userId     * @return 返回值JsonResp     */    @RequestMapping(value = "/disableUser", method = RequestMethod.GET)    public JsonResp disableUser(Long userId,Integer type){        log.debug("根据id禁用用户");        User user=userService.selectById(userId);        if(user!=null){            if(type==1){                user.setStatus(UserStatusEnum.QUALIFIED.getTypeName());            }else if(type==2){                user.setStatus(UserStatusEnum.DISABLE.getTypeName());                user.setToken(Md5.md5Encode(user.getPhone() + new Date().getTime()));            }            userService.updateById(user);        }        return JsonResp.ok();    }    /**     * @return 返回值JsonResp     * @获取用户详情     */    @RequestMapping(value = "/getUserDetail", method = RequestMethod.GET)    public JsonResp getUserDetail(Long userId) {        log.debug("获取用户详情");        User user = userService.selectById(userId);        Map map=new HashMap();        map.put("userId",userId);        //身份信息        UserIdentity identity = userIdentityService.selectUserInentityData(map);        //基本信息        UserBaseMsg userBaseMsg=userBaseMsgService.selectBaseMsg(map);        //联系人        EntityWrapper<UserContact> ucew=new EntityWrapper<>();        ucew.eq("user_id",userId);        ucew.eq("emergency_contact","紧急联系人");        List<UserContact>  userContacts=userContactService.selectList(ucew);        EntityWrapper<Authentication>  ahew=new EntityWrapper<>();        ahew.eq("user_id",userId);        Authentication authentication=authenticationService.selectOne(ahew);        Map responseMap=new HashMap();        if(authentication.getAuditorId()!=null){            //查找审核员            Admin admin=adminService.selectById(authentication.getAuditorId());            responseMap.put("adminName",admin.getName());        }        responseMap.put("user",user);        responseMap.put("identity",identity);        responseMap.put("userBaseMsg",userBaseMsg);        responseMap.put("userContacts",userContacts);        responseMap.put("authentication",authentication);        return JsonResp.ok(responseMap);    }    /**     * @param     * @return 返回值JsonResp     * @查询所有的用户列表     */    @RequestMapping(value="/selectUserList", method = RequestMethod.GET)    public JsonResp selectUserList(Page page, String authStatus, String phone, String userName, String status){        EntityWrapper<User>userEntityWrapper=new EntityWrapper<>();        userEntityWrapper.orderBy("gmt_datetime",false);        userEntityWrapper.eq("status","正常");        if(phone!=null&&!"".equals(phone)){            userEntityWrapper.like("phone",phone);        }        if(userName!=null&&!"".equals(userName)){            userEntityWrapper.like("real_name",userName);        }        Page<User> userPage=userService.selectPage(page,userEntityWrapper);        Long a = System.currentTimeMillis();        List<String> uids = Lists.newArrayList();        for(User u:userPage.getRecords()){            if(uids.contains(u.getSource())){                uids.add(u.getSource());            }        }        System.out.println(uids);        List<Channel> channels = channelService.selectList(new EntityWrapper<Channel>().setSqlSelect("id").eq("id",uids));        if(channels.isEmpty()){            for(User u:userPage.getRecords()){                for(Channel c:channels){                    if(u.getSource().equals(String.valueOf(c.getId()))){                        u.setSource(c.getName());                    }                }            }        }        System.err.println(System.currentTimeMillis()-a);        return JsonResp.ok(userPage);    }    /**     * @param     * @return 返回值JsonResp     * @查询所有的用户列表     */    @RequestMapping(value="/refuseUser", method = RequestMethod.GET)    public JsonResp refuseUser(Long id, String reason){        log.debug("获取用户详情");        EntityWrapper wrapper = new EntityWrapper<>();        wrapper.eq("user_id",id);        Admin admin=adminService.findLoginUser();        Authentication authentication = authenticationService.selectOne(wrapper);        if("3".equals(authentication.getUserBaseMsgAuth())){            UserBaseMsg userBaseMsg = userBaseMsgService.selectOne(wrapper);            userBaseMsg.setStatus("审核失败");            userBaseMsg.setAuditorId(admin.getId());            userBaseMsg.setUptDatetime(new Date());            userBaseMsgService.updateById(userBaseMsg);            String refuseReason=authentication.getMarks()==null?reason:authentication.getMarks()+"#"+reason;            authentication.setUserBaseMsgAuth("2");//            authentication.setAuditorId(admin.getId());//审核人还保持原分配人员 最终操作人记录在userBaseMsg            authentication.setMarks(refuseReason);            authentication.setUptDatetime(new Date());            authenticationService.updateById(authentication);        }        return JsonResp.ok();    }    /**     * @param     * @return 返回值JsonResp     * @后台对用户进本信息审核（通过）     */    @RequestMapping(value="/auditSucceed", method = RequestMethod.GET)    public JsonResp auditSucceed(Long id){        log.debug("审核成功");        Admin admin=adminService.findLoginUser();        EntityWrapper wrapper = new EntityWrapper<>();        wrapper.eq("user_id",id);        Authentication authentication =authenticationService.selectOne(wrapper);        if("0".equals(authentication.getBankCardAuth()) || "0".equals(authentication.getUserBaseMsgAuth()) || "0".equals(authentication.getIdentityAuth())){            return JsonResp.fa("该用户尚未认证结束，请等待认证结束。");        }//        if("3".equals(authentication.getUserBaseMsgAuth())){        UserBaseMsg userBaseMsg = userBaseMsgService.selectOne(wrapper);        userBaseMsg.setStatus("审核成功");        userBaseMsg.setUptDatetime(new Date());        userBaseMsg.setAuditorId(admin.getId());        userBaseMsgService.updateById(userBaseMsg);//            authentication.setAuditorId(admin.getId());//审核人还保持原分配人员 最终操作人记录在userBaseMsg        authentication.setUserBaseMsgAuth("1");        authentication.setUptDatetime(new Date());        authenticationService.updateById(authentication);        //更新相关报表统计        DataReport dataReport = dataReportService.selectById(1);        dataReport.setMemberCount(dataReport.getMemberCount()+1);        dataReportService.updateById(dataReport);        //极光推送审核通过消息//            List<String> userIds= new ArrayList<>();//            userIds.add(id.toString());//            JpushClientUtil.sendToAliasId(userIds,"审核通过！","审核通过","您的审核已通过！可以对您的手机进行租赁了","");//        }        return JsonResp.ok();    }    /**     * @param     * @return 生成excel     */    @RequestMapping(value = "/makeExcle", method = RequestMethod.GET)    public JsonResp makeExcle(HttpServletRequest request, HttpServletResponse response, String authStatus, String param,String gmtDateTime) throws IOException {        // TODO Auto-generated method stub        Map map=new HashMap();        if(authStatus!=null ){            map.put("authStatus",authStatus);        }        if(MobileUtil.isPhoneBase(param)){            map.put("phone",param);        }else {            map.put("userName",param);        }        String time1="",time2="";        if (StringUtil.isNotEmpty(gmtDateTime)) {            String[] array = gmtDateTime.split("~");            time1 = array[0];            time2 = array[1];        }        map.put("time1",time1);        map.put("time2",time2);        List<User> userList = userService.findUserDateList(map);        if (userList.isEmpty()) {            return JsonResp.fa("未选择导出数据");        }        XSSFWorkbook excelbook = new XSSFWorkbook(); //创建workBook        XSSFSheet excelSheet = excelbook.createSheet();//创建sheet表        XSSFRow excelRow = excelSheet.createRow(0);//创建第一行        XSSFCellStyle headerStyle = excelbook.createCellStyle();//设置 居中        headerStyle.setAlignment(XSSFCellStyle.ALIGN_CENTER);        //接下来是创建 列标题 ,cell的起始值是 0,可创建n个列标题        String[] Title = { "姓名", "手机号码", "注册日期", "用户状态", "认证状态","注册来源" };        for(int a=0;a<Title.length;a++){            XSSFCell cell = excelRow.createCell(a);            cell.setCellStyle(headerStyle);//居中            cell.setCellValue(Title[a]);        }        //接下来遍历List,并写入EXCEL中        for(int i = 0; i < userList.size(); i++) {            //创建行,行号应从1开始,因为表头行(列标题)占据了第0行            excelRow = excelSheet.createRow(i + 1);            //将该行每一列的数据写入,可写n列            User user = userList.get(i); // List 的起始值是0            excelRow.createCell(0).setCellValue(user.getRealName());            excelRow.createCell(1).setCellValue(user.getPhone());            excelRow.createCell(2).setCellValue(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(user.getGmtDatetime()));            excelRow.createCell(3).setCellValue(user.getStatus());            excelRow.createCell(4).setCellValue(user.getAuthStatus());            excelRow.createCell(5).setCellValue(user.getSource()==null?"未知":user.getSource());        }        String fileanme = "用户列表";        String date = new SimpleDateFormat("yyyyMMdd").format(new Date());        FileType fileType = FileType.XLS;        String path = fileType.getAbsolutePath();        String filePath = path + File.separator+fileanme+date+".xls";        log.info("filePath"+filePath);        EvaluationController.writeExcel(request,response, excelbook, filePath, "文件名");//具体导出的方法        String url = request.getRequestURL().toString().split("api")[0]+"/pic/xls/"+File.separator+fileanme+date+".xls";        return JsonResp.ok(url);    }    /**     * 生成验证码图片     * @param response     * @param session     * @return     * @throws Exception     */    @RequestMapping(value="/pictureCode", method = RequestMethod.GET)    public JsonResp valicode(HttpServletResponse response, HttpSession session) throws Exception {        //利用图片工具生成图片        //第一个参数是生成的验证码，第二个参数是生成的图片        Object[] objs = ImageUtil.createImage();        //将验证码code存入redis        UUID uuid = UUID.randomUUID();        redisClusterCache.set(uuid.toString(),objs[0],2*60);        //将图片转化base传递给前端页面        BufferedImage image = (BufferedImage) objs[1];        String base64 = Base64Picture.putImage(image);        Map<String,Object> map = new HashMap();        map.put("base64",base64);        map.put("marked",uuid);        return JsonResp.ok(map);    }    /**     *  提交个人的理想金额     */    @RequestMapping(value="/contentmentMoney", method = RequestMethod.GET)    public R contentmentMoney(HttpServletRequest request,String money){        User user = userService.selectCurrentUser();        user.setContentmentMoney(money+"="+0);//0 申请中        userService.updateById(user);        UserFunction uf = userFunctionService.selectOne(new EntityWrapper<UserFunction>().eq("user_id", user.getId()));        if(uf==null){            uf = new UserFunction();            uf.setUserId(user.getId());            uf.setCreateTime(new Date());            uf.setUpdateTime(new Date());            uf.setStatus(1);        }        uf.setContentmentMoney(money);        userFunctionService.updateById(uf);        return R.ok("提交成功");    }    /**     *  理想金额 通过/拒绝/重新审核     */    @RequestMapping(value="/contentmentBYMoney", method = RequestMethod.POST)    public R contentmentMoneyBy(String userId,Integer status){        User user = userService.selectById(userId);        String msg = "操作成功";        if(StringUtils.isBlank(user.getContentmentMoney())){            return R.error("未提交理想金额");        }        String [] mo = user.getContentmentMoney().split("=");        if(status==null||status==1){//通过            user.setContentmentMoney(mo[0]+"="+1);        }else if(status==2){//拒绝            user.setContentmentMoney(mo[0]+"="+2);            msg="拒绝成功";        }else if(status==3){//从新审核            user.setContentmentMoney("");        }        userService.updateById(user);        return R.ok(msg);    }    /**     * 获得理想金额     */    @RequestMapping(value="/GETcontentmentMoney", method = RequestMethod.GET)    public R contentmentMoneyBy(){        User user = userService.selectCurrentUser();        if(StringUtils.isBlank(user.getContentmentMoney())){            return R.ok().put("islx","-1");        }else{            String[] status = user.getContentmentMoney().split("=");            return R.ok().put("islx","1");        }    }    /**     * 设置默认银行卡金额     */    @RequestMapping(value="/submitBankDefault", method = RequestMethod.GET)    public R submitBankDefault(String bankDefault){        User user = userService.selectCurrentUser();        user.setBankDefault(bankDefault);        userService.updateById(user);        UserFunction uf = userFunctionService.selectOne(new EntityWrapper<UserFunction>().eq("user_id", user.getId()));        if(uf==null){            uf = new UserFunction();            uf.setUserId(user.getId());            uf.setCreateTime(new Date());            uf.setUpdateTime(new Date());            uf.setStatus(1);        }        uf.setBankDefault(bankDefault);        userFunctionService.updateById(uf);        return R.ok().put("userBankDefault",user.getBankDefault());    }    /**     * 获得默认银行卡字段     */    @RequestMapping(value="/getBankDefault", method = RequestMethod.GET)    public R getBankDefault(){        User user = userService.selectCurrentUser();        String bankDefault = "0";        if(StringUtils.isNotBlank(user.getBankDefault())){            bankDefault = user.getBankDefault();        }        return R.ok().put("userBankDefault",bankDefault);    }    /**     * 整合： 用户个人信息     * @时间： 2018年10月8日 18点13分     */    @RequestMapping(value="/uDetails", method = RequestMethod.GET)    public R uDetails(String userId){        adminService.findLoginUser();        Long a = System.currentTimeMillis();        User user = userService.selectById(userId);//用户信息        UserIdentity userIdentity = userIdentityService.selectOne(new EntityWrapper<UserIdentity>()                .eq("user_id", userId));//身份证信息        UserBaseMsg userBaseMsg = userBaseMsgService.selectOne(new EntityWrapper<UserBaseMsg>()                .eq("user_id",userId));//个人信息（婚姻，学历）        //用户功能        UserFunction userFunction = userFunctionService.selectOne(new EntityWrapper<UserFunction>().eq("user_id",userId));//功能设置        //注册来源        if(StringUtils.isNotBlank(user.getSource())){            Channel channel = channelService.selectOne(new EntityWrapper<Channel>().eq("id",user.getSource()));            if(channel!=null){                user.setSource(channel.getName());            } else {                user.setSource("未知");            }        }        //手机号码        UserPhone user_id3 = userPhoneService.selectOne(new EntityWrapper<UserPhone>().eq("user_id", userId).orderDesc(Arrays.asList("gmt_datetime")));        //家庭住址        Address address = addressService.selectOne(new EntityWrapper<Address>().eq("user_id", userId));        String addrs = "";        if(address!=null){            addrs = address.getProvince()+address.getCity()+address.getArea()+address.getAddressDetail();        }        //认证信息        Authentication user_id = authenticationService.selectOne(new EntityWrapper<Authentication>().eq("user_id", userId));        //淘宝账号        UserTaobao userid2 = userTaobaoService.selectOne(new EntityWrapper<UserTaobao>().eq("user_id", userId));        //认证_银行卡        //芝麻分        UserZm user_id1 = userZmService.selectOne(new EntityWrapper<UserZm>().eq("user_id", userId));        System.out.println("uDetails执行时间:"+(System.currentTimeMillis()-a)+"ms");        return R.ok().put("user",user)                .put("userPhone",user_id3)                .put("userIdentity",userIdentity)                .put("userBaseMsg",userBaseMsg)                .put("userFunction",userFunction)                .put("authentication",user_id)                .put("userZm",user_id1)                .put("userTaobao",userid2)                .put("address",addrs);    }    /**     * 手动获取芝麻分记录     */    @RequestMapping(value="/sdZMF", method = RequestMethod.GET)    public R sdZMF(String userId,String taskId){        adminService.findLoginUser();        if(StringUtils.isBlank(userId)){            return R.error("用户ID不能为空");        }        if(StringUtils.isBlank(taskId)){            taskId = "";            UserTaobao user_id = userTaobaoService.selectOne(new EntityWrapper<UserTaobao>().eq("user_id", userId));            if(user_id!=null){                taskId = user_id.getTaskId();            }        }//        JSONObject json = TongdunApi.getTaobaoData(taskId, ConstantFactory.getConfig().getMoheCode(),ConstantFactory.getConfig().getMoheKey());        JSONObject json = RSMohe.getTaobaoData(taskId);        if(json.getIntValue("code")==0){        JSONObject dataJO = json.getJSONObject("data");        JSONObject taskDataJO = dataJO.getJSONObject("task_data");        JSONObject baseInfoJO = taskDataJO.getJSONObject("base_info");//个人信息        JSONObject accountInfo = taskDataJO.getJSONObject("account_info");//账户信息        JSONArray receiverList = taskDataJO.getJSONArray("receiver_list");//收货地址        JSONArray  orderList = taskDataJO.getJSONArray("order_list");//够买记录        UserZm zmf = userZmService.selectOne(new EntityWrapper<UserZm>().eq("user_id", userId));        if(zmf==null){            zmf = new UserZm();        }        zmf.setUserId(Long.valueOf(userId));        zmf.setRealName(baseInfoJO.getString("name"));//姓名        zmf.setResultCode(dataJO.getString("channel_code"));//000003淘宝        zmf.setZmScore(accountInfo.getString("zhima_point"));//芝麻分        zmf.setJiebeiAmount(accountInfo.getString("jiebei_quota"));//借呗额度        zmf.setHuabeiTotalAmount(accountInfo.getString("credit_quota"));//花呗总额度        zmf.setHuabeiAvailAmount(accountInfo.getString("available_quota"));//花呗可用额度        zmf.setUptDatetime(new Date());        userZmService.insertOrUpdate(zmf);            return R.ok().put("data",zmf);        }else{            return R.error();        }    }    /**     * 用户列表     */    @RequestMapping(value="/userListAuthPage", method = RequestMethod.GET)    public PageUtils userPage(@RequestParam Map<String,Object> params) {        PageUtils pageUtils = userService.userListAuthPage(params);        return pageUtils;    }        /**         * 个人信息         */    @RequestMapping(value="/accountUser", method = RequestMethod.GET)    public R accountUser(String userId){        adminService.findLoginUser();        return userService.visualizationEv(userId);    }    /**     * 借贷订单     */    @RequestMapping(value = "userEvaluation", method = RequestMethod.GET)    public PageUtils userEvaluation(@RequestParam Map<String,Object> params){        adminService.findLoginUser();        return userService.userEvaluation(params);    }    /**     * 获得用户通讯录     */    @RequestMapping(value = "userTXL", method = RequestMethod.GET)    public PageUtils userTXL(@RequestParam Map<String,Object> params){        adminService.findLoginUser();        return userService.addressbook(params);    }    /**     * 淘宝购买记录     */    @RequestMapping(value = "usertaobaoBuy", method = RequestMethod.GET)    public PageUtils usertaobaoBuy(@RequestParam Map<String,Object> params){        adminService.findLoginUser();        return userService.taobaoBuy(params);    }    /**     * 淘宝收货地址     */    @RequestMapping(value = "usertaobaoAdder", method = RequestMethod.GET)    public PageUtils usertaobaoAdder(@RequestParam Map<String,Object> params){        adminService.findLoginUser();        return userService.taobaoAddr(params);    }    /**     * 获得个人     * TODO 数据魔盒     */    @RequestMapping(value = "/userMoHe", method = RequestMethod.GET)    public R userPhoneRe(String id){        adminService.findLoginUser();        UserPhone user_id = userPhoneService.selectOne(new EntityWrapper<UserPhone>()                .eq("user_id", id)                .eq("status", StatusEnum.USED.getTypeName())                .orderDesc(Arrays.asList("gmt_datetime"))        );        JSONObject result = RSMohe.getReportUrlData();        int code = result.getIntValue("code");        if(code==0){            return R.ok().put("token",result.getString("data")).put("taskId",user_id.getTaskId());        }else{            return R.error(result.getString("msg"));        }    }    /**     * 获取有盾数据     */    @RequestMapping(value = "/youdunApi", method = RequestMethod.GET)    public R youdunApi(String id){        adminService.findLoginUser();        User user = userService.selectById(id);        if(user==null){            return R.ok("用户不存在").put("data","");        }        UserIdentity userIdentity = userIdentityService.selectOne(new EntityWrapper<UserIdentity>().eq("user_id", id));        if(userIdentity==null){            return R.ok("该用户未进行实名认证").put("data","");        }        return R.ok().put("data", YoudunUtils.api(userIdentity.getIdentityNum()));    }    /**     * @param phone    手机号     * @param code     验证码     */    @RequestMapping(value = "/loginCode", method = RequestMethod.GET)    public JsonResp loginCode(String phone, String code, String devAlias,String version,HttpServletRequest request){        log.debug("登录");        Boolean flag = smsUtil.checkCode(phone, code);        if (!flag) {            return JsonResp.fa("验证码错误");        }        EntityWrapper<User> ew=new EntityWrapper<>();        ew.eq("phone",phone);        User user=userService.selectOne(ew);        if (user == null) {            return JsonResp.fa("用户不存在！");        }        if(UserStatusEnum.DISABLE.getTypeName().equals(user.getStatus())){            return JsonResp.fa("账号已禁用");        }        if(UserStatusEnum.NOTQUALIFIED.getTypeName().equals(user.getStatus())){            return JsonResp.fa("你已被列入黑名单");        }        if(StringUtils.isNotBlank(user.getSource())){            if(!user.getSource().equals("")){                Channel channel = channelService.selectById(user.getSource());//                if(channel==null || channel.getStatus()==2){                if(channel==null){                    return JsonResp.fa("该应用已关闭登陆");                }            }        }        String token = null;        redisClusterCache.get("3421");        if (redisClusterCache.hasKey(String.valueOf(user.getId()))) {            try {                token = redisClusterCache.getCache(String.valueOf(user.getId()));            } catch (Exception e) {                e.printStackTrace();            }            try {                redisClusterCache.delkey(String.valueOf(user.getId()));                redisClusterCache.delkey(token);            } catch (Exception e) {                e.printStackTrace();            }        }        //生成一个新的token,缓存7天;        token = Md5.md5Encode(phone + new Date().getTime());        try {            redisClusterCache.set(String.valueOf(user.getId()), token, 7 * 24 * 60 * 60);            redisClusterCache.set(token,user,7 * 24 * 60 * 60);        } catch (Exception e) {            e.printStackTrace();        }        Enumeration   typestr = request.getHeaderNames();        String s1 = request.getHeader("user-agent");        UserFunction uFunction = userFunctionService.selectOne(new EntityWrapper<UserFunction>().eq("user_Id", user.getId()));        if(uFunction==null){            uFunction = new UserFunction();            uFunction.setUserId(user.getId());            uFunction.setCreateTime(new Date());            uFunction.setUpdateTime(new Date());            uFunction.setStatus(1);        }        uFunction.setAppVersion(version);        userFunctionService.insertOrUpdate(uFunction);        user.setToken(token);        user.setDevAlias(devAlias);        user.setUptDatetime(new Date());        userService.updateById(user);        return JsonResp.ok(user);    }    /**     *  验证码注册     */    @RequestMapping(value = "/registerCode", method = RequestMethod.GET)    public JsonResp register1(String phone, String code,String channelName,HttpServletRequest request) {        Boolean flag = smsUtil.checkCode(phone, code);        if (!flag) {            return JsonResp.fa("验证码错误");        }        EntityWrapper<User> ew = new EntityWrapper<User>();        ew.eq("phone", phone);        List<User> users = userService.selectList(ew);        if(!users.isEmpty()){            return JsonResp.fa("该号码已被注册");        }        User user = new User();        Channel channel = null;        //判断是否是渠道商引流        if (channelName != null&& !"".equals(channelName) && !"null".equals(channelName)){            EntityWrapper<Channel> wrapper = new EntityWrapper<>();            wrapper.eq("encryption",channelName);            channel = channelService.selectOne(wrapper);            if (channel != null) {                if (channel.getStatus() == 2) {                    return JsonResp.fa("该渠道注册通道已关闭");                }                user.setSource(channel.getId()+"");            }        }        if(channel==null){            String ip = IPConfig.getIpAddr(request);            Download download = downloadService.selectOne(new EntityWrapper<Download>().eq("ip", ip));            if(download!=null){                channel = channelService.selectById(download.getChannlid());                if(channel!=null){                    if(StringUtils.isNotBlank(channel.getName())){                        user.setSource(channel.getId()+"");                    }                }            }        }        user.setGmtDatetime(new Date());        user.setPhone(phone);        user.setStatus(UserStatusEnum.QUALIFIED.getTypeName());        userService.insert(user);        Authentication authentication = new Authentication();        authentication.setGmtDatetime(new Date());        authentication.setUptDatetime(new Date());        authentication.setUserId(user.getId());        authenticationService.insert(authentication);        return JsonResp.ok();    }    public String auth(String status){        if("0".equals(status)){            return "未认证";        }else if("1".equals(status)){            return "已认证";        }else if("2".equals(status)){            return "认证失败";        }else if("3".equals(status)){            return "认证中";        }else{            return "未知状态";        }    }}