package com.rongke.web;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.rongke.commons.JsonResp;import com.rongke.commons.PageDto;import com.rongke.duntong.TongdunApi;import com.rongke.enums.FileType;import com.rongke.enums.StatusEnum;import com.rongke.model.*;import com.rongke.rediscluster.CacheUtil;import com.rongke.service.*;import com.rongke.utils.ConstantFactory;import com.rongke.utils.RSMohe;import com.rongke.web.ans.config.SysReader;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.Logger;import org.apache.poi.xssf.usermodel.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.IOException;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.SQLException;import java.text.SimpleDateFormat;import java.util.*;/** * @UserPhoneRecordController * @用户通话记录Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/userPhoneRecord")@Transactional@CrossOriginpublic class UserPhoneRecordController {    private Logger log = Logger.getLogger(this.getClass());    private static final Long AUTHTIME = 60*5L;//表示认证时间    @Autowired    private UserPhoneRecordService userPhoneRecordService;    @Autowired    private UserService userService;    @Autowired    private UserIdentityService userIdentityService;    @Autowired    private AuthenticationService authenticationService;    @Autowired    private UserPhoneService userPhoneService;    @Autowired    private CallRecordsService callRecordsService;//    @Autowired//    private AdminService adminService;//    @Autowired//    private AdminRoleService adminRoleService;    @Autowired    private CacheUtil redisClusterCache;    /**     * phone 电话 password服务商密码     *     * @同盾运营商接口 第一阶段I     */    @RequestMapping(value = "/mobileAuth1", method = RequestMethod.GET)    public JsonResp mobileAuth(String phone, String password) {        Map<String, String> restMap = new HashMap<>();        User user = userService.selectCurrentUser();        if(!user.getPhone().equals(phone)){            return JsonResp.fa("认证手机号必须要和登录手机号一致");        }        String taskId = null;        //认证第一步 获取认证码和任务id        try {            EntityWrapper ew = new EntityWrapper();            ew.eq("user_id", user.getId());            ew.eq("status", StatusEnum.USED.getTypeName());            UserIdentity userIdentity = userIdentityService.selectOne(ew);            if (userIdentity == null) {                return JsonResp.fa("请先进行身份认证！");            }            String idcardno = userIdentity.getIdentityNum();            String userName = userIdentity.getUserName();//            JSONObject createResultMap = TongdunApi.createTask(userName, idcardno, phone,user.getId(),partnerMoheCode,partnerMoheKey);            JSONObject createResultMap = RSMohe.createTask(userName, idcardno, phone);            Integer code = createResultMap.getInteger("code");            taskId = createResultMap.getString("task_id");            EntityWrapper<UserPhone> ewPhone = new EntityWrapper();            ewPhone.eq("user_id", user.getId());            List<UserPhone> userPhones = userPhoneService.selectList(ewPhone);            if(userPhones!=null && !userPhones.isEmpty()){                for (UserPhone uphone:userPhones){                    uphone.setStatus(StatusEnum.UNUSED.getTypeName());                }                userPhoneService.updateBatchById(userPhones);            }            UserPhone userPhone = new UserPhone();            userPhone.setPhone(phone);            userPhone.setUserId(user.getId());            userPhone.setStatus(StatusEnum.USED.getTypeName());            userPhone.setTaskId(taskId);            userPhone.setGmtDatetime(new Date());            userPhoneService.insert(userPhone);            if (createResultMap != null && code == 0) {//                JSONObject initResultJO = RSMohe.acquire(taskId, phone, password, "INIT", "submit", null,partnerMoheCode,partnerMoheKey);                JSONObject initResultJO = RSMohe.acquire(taskId, phone, password, "INIT", "submit", "","");                restMap.put("code", initResultJO.getString("code"));                restMap.put("message", initResultJO.getString("message"));                restMap.put("taskId", initResultJO.getString("task_id"));                String data = initResultJO.getString("data");                if (StringUtils.isNotEmpty(data)) {                    JSONObject dJO = JSON.parseObject(data);                    restMap.put("nextStage", dJO.getString("next_stage"));                    if (101 == code) {                        restMap.put("authCode", dJO.getString("auth_code"));                    }                }            } else {                return JsonResp.fa(createResultMap.getString("message"));            }        } catch (Exception e) {            e.printStackTrace();        }        return JsonResp.ok(restMap);    }    /**     * @return 返回json     * @同盾运营商接口 第二阶段     */    @RequestMapping(value = "/mobileAuth2", method = RequestMethod.GET)    public JsonResp mobileAuth2(String taskId, String passwd, String nextStage, String code, String txt, String phone) {        User user = userService.selectCurrentUser();        System.out.println("**************************1********************************");        Map<String, String> restMap = new HashMap<>();//        final String partnerMoheCode = ConstantFactory.getConfig().getMoheCode();//        final String partnerMoheKey  = ConstantFactory.getConfig().getMoheKey();        String auth_code = "";        String sms_code = "";        try {            Map<String, String> map = new HashMap<>();            JSONObject initResultJO = null;            if ("100".equals(code)) {                if (nextStage == null || nextStage == "") {                    nextStage = "LOGIN";                }//                initResultJO = TongdunApi.acquire(taskId, phone, passwd, nextStage, "query", map,partnerMoheCode,partnerMoheKey);                initResultJO = RSMohe.acquire(taskId, phone, passwd, nextStage, "query", sms_code, auth_code);            } else if ("101".equals(code) || "105".equals(code)) {                if ("101".equals(code)) {                    map.put("auth_code", txt);                    auth_code = txt;                } else {                    map.put("sms_code", txt);                    sms_code = txt;                }//                initResultJO = TongdunApi.acquire(taskId, phone, passwd, nextStage, "submit", map,partnerMoheCode,partnerMoheKey);                initResultJO = RSMohe.acquire(taskId, phone, passwd, nextStage, "submit", sms_code, auth_code);            }            restMap.put("code", initResultJO.getString("code"));            restMap.put("message", initResultJO.getString("message"));            restMap.put("taskId", initResultJO.getString("task_id"));            String data = initResultJO.getString("data");            if (StringUtils.isNotEmpty(data)) {                JSONObject dJO = JSON.parseObject(data);                if (dJO.getString("next_stage") != null) {                    restMap.put("nextStage", dJO.getString("next_stage"));                } else {                    restMap.put("nextStage", nextStage);                }                if ("101".equals(restMap.get("code"))) {                    restMap.put("authCode", dJO.getString("auth_code"));                }            } else {                restMap.put("nextStage", nextStage);            }            if ("137".equals(restMap.get("code")) || "2007".equals(restMap.get("code"))) {                //保存电话和任务id                EntityWrapper<UserPhoneRecord> ew = new EntityWrapper<>();                ew.eq("user_id", user.getId());                /*ew.eq("status", StatusEnum.USED.getTypeName());*/                UserPhoneRecord userPhoneRecord = userPhoneRecordService.selectOne(ew);                if (userPhoneRecord != null) {//如果之前认证过更新任务id                    userPhoneRecord.setPhone(phone);                    userPhoneRecord.setTaskId(initResultJO.getString("task_id"));                }else{                    UserPhoneRecord upr = new UserPhoneRecord();                    upr.setUserId(user.getId());                    upr.setPhone(phone);                    upr.setTaskId(initResultJO.getString("task_id"));                    userPhoneRecordService.insert(upr);                }////                EntityWrapper<UserPhone> ewPhone = new EntityWrapper();//                ewPhone.eq("user_id", user.getId());//                List<UserPhone> userPhones = userPhoneService.selectList(ewPhone);//                if(userPhones!=null && !userPhones.isEmpty()){//                    for (UserPhone uphone:userPhones){//                        uphone.setStatus(StatusEnum.UNUSED.getTypeName());//                    }//                    userPhoneService.updateBatchById(userPhones);//                }////                UserPhone userPhone = new UserPhone();//                userPhone.setPhone(phone);//                userPhone.setUserId(user.getId());//                userPhone.setStatus(StatusEnum.USED.getTypeName());//                userPhone.setTaskId(initResultJO.getString("task_id"));//                userPhone.setGmtDatetime(new Date());//                userPhoneService.insert(userPhone);                //授权完毕改变状态                EntityWrapper<Authentication> ew3 = new EntityWrapper();                ew3.eq("user_id", user.getId());                Authentication authentication = authenticationService.selectOne(ew3);                if ("0".equals(authentication.getPhoneRecordAuth())) {                    authentication.setPhoneRecordAuth("3");                    authenticationService.updateById(authentication);                    log.error("2+auth");                    redisClusterCache.set(getYysKey(authentication.getUserId()),"",AUTHTIME);                }            }        } catch (Exception e) {            e.printStackTrace();        }        System.out.println("**************************2********************************"+restMap);        return JsonResp.ok(restMap);    }    @RequestMapping(value = "/insertBatch", method = RequestMethod.GET)    public JsonResp insertBatch() {        User c=userService.selectCurrentUser();        Long begin = new Date().getTime();        User user=new User();        user.setPhone("15850222618");        List<UserPhoneRecord> userPhoneRecords = new ArrayList<>();        for (int n=0;n<5000;n++ ) {            UserPhoneRecord userPhoneRecord = new UserPhoneRecord();            userPhoneRecord.setCallType("aa");            userPhoneRecord.setPhone("12345678912");            userPhoneRecord.setConnTimes("times");            userPhoneRecord.setCommFee("fee");            userPhoneRecord.setUserId(250L);            userPhoneRecords.add(userPhoneRecord);        }        userPhoneRecordService.insertBatch(userPhoneRecords,1000);        Long end = new Date().getTime();        System.out.println("cast : " + (end - begin) / 1000 + " ms");        return JsonResp.ok();    }    /**     * @出现用户通话记录     * @param     * @return 返回值JsonResp     */    @RequestMapping(value="/findCallRecordByUser", method = RequestMethod.GET)    public JsonResp findCallRecordByUser(Long userId, Page page, String phone, String userName){        log.debug("查找用户通话记录");        EntityWrapper<CallRecords> wrapper = new EntityWrapper<>();        wrapper.eq("user_id",userId);        if (StringUtils.isNotEmpty(userName)) {            wrapper.like("user_name",userName);        }        if (StringUtils.isNotEmpty(phone)) {            wrapper.eq("phone",phone);        }        Page page1 = callRecordsService.selectPage(page,wrapper);        return JsonResp.ok(new PageDto(page1.getCurrent(),page1.getSize(),page1.getRecords(),page1.getTotal()));    }    public String getYysKey(Long id){        return "yys"+id;    }}