package com.rongke.web;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.mapper.EntityWrapper;/*import com.rongke.duntong.TongdunApi;*/import com.rongke.duntong.TongdunApi;import com.rongke.enums.StatusEnum;import com.rongke.model.*;import com.rongke.service.*;import com.rongke.utils.ConstantFactory;import com.rongke.utils.RRUtils;import com.rongke.utils.RSMohe;import com.rongke.utils.ans.R;import com.rongke.web.ans.config.SysReader;import org.apache.commons.codec.digest.DigestUtils;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;import javax.annotation.Resource;import java.util.*;/** * Created by bilibili on 2018/5/3. */@RestController@RequestMapping(value = "/api/tongdun")@Transactional@CrossOriginpublic class TongdunBackController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private UserPhoneService userPhoneService;    @Autowired    private UserTaobaoService userTaobaoService;    @Autowired    private UserZhifubaoService userZhifubaoService;    @Resource    private DictionaryDataService dictionaryDataService;    @Autowired    private AuthenticationService authenticationService;    @Autowired    private UserContactService userContactService;    @Autowired    private UserTaobaoAddressService userTaobaoAddressService;    @Autowired    private UserTabaoGoodsService userTabaoGoodsService;    @Autowired    private UserZmService zmService;//芝麻操作    @Autowired    private SysDecidingService sysDecidingService;    @Autowired    private TongDunMessageService tongDunMessageService;//保存同盾的数据    /**     * * @return void     * * @同盾运营商回调接收接口     * passback_params 穿透参数 创建任务时候传给同盾 用户id     */    @RequestMapping(value = "/tongDunBack", method = RequestMethod.POST)    public Map getTaobaoAuth(String notify_data, String passback_params) {        log.debug("同盾回调返回数据：" + passback_params);//        final String partnerMoheCode = ConstantFactory.getConfig().getMoheCode();//        final String partnerMoheKey = ConstantFactory.getConfig().getMoheKey();        Map map = new HashMap();        JSONObject notifyData = JSONObject.parseObject(notify_data);        String userId1 = passback_params;        if (notifyData.get("code").toString().equals("2012")) {            return null;        } else if ("0".equals(notifyData.getString("code"))) {            String task_id = notifyData.get("task_id").toString();            JSONObject data = notifyData.getJSONObject("data");            log.error("同盾回调返回数据：用户的task_id"+task_id);//            System.out.print("同盾回调返回数据：" + data);            //运营商认证            if ("100000".equals(data.getString("channel_code"))) {//                JSONObject resultJO = TongdunApi.getAll(task_id,partnerMoheCode,partnerMoheKey);                JSONObject resultJO = RSMohe.getAll(task_id);                JSONObject taskData = resultJO.getJSONObject("data").getJSONObject("task_data");                EntityWrapper ew = new EntityWrapper();                ew.eq("task_id", task_id);                ew.eq("status", StatusEnum.USED.getTypeName());                UserPhone userPhone = userPhoneService.selectOne(ew);                if (userPhone != null) {                    JSONObject accountInfo = taskData.getJSONObject("account_info");                    //入网年龄                    String netAge = accountInfo.getString("net_age");                    //允许审核通过的最低入网年龄                    String phoneAge = null;//                        if(cacheUtil.hHasKey("phoneAge","1")){//                            phoneAge = (String) cacheUtil.hget("phoneAge","1");//                        }else {                    phoneAge = dictionaryDataService.findValueByDictdataName("phoneAge");//                            cacheUtil.hset("phoneAge","1",phoneAge);//                        }                    //网龄小于配置入网年龄机审拒绝                    EntityWrapper<Authentication> wrapper = new EntityWrapper<>();                    wrapper.eq("user_id", userPhone.getUserId());                    Authentication authentication = authenticationService.selectOne(wrapper);                    if (!"1".equals(authentication.getPhoneRecordAuth())) {                        String marks = null;                        if (netAge == null || netAge.equals("未知")) {                            marks = "手机入网年龄为未知，机审失败";                            authentication.setPhoneRecordAuth("2");                            authentication.setMarks(marks);                            authenticationService.updateById(authentication);                            map.put("message", "回调处理成功");                            map.put("code", "200");                            return map;                        } else if (Integer.valueOf(netAge) < Integer.valueOf(phoneAge)) {                            marks = "手机入网年龄不足" + phoneAge + "个月机审失败";                            authentication.setPhoneRecordAuth("2");                            authentication.setMarks(marks);                            authenticationService.updateById(authentication);                            map.put("message", "回调处理成功");                            map.put("code", "200");                            return map;                        }                        //记录账单信息                        StringBuffer billInfoBuffer = new StringBuffer(""); //需要存储入表的账单记录字段                        String billInfoString = taskData.getString("bill_info"); //账单费用                        List<String> billInfoList = JSON.parseArray(billInfoString, String.class);                        for (int i = 0; i < billInfoList.size(); i++) {                            JSONObject billInfoJson = JSON.parseObject(billInfoList.get(i));                            if (i != 0) {                                billInfoBuffer.append(",");                            }                            billInfoBuffer.append(billInfoJson.getString("bill_cycle") + ":" + billInfoJson.getString("bill_fee"));                        }                        userPhone.setNetAge(netAge);                        userPhone.setBillFee(billInfoBuffer.toString());                        userPhone.setOperatorName(data.getString("channel_src"));                        userPhone.setAccountStar(accountInfo.getString("credit_level"));                        userPhone.setAccountStatus(accountInfo.getString("mobile_status"));                        userPhone.setAutonym(accountInfo.getString("real_info"));                        userPhone.setAccountIntegral(accountInfo.getString("credit_point"));                        userPhoneService.updateById(userPhone);                        // 记录通话总时长和次数\                        EntityWrapper<UserContact> wrapperContact = new EntityWrapper<>();                        wrapperContact.eq("user_id", userPhone.getUserId());                        List<UserContact> contacts = userContactService.selectList(wrapperContact);                        JSONArray callInfoArray = JSONObject.parseArray(taskData.getString("call_info"));                        if (callInfoArray.size() > 2) {                            callInfoArray.remove(0);                            callInfoArray.remove(0);                        }                        String callInfo = callInfoArray.toString();                        //计算每个号码的联系次数                        String subString = "";                        String str = "call_other_number";                        if (!StringUtils.isEmpty(callInfo)) {                            for (int idx = 0; (idx = callInfo.indexOf(str, idx)) != -1; idx += str.length()) {                                subString += callInfo.substring(idx, idx + str.length() + 14);                            }                        }                        for (UserContact userContact : contacts) {                            Integer callNum = 0; //记录总次数                            callNum = StringUtils.countMatches(subString, userContact.getPhone());                            userContact.setCallCount(callNum);                        }                        if (contacts != null && !contacts.isEmpty()) {                            userContactService.updateBatchById(contacts);                        }                        authentication.setPhoneRecordAuth("1");                        authenticationService.updateById(authentication);                    }                    map.put("message", "回调处理成功");                    map.put("code", "200");                    return map;                } else {                    System.out.print("系统内部错误");                }                //淘宝认证            } else if (data.getString("channel_type").equals("DS") && data.getString("channel_code").equals("000003")) {                Map<String, SysDeciding> jc = sysDecidingService.decidingType(2);                System.out.println("***********************************11111111111***********************************");                //获取数据                String identityCode = data.getString("identity_code");//返回的身份证号                System.out.print("淘宝认证回调--返回身份证号" + identityCode);//                JSONObject resultJO = TongdunApi.getTaobaoData(task_id,partnerMoheCode,partnerMoheKey);                JSONObject resultJO = RSMohe.getTaobaoData(task_id);                Integer code = resultJO.getInteger("code");                if (code == 0) {                    JSONObject dataJO = resultJO.getJSONObject("data");                    JSONObject taskDataJO = dataJO.getJSONObject("task_data");                    JSONObject baseInfoJO = taskDataJO.getJSONObject("base_info");//个人信息                    JSONObject accountInfo = taskDataJO.getJSONObject("account_info");//账户信息                    JSONArray receiverList = taskDataJO.getJSONArray("receiver_list");//收货地址                    JSONArray orderList = taskDataJO.getJSONArray("order_list");//够买记录                    System.out.println("++++++++++1111++++++++++++++++" + dataJO);                    EntityWrapper<UserTaobao> ew = new EntityWrapper<>();                    ew.eq("task_id", task_id);                    ew.orderDesc(Arrays.asList("gmt_datetime"));                    UserTaobao taobao = userTaobaoService.selectOne(ew);                    if (taobao == null) {//说明回调时候我们自己还没有将task_id 插入user_zhifubao表中                        map.put("message", "请在回调一次");                        map.put("code", "500");                        return map;                    }                    System.out.println("***********************************2222222***********************************");                    EntityWrapper<Authentication> wrapper = new EntityWrapper<>();                    wrapper.eq("user_id", taobao.getUserId());                    Authentication authentication = authenticationService.selectOne(wrapper);                    if (!"1".equals(authentication.getTaobaoAuth())) {                        /**                         * 个人信息                         * */                        if (!baseInfoJO.isEmpty()) {                            taobao.setUserId(taobao.getUserId());                            taobao.setGender(baseInfoJO.get("gender").toString());                            taobao.setMobile(baseInfoJO.get("mobile").toString());                            taobao.setName(baseInfoJO.get("name").toString());                            taobao.setNickName(baseInfoJO.get("nick_name").toString());                            taobao.setStartus("使用");                            taobao.setGmtDatetime(new Date());                            taobao.setUptDatetime(new Date());                            userTaobaoService.updateById(taobao);                        } else {                            map.put("message", "未识别淘宝信息");                            map.put("code", "500");                            return map;                        }                        System.out.println("***********************************33333333***********************************");                        /***                         * 地址信息                         * */                        if (!receiverList.isEmpty()) {                            List<UserTaobaoAddress> userTaobaoAddressList = new ArrayList();                            for (int i = 0; i < receiverList.size(); i++) {                                UserTaobaoAddress userTaobaoAddress = new UserTaobaoAddress();                                userTaobaoAddress.setUserId(taobao.getUserId());                                String str = "";                                if (receiverList.getJSONObject(i).get("area") != null) {                                    str += receiverList.getJSONObject(i).get("area").toString() + "|";                                }                                if (receiverList.getJSONObject(i).get("address") != null) {                                    str += receiverList.getJSONObject(i).get("address").toString();                                }                                userTaobaoAddress.setAddress(str);                                userTaobaoAddress.setGmtDatetime(new Date());                                userTaobaoAddress.setUptDatetime(new Date());                                userTaobaoAddressList.add(userTaobaoAddress);                            }                            userTaobaoAddressService.insertBatch(userTaobaoAddressList);                        }                        System.out.println("***********************************4444444***********************************");                        /***                         * 够买记录                         * */                        if (!orderList.isEmpty()) {                            List<UserTabaoGoods> userTabaoGoodsList = new ArrayList();                            for (int i = 0; i < orderList.size(); i++) {                                UserTabaoGoods userTabaoGoods = new UserTabaoGoods();                                userTabaoGoods.setUserId(taobao.getUserId());                                if (orderList.getJSONObject(i).get("order_shop") != null) {                                    userTabaoGoods.setOrderShop(orderList.getJSONObject(i).get("order_shop").toString());                                }                                if (orderList.getJSONObject(i).get("order_amount") != null) {                                    userTabaoGoods.setOrderAmount(orderList.getJSONObject(i).get("order_amount").toString());                                }                                JSONArray product_list = orderList.getJSONObject(i).getJSONArray("product_list");                                if (product_list.size() == 0) {                                } else if (product_list.size() == 1) {                                    if (product_list.getJSONObject(0).get("product_name") != null) {                                        userTabaoGoods.setProductName(product_list.getJSONObject(0).get("product_name").toString());                                    }                                } else {                                    StringBuilder sb = new StringBuilder();                                    for (int j = 0; j < product_list.size() - 1; j++) {                                        sb.append(product_list.getJSONObject(j).get("product_name") + ",");                                    }                                    userTabaoGoods.setProductName(sb.toString());                                }                                if (orderList.getJSONObject(i).get("order_time") != null) {                                    userTabaoGoods.setOrderTime(orderList.getJSONObject(i).get("order_time").toString());                                }                                if (orderList.getJSONObject(i).get("order_status") != null) {                                    userTabaoGoods.setOrderStatus(orderList.getJSONObject(i).get("order_status").toString());                                }                                if (orderList.getJSONObject(i).get("receiver_addr") != null && !"".equals(orderList.getJSONObject(i).get("receiver_addr"))) {                                    userTabaoGoods.setReceiverAddr(orderList.getJSONObject(i).get("receiver_addr").toString());                                }                                if (orderList.getJSONObject(i).get("receiver_name") != null) {                                    userTabaoGoods.setReceiverName(orderList.getJSONObject(i).get("receiver_name").toString());                                }                                userTabaoGoodsList.add(userTabaoGoods);                            }                            userTabaoGoodsService.insertBatch(userTabaoGoodsList);                        }                        System.out.println("***********************************555555***********************************");                        /***                         * 芝麻分                         */                        if (accountInfo != null && !accountInfo.isEmpty()) {                            UserZm zmf = zmService.selectOne(new EntityWrapper<UserZm>().eq("user_id", taobao.getUserId()));                            if (zmf == null) {                                zmf = new UserZm();                                zmf.setUserId(taobao.getUserId());                            }                            zmf.setRealName(baseInfoJO.getString("name"));//姓名                            zmf.setResultCode(dataJO.getString("channel_code"));//000003淘宝                            zmf.setZmScore(accountInfo.getString("zhima_point"));//芝麻分                            zmf.setJiebeiAmount(accountInfo.getString("jiebei_quota"));//借呗额度                            zmf.setHuabeiTotalAmount(accountInfo.getString("credit_quota"));//花呗总额度                            zmf.setHuabeiAvailAmount(accountInfo.getString("available_quota"));//花呗可用额度                            zmf.setUptDatetime(new Date());                            zmf.setStatus("使用");                            zmService.insertOrUpdate(zmf);                        }                        System.out.println("***********************************666666***********************************");                        Authentication auth = authenticationService.selectOne(new EntityWrapper<Authentication>().eq("user_id", taobao.getUserId()));                        System.out.println("***********************************决策***********************************");                        log.info("accountInfo:" + accountInfo);                        R r = authenticationService.tbZmf(accountInfo.getString("zhima_point"), jc.get("tb_zmf"), auth);                        if (RRUtils.assertCode(r, "1") || RRUtils.assertCode(r, "500")) {                            log.info("tbZmf: " + r  + " auth: "+auth);                            return map;                        }                        if (RRUtils.assertCode(authenticationService.tbHbyq(accountInfo, jc.get("tb_hbyq"), auth), "500")) {                            log.info("tbHbyq " + " auth: "+auth);                            return map;                        }                        if (RRUtils.assertCode(authenticationService.tbJbyq(accountInfo, jc.get("tb_jbyq"), auth), "500")) {                            log.info("tbJbyq "+ " auth: "+auth);                            return map;                        }                        log.info("receiverList:" + receiverList);                        if (RRUtils.assertCode(authenticationService.tbTbdz(receiverList, jc.get("tb_tbdz"), auth), "500")) {                            log.info("tbTbdz "+  " auth: "+auth);                            return map;                        }                        R r5 = authenticationService.tbHbed(accountInfo, jc.get("tb_hbed"), auth);                        if (RRUtils.assertCode(r5, "1") || RRUtils.assertCode(r5, "500")) {                            log.info("tbHbed: " + r5 + " auth: "+auth);                            return map;                        }                        R r6 = authenticationService.tbJbed(accountInfo, jc.get("tb_jbed"), auth);                        if (RRUtils.assertCode(r6, "1") || RRUtils.assertCode(r6, "500")) {                            log.info("tbJbed: " + r6 + " auth: "+auth);                            return map;                        }                        System.out.println("***********************************决策 End***********************************");                        //更改认证信息                        authentication.setTaobaoAuth("1");                        authenticationService.updateById(authentication);                    }                    map.put("message", "回调处理成功");                    map.put("code", "200");                    return map;                }                //支付宝认证回调            } else if (data.getString("channel_type").equals("DS") && data.getString("channel_code").equals("000004")) {                //获取数据                System.out.print("支付宝认证回调--返回身份证号");                System.out.println("************************************支付宝认证回调************************************");//                JSONObject resultJO = TongdunApi.getZhifubaoData(task_id,partnerMoheCode,partnerMoheKey);                JSONObject resultJO = RSMohe.getZhifubaoData(task_id);                System.out.print(resultJO);                Integer code = resultJO.getInteger("code");                if (code == 0) {                    JSONObject dataJO = resultJO.getJSONObject("data");                    JSONObject taskDataJO = dataJO.getJSONObject("task_data");                    JSONObject assetsInfo = taskDataJO.getJSONObject("assets_info");//财富信息                    JSONObject accountInfo = taskDataJO.getJSONObject("account_info");//用户信息//                    JSONObject transInfo = taskDataJO.getJSONObject("trans_info");//交易流水                    EntityWrapper<UserZhifubao> ew = new EntityWrapper<>();                    ew.eq("task_id", task_id);                    UserZhifubao userZhifubao = userZhifubaoService.selectOne(ew);                    if (userZhifubao == null) {//说明回调时候我们自己还没有将task_id 插入user_zhifubao表中                        map.put("message", "请在回调一次");                        map.put("code", "500");                        return map;                    }                    userZhifubao.setStatus(StatusEnum.USED.getTypeName());                    userZhifubao.setEmail(accountInfo.getString("email"));                    userZhifubao.setRealName(accountInfo.getString("real_name"));                    //userZhifubao.setAssetsBalance(assetsInfo.getString("assets_balance"));//账号余额                    //userZhifubao.setAssetsFund(assetsInfo.getString("assets_fund"));//基金                    //userZhifubao.setAssetsYuEBao(assetsInfo.getString("assets_yu_e_bao"));//余额宝                    userZhifubao.setConsumeQuota(assetsInfo.getString("consume_quota"));//花呗消费额度                    userZhifubao.setHuabeiBalance(assetsInfo.getString("huabei_balance"));//花呗余额                    userZhifubao.setHuabeiQuota(assetsInfo.getString("huabei_quota"));//花呗额度                    //userZhifubao.setIdentityCode(accountInfo.getString("identity_code"));//实名身份证                    //userZhifubao.setIdentityType(accountInfo.getString("identity_type"));//身份证类型                    userZhifubao.setRegTime(accountInfo.getString("reg_time"));//注册时间                    userZhifubao.setUptDatetime(new Date());                    userZhifubaoService.updateById(userZhifubao);                    //更改认证信息                    //EntityWrapper<Authentication> wrapper = new EntityWrapper<>();                    //wrapper.eq("user_id", userZhifubao.getUserId());                    //Authentication authentication = new Authentication();                    //authentication.setZhifubaoAuth("1");                    //authenticationService.update(authentication, wrapper);                    map.put("message", "回调处理成功");                    map.put("code", "200");                    System.out.println("******************************成功支付宝************************************");                    return map;                }            }            System.out.print(data.getString("message"));        }        return null;    }    public static void main(String[] args) {        System.out.println(DigestUtils.md5Hex("lqx888"));    }}