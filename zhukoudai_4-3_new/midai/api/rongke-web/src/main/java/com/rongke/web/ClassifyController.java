package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.google.common.collect.Lists;import com.rongke.commons.JsonResp;import com.rongke.enums.EvaluationEnum;import com.rongke.enums.StatusEnum;import com.rongke.model.*;import com.rongke.rediscluster.CacheUtil;import com.rongke.service.*;import com.rongke.utils.DateUtils;import com.rongke.utils.StringUtil;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.math.BigDecimal;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @ClassifyController * @分类Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/classify")@Transactional@CrossOriginpublic class ClassifyController {    /*implements ApplicationContextAware*/    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private ClassifyService classifyService;    @Autowired    private GoodsService goodsService;    @Autowired    private UserService userService;    @Autowired    private CacheUtil redisClusterCache;    @Autowired    private EvaluationService evaluationService;    @Autowired    private OrderService orderService;    //  private ApplicationContext applicationContext;/*    @Override    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {        evaluationService = applicationContext.getBean(EvaluationService.class);    }*/    /**     * @添加分类     * @param classify     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addClassify(@RequestBody Classify classify){        log.debug("添加分类");        if(classify.getId()!=null && !"".equals(String.valueOf(classify.getId()))){//更新            Classify classifyOld=classifyService.selectById(classify.getId());            if(StringUtil.isNotEmpty(classify.getPicUrl())){                classifyOld.setPicUrl(classify.getPicUrl());            }            if (StringUtil.isNotEmpty(classify.getName())){                classifyOld.setName(classify.getName());            }            if (StringUtil.isNotEmpty(classify.getInitialPrice())){                classifyOld.setInitialPrice(classify.getInitialPrice());            }            classifyService.updateById(classifyOld);            if(redisClusterCache.hasKey(classifyOld.getName())){                redisClusterCache.delkey(classifyOld.getName());            }        }else {//添加            //查看有没有添加过            EntityWrapper<Classify>  ew=new EntityWrapper<>();            ew.eq("name",classify.getName());            Classify oldClassify=classifyService.selectOne(ew);            if(oldClassify!=null){                oldClassify.setName(classify.getName());                oldClassify.setPicUrl(classify.getPicUrl());                oldClassify.setInitialPrice(classify.getInitialPrice());                classifyService.updateById(oldClassify);                if(redisClusterCache.hasKey(oldClassify.getName())){                    redisClusterCache.delkey(oldClassify.getName());                }            }else {                classifyService.insert(classify);            }        }        //删除查询缓存//        if(cacheUtil.hasKey("initialPrice")){//            cacheUtil.delkey("initialPrice");//        }        return JsonResp.ok();    }    /**     * @根据品牌获取评估价值 和 有没有评估过     * @param name  品牌名字     * @return 返回值JsonResp     */    @RequestMapping(value="/getInitialPrice", method = RequestMethod.GET)    public JsonResp updateClassify(String name){        log.debug("根据品牌获取评估价值 手机品牌："+name);        //判断有没有评估过        User user = userService.selectCurrentUser();        EntityWrapper<Evaluation> eew=new EntityWrapper<>();        eew.eq("user_id",user.getId());//        ew.isNotNull("status");        eew.ne("status", StatusEnum.OVER.getTypeName());        List<Evaluation> evaluationList=evaluationService.selectList(eew);        Boolean isclick=true;        if(!evaluationList.isEmpty()){            for(int i=0,y=evaluationList.size();i<y;i++){                Evaluation evaluation= evaluationList.get(i);                //id 不同或者 已经被拒绝过 不能点击回租                if(!StatusEnum.APPLYING.getTypeName().equals(evaluation.getStatus())){                    isclick=false;                }            }        }        Map map=new HashMap();        String initialPrice=null;        //如果缓存中有直接获取        if(redisClusterCache.hasKey(name)){            try {                initialPrice=(String) redisClusterCache.getCache(name);            } catch (Exception e) {                e.printStackTrace();            }        }else {            //            //判断是不是苹果手机            if(name.contains("iPhone")){                EntityWrapper<Goods> ew=new EntityWrapper<>();                ew.eq("name",name);//            ew.setSqlSelect("initial_price");                Goods goods=goodsService.selectOne(ew);                if(goods==null){                    initialPrice="2300";                } else {                    initialPrice=goods.getInitialPrice();                }            } else {                EntityWrapper<Classify> ew=new EntityWrapper<>();                ew.eq("name",name);//            ew.setSqlSelect("initial_price");                Classify classify=classifyService.selectOne(ew);                if(classify==null){                    initialPrice="1429";                }else {                    initialPrice=classify.getInitialPrice();                }            }            try {                redisClusterCache.set(name,initialPrice,1*24*60*60);//缓存一天            } catch (Exception e) {                e.printStackTrace();            }        }        map.put("isclick",isclick);//        map.put("initialPrice",initialPrice);        map.put("initialPrice",3000);        List<Evaluation> evaluations = evaluationService.selectList(new EntityWrapper<Evaluation>()                .eq("user_id", user.getId())                .ne("status", StatusEnum.OVER.getTypeName()));        if(!evaluations.isEmpty()){            BigDecimal lent = new BigDecimal("0.00");//已借            BigDecimal canBorrow = new BigDecimal("0.00");//可借            List<Long> orderIDS = Lists.newArrayList();            for(Evaluation e:evaluations){                if(!e.getStatus().equals(StatusEnum.APPLYING.getTypeName())&&!e.getStatus().equals(EvaluationEnum.CHECKREFUSE.getTypeName())&&!e.getStatus().equals(StatusEnum.REFUSED.getTypeName())) {                    canBorrow = canBorrow.add(e.getEvaluationPrice());                    lent = lent.add(e.getRentMoney());                    orderIDS.add(e.getId());                }            }            String canBorrows = canBorrow.stripTrailingZeros().toPlainString();            String lents = lent.stripTrailingZeros().toPlainString();            if(Long.valueOf(canBorrows)<=0&&Long.valueOf(lents)<=0){                canBorrows = "3000";            }            map.put("canBorrow",canBorrows);            map.put("lent",lents);        }        return JsonResp.ok(map);    }    /**     * @根据id查找分类（分页）     * @return 返回值JsonResp     */    @RequestMapping(value="/selectPage", method = RequestMethod.GET)    public JsonResp selectPage(Page page){        log.debug("查找分类列表");        Page<Classify> classifys = classifyService.selectPage(page);        return JsonResp.ok(classifys);    }    /**     * @根据id查找分类     * @return 返回值JsonResp     */    @RequestMapping(value="/selectList", method = RequestMethod.GET)    public JsonResp selectList(){        log.debug("查找分类列表");        List<Classify> classifys = classifyService.selectList(null);        return JsonResp.ok(classifys);    }    /**     * @根据id查找     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectOne(Long id){        log.debug("查找分类");        Classify classify = classifyService.selectById(id);        return JsonResp.ok(classify);    }    /**     * @根据id查找分类     * @return 返回值JsonResp     */    @RequestMapping(value="/deleteById", method = RequestMethod.GET)    public JsonResp deleteById(Long id){        log.debug("查找分类列表");        classifyService.deleteById(id);        return JsonResp.ok();    }}