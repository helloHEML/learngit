package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.google.common.collect.Lists;import com.rongke.commons.JsonResp;import com.rongke.model.Admin;import com.rongke.model.AdminPermission;import com.rongke.model.AdminRole;import com.rongke.model.AdminRolePermission;import com.rongke.service.AdminPermissionService;import com.rongke.service.AdminRolePermissionService;import com.rongke.service.AdminRoleService;import com.rongke.service.AdminService;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.R;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.Arrays;import java.util.List;import java.util.Map;/** * @AdminRoleController * @Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/adminRole")@Transactional@CrossOriginpublic class AdminRoleController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private AdminRoleService adminRoleService;    @Autowired    private AdminService adminService;//人员    @Autowired    private AdminRolePermissionService adminRolePermissionService;// 关联菜单    @Autowired    private AdminPermissionService adminPermissionService;//菜单    /**     * @添加     * @param adminRole     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addAdminRole(@RequestBody AdminRole adminRole){        log.debug("添加");        adminRoleService.insert(adminRole);        return JsonResp.ok(adminRole);    }    /**     * @修改     * @param adminRole     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateAdminRole(@RequestBody AdminRole adminRole){        log.debug("修改");        adminRoleService.updateById(adminRole);        return JsonResp.ok(adminRole);    }    /**     * @改变角色状态     * @param roleId 角色id     * @param status 状态     * @return 返回值JsonResp     */    @RequestMapping(value="/changeStatus", method = RequestMethod.GET)    public JsonResp changeRoleStatus(Integer roleId,String status){        log.debug("改变角色状态");        AdminRole adminRole = adminRoleService.selectById(roleId);        if("3".equals(status)){ //删除            adminRoleService.deleteById(roleId);        }else if("1".equals(status)){            adminRole.setAvailable("1");        }else if("2".equals(status)){            adminRole.setAvailable("2");        }        adminRoleService.updateById(adminRole);        return JsonResp.ok();    }    /**     * @查找所有角色列表     * @return 返回值JsonResp     */    @RequestMapping(value="/findRoleList", method = RequestMethod.GET)    public JsonResp findRoleList(){        log.debug("查找所有角色列表");        List<AdminRole> adminRoles = adminRoleService.selectList(null);        return JsonResp.ok(adminRoles);    }    /**     *  获取角色     */    @RequestMapping(value="/rolePage", method = RequestMethod.GET)    public PageUtils rolePage(@RequestParam Map<String,Object> params){        Admin loginUser = adminService.findLoginUser();        return adminRoleService.rolePage(params);    }    /**     * 添加     */    @RequestMapping(value = "/Aadd",method = RequestMethod.POST)    public R add(@RequestBody AdminRole adminRole){        Admin loginUser = adminService.findLoginUser();        if(StringUtils.isBlank(adminRole.getAuth())){            return R.error("权限未设置");        }        adminRoleService.insert(adminRole);        List<AdminRolePermission> rops = Lists.newArrayList();        String [] rpids = adminRole.getAuth().split(",");        for (String s:rpids){            if(StringUtils.isNotBlank(s.trim())){                AdminRolePermission rp = new AdminRolePermission();                rp.setAdminPermissionId(Integer.valueOf(s.trim()));                rp.setAdminRoleId(adminRole.getId());                rops.add(rp);            }        }        adminRolePermissionService.insertBatch(rops);        return R.ok();    }    /**     * 修改     */    @RequestMapping(value = "/Aupdate",method = RequestMethod.POST)    public R Aupdate(@RequestBody AdminRole adminRole){        Admin loginUser = adminService.findLoginUser();        if(StringUtils.isBlank(adminRole.getAuth())){            return R.error("权限未设置");        }        //删除已存在的权限        adminRolePermissionService.delete(new EntityWrapper<AdminRolePermission>().eq("admin_role_id",adminRole.getId()));        List<AdminRolePermission> rops = Lists.newArrayList();        String [] auth =  adminRole.getAuth().split(",");        for (String s:auth){            if(StringUtils.isNotBlank(s.trim())){                AdminRolePermission rp = new AdminRolePermission();                rp.setAdminRoleId(adminRole.getId());                rp.setAdminPermissionId(Integer.valueOf(s.trim()));                rops.add(rp);            }        }        adminRoleService.insertOrUpdate(adminRole);        adminRolePermissionService.insertOrUpdateBatch(rops);        return R.ok();    }    /**     * 启用/禁用     */    @RequestMapping(value = "/disable",method = RequestMethod.GET)    public R disable(Integer id,String available){        Admin loginUser = adminService.findLoginUser();        AdminRole adminRole = new AdminRole();        adminRole.setId(id);        adminRole.setAvailable(available);        adminRoleService.updateById(adminRole);        return R.ok();    }    /**     * 根据type获得所有列表     */    @RequestMapping(value = "/selectAll",method = RequestMethod.GET)    public R selectAll(Integer type){        Admin loginUser = adminService.findLoginUser();        List<AdminRole> adminRoles = adminRoleService.selectList(new EntityWrapper<AdminRole>().eq("type", type));        return R.ok().put("data",adminRoles);    }    /**     *  获取所有情况 包含拥有的权限列表     */    @RequestMapping(value="/info/{id}", method = RequestMethod.GET)    public R info(@PathVariable("id") String id){        Admin loginUser = adminService.findLoginUser();        AdminRole adminRole = adminRoleService.selectById(id);        if(adminRole==null){            return R.error("角色不存在");        }        List<AdminPermission> adminPermissions = adminPermissionService.selectList(new EntityWrapper<AdminPermission>()                .where("id in (select admin_permission_id from admin_role_permission where admin_role_id = {0})",adminRole.getId())        );        Integer[]aut = new Integer[adminPermissions.size()];        int i = 0;        for(AdminPermission a:adminPermissions){            if(a.getParentid()!=0){                aut[i] = a.getId();                i++;            }        }        return R.ok("操作成功").put("data",adminRole).put("auth",aut);    }    @RequestMapping(value = "/delete",method = RequestMethod.POST)    public R delete(@RequestBody Long[] ids){        Admin loginUser = adminService.findLoginUser();        if(ids==null||ids.length==0){            return R.error("请选择角色");        }        List<Long> longs = Arrays.asList(ids);        if(longs.contains(1L)){            return R.error("核心角色无法删除");        }        adminRoleService.deleteBatchIds(Arrays.asList(ids));        //顺便删除拥有的权限        adminRolePermissionService.delete(new EntityWrapper<AdminRolePermission>().in("admin_role_id",Arrays.asList(ids)));        return R.ok();    }    /**     * 获得select All     */    @RequestMapping(value = "/selectAllz",method = RequestMethod.GET)    public R selectAllz(){        Admin loginUser = adminService.findLoginUser();        List<AdminRole> available = adminRoleService.selectList(new EntityWrapper<AdminRole>()                .eq("available", "1")        );        return R.ok().put("data",available);    }}