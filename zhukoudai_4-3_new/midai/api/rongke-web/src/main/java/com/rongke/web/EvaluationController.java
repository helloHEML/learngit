package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.google.common.collect.Lists;import com.rongke.commons.JsonResp;import com.rongke.commons.PageDto;import com.rongke.enums.*;import com.rongke.model.*;import com.rongke.rediscluster.CacheUtil;import com.rongke.service.*;import com.rongke.utils.DateUtils;import com.rongke.utils.OrderUtils;import com.rongke.utils.RSMohe;import com.rongke.utils.StringUtil;import com.rongke.utils.ans.MapUtils;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.R;import com.rongke.web.annotation.AUTH;import com.rongke.web.saas.RSSmsUtils;import com.rongke.web.saas.RSTcreditAPI;import com.rongke.web.ans.utils.TcreditAPI;import com.rongke.web.common.JpushClientUtil;import com.rongke.web.config.ConfigUtil;import com.rongke.web.sms.SmsUtils;import com.rongke.yinshengbao.Config;import com.rongke.yinshengbao.TradeUtil;import net.sf.json.JSONObject;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.Logger;import org.apache.poi.ss.usermodel.Workbook;import org.apache.poi.xssf.usermodel.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStream;import java.math.BigDecimal;import java.net.URLEncoder;import java.text.SimpleDateFormat;import java.util.*;/** * @version : Ver 1.0 * @EvaluationController * @评估报告Controller */@RestController@RequestMapping(value = "/api/evaluation")@Transactional@CrossOriginpublic class EvaluationController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private EvaluationService evaluationService;    @Autowired    private DictionaryDataService dictionaryDataService;    @Autowired    private ParamSettingService paramSettingService;    @Autowired    private GoodsService goodsService;    @Autowired    private BankCardService bankCardService;    @Autowired    private UserIdentityService userIdentityService;    @Autowired    private TongdunAuditService tongdunAuditService;    @Autowired    private UserService userService;    @Autowired    private ProtocolService protocolService;    @Autowired    private UserMessageService userMessageService;    @Autowired    private OrderService orderService;    @Autowired    private AdminService adminService;    @Autowired    private AdminRoleService adminRoleService;//用户角色    @Autowired    private DataReportService dataReportService;//统计    @Autowired    private RepayRecordService repayRecordService;//    @Autowired    private CacheUtil redisClusterCache;//缓存    @Autowired    private PushMsgService pushMsgService;//极光推送    @Autowired    private PushMsgRecordService pushMsgRecordService;//极光推送记录    @Autowired    private ChannelService channelService;//渠道商    @Autowired    private TrackLogService trackLogService;//跟踪信息    @Autowired    private SmsUtils smsUtil;//短信    @Autowired    private TcreditAPI tcreditAPI;    @Autowired    private TianzhenMessageService tianzhenMessageService;    @Autowired    private TianchuangOderThirdService tianchuangOderThirdService;    @Autowired    private RiskDecisionService riskDecisionService;    @Autowired    private UserPhoneService userPhoneService;    @Autowired    private TongDunMessageService tongDunMessageService;    /**     * 评估提额     *     * @param id     * @param money     * @return     */    @RequestMapping(value = "/raiseEval")    public R raiseEval(@RequestParam String id, @RequestParam String money) {        //登陆验证        Admin admin = adminService.findLoginUser();        String payMoney = new String(ConfigUtil.decode(money));//获取解密后的打款金额        Evaluation evaluation = evaluationService.selectById(id);        if (evaluation.getStatus().equals(StatusEnum.PASS.getTypeName())) {            evaluation.setEvaluationPrice(new BigDecimal(payMoney).add(evaluation.getEvaluationPrice()));        } else {            return R.error("只能对已打款评估进行提额");        }        BigDecimal qian = new BigDecimal(payMoney);        evaluationService.updateById(evaluation);        int i = JpushClientUtil.sendToAliasId(Arrays.asList(evaluation.getUserId().toString()), "借贷提额", "借贷提额", "您借贷金额已被提高，可以继续借贷了", "");        System.err.println(i == 1 ? "推送成功" : "推送失败");        if (i == 1) {            PushMsg pushMsg = pushMsgService.selectOne(new EntityWrapper<PushMsg>().eq("title", "借贷提额"));            if (pushMsg != null) {                PushMsgRecord pushMsgRecord = new PushMsgRecord();                pushMsgRecord.setUserId(evaluation.getUserId());                pushMsgRecord.setPushMsgId(pushMsg.getId());                pushMsgRecordService.insert(pushMsgRecord);            }        }        User user = userService.selectById(evaluation.getUserId());        Order order = orderService.orderStatus(new MapUtils().put("evaluationId", String.valueOf(evaluation.getId())));        //TODO 添加信息跟踪        TrackLog log = new TrackLog();        log.setTitle("【申请单】 提额:" + evaluation.getEvaluationPrice());        log.setType(1);        log.setAdminId(admin.getId().longValue());        log.setEvaluationId(evaluation.getId());        log.seteStatus(evaluation.getStatus());        if (order != null) {            log.setoStatus(order.getStatus());        }        log.setCreateTime(new Date());        log.setStatus(1);        trackLogService.insert(log);        //短信推送        try {            //提额            Boolean sendsms = RSSmsUtils.sendsms(user.getPhone(), "", "42342");            System.out.println(sendsms);        } catch (Exception e) {            e.printStackTrace();        }        return R.ok();    }    /**     * @param evaluation     * @return 返回值JsonResp     * @添加评估报告     */    @RequestMapping(value = "/addEvaluation", method = RequestMethod.POST)    public JsonResp addEval(@RequestBody Evaluation evaluation) {        log.error("进入添加评估报告"+JSONObject.fromObject(evaluation));        User user = userService.selectCurrentUser();        log.error("进入添加评估报告当前登录人"+JSONObject.fromObject(user));        if (UserStatusEnum.NOTQUALIFIED.getTypeName().equals(user.getStatus())) {            return JsonResp.fa("对不起，该账号已被拒绝评估");        }        String ids = "";        evaluation.setUserId(user.getId());        //查询有没有评估过，如果有删除之前评估数据        EntityWrapper<Evaluation> eaew = new EntityWrapper<>();        eaew.eq("user_id", user.getId());        eaew.eq("status", EvaluationEnum.APPLYING.getTypeName());        evaluationService.delete(eaew);        //..todo 先上线后面优化        EntityWrapper<Evaluation> review = new EntityWrapper<>();        review.eq("user_id", user.getId());        review.eq("status", EvaluationEnum.CHECKREFUSE.getTypeName());        Evaluation evaluationOne = evaluationService.selectOne(review);        if (evaluationOne != null) {//被拒绝            Long aLong1 = DateUtils.DaysubDay(DateUtils.dateSimpleSFM(evaluationOne.getGmtDatetime()), DateUtils.dateSimpleSFM(new Date()));            if (aLong1 < 30) {                return JsonResp.fa("申请已被拒," + (30 - aLong1) + "天后可再次申请");            }        }        EntityWrapper<Evaluation> wrapper = new EntityWrapper<>();        wrapper.eq("user_id", user.getId());        wrapper.eq("status", EvaluationEnum.REFUSE.getTypeName());        Evaluation evaluationOnes = evaluationService.selectOne(wrapper);        if (evaluationOnes != null) {//被拒绝            Long aLong1 = DateUtils.DaysubDay(DateUtils.dateSimpleSFM(evaluationOnes.getGmtDatetime()), DateUtils.dateSimpleSFM(new Date()));            if (aLong1 < 30) {                return JsonResp.fa("申请已被拒," + (30 - aLong1) + "天后可再次申请");            }        }        EntityWrapper<Evaluation> wrapperAPPLYING = new EntityWrapper<>();        wrapperAPPLYING.eq("user_id", user.getId());        wrapperAPPLYING.in("status", EvaluationEnum.WAITCHECK.getTypeName() +                "," + EvaluationEnum.PASS.getTypeName() +                "," + EvaluationEnum.WAITAUDIT.getTypeName() + "," + EvaluationEnum.REPAYMENT +                "," + EvaluationEnum.WAITMONEY.getTypeName());        Evaluation evaluationOnesAPPLYING = evaluationService.selectOne(wrapperAPPLYING);        if (evaluationOnesAPPLYING != null) {//            if (EvaluationEnum.WAITCHECK.getTypeName().equals(evaluationOnesAPPLYING.getStatus())) {                return JsonResp.fa("有未完成订单待正在审核中，请勿重复提交");            } else if (EvaluationEnum.PASS.getTypeName().equals(evaluationOnesAPPLYING.getStatus())) {                return JsonResp.fa("有订单处理中，请勿重复提交");            } else if (EvaluationEnum.WAITAUDIT.getTypeName().equals(evaluationOnesAPPLYING.getStatus())) {                return JsonResp.fa("有待打款订单，请勿重复提交");            } else if (EvaluationEnum.REPAYMENT.getTypeName().equals(evaluationOnesAPPLYING.getStatus())) {                return JsonResp.fa("有未完成订单处理中，请勿重复提交");            } else if (EvaluationEnum.WAITMONEY.getTypeName().equals(evaluationOnesAPPLYING.getStatus())) {                return JsonResp.fa("有未完成订单处理中，请勿重复提交");            }            return JsonResp.fa("有未完成订单处理中，请勿重复提交");        }        //查询银行卡        EntityWrapper<BankCard> bcew = new EntityWrapper<>();        bcew.eq("user_id", user.getId());        bcew.eq("status", StatusEnum.USED.getTypeName());        BankCard bankCard = bankCardService.selectOne(bcew);        if (bankCard != null) {            evaluation.setBankCardId(bankCard.getId());        }else{            return JsonResp.fa("未绑定银行卡");        }        UserIdentity userIdentity = userIdentityService.selectOne(new EntityWrapper<UserIdentity>().eq("user_id", user.getId()));        if (userIdentity == null) {            return JsonResp.fa("该用户未进行实名认证");        }        String identityNum = userIdentity.getIdentityNum();        com.alibaba.fastjson.JSONObject jsonObject = null;        try {//            jsonObject = tcreditAPI.verifyIdcard(user.getRealName(),user.getPhone(), identityNum);            jsonObject = RSTcreditAPI.verifyIdcard(user.getRealName(), user.getPhone(), identityNum);        } catch (Exception e) {            e.printStackTrace();        }        //  TianZhenMessage tz = tianzhenMessageService.selectOne(new EntityWrapper<TianZhenMessage>().eq("user_id", userId));        if (!"0".equals(jsonObject.getString("status"))) {            return JsonResp.fa(jsonObject.getString("message"));        }        com.alibaba.fastjson.JSONObject dataJSONObject = jsonObject.getJSONObject("data");        /*if ("0".equals(dataJSONObject.getJSONObject("result").getString("fee_status"))) {            return R.error("该用户暂无记录");        }*/        TianZhenMessage tz = null;        if (tz == null) {            tz = new TianZhenMessage();            tz.setCreateTime(new Date());            tz.setUserId(user.getId());        }        String result = dataJSONObject.getJSONObject("result").toString();        tz.setTianzhenData(result);        tz.setSeqNum(jsonObject.getString("seqNum"));        tz.setGid(jsonObject.getString("gid"));        tz.setUpdateTime(new Date());        tianzhenMessageService.insert(tz);//insertOrUpdate       /* if("0".equals(mapRis.get("code"))){            return JsonResp.fa("机审不通过");//mapRis.get("status")        }else if ("-1".equals(mapRis.get("code"))){            return JsonResp.fa("系统参数不符合");//mapRis.get("status")        }*/        //系统参数        EntityWrapper<ParamSetting> wrapperP = new EntityWrapper<>();        wrapperP.eq("status", StatusEnum.USED.getTypeName());        ParamSetting paramSetting = paramSettingService.selectOne(wrapperP);        evaluation.setParamSettingId(paramSetting.getId());        BigDecimal rentMoney = evaluation.getEvaluationPrice();//订单金额按照这个钱算        //查询是否存在已出款评估        List<Evaluation> ck = evaluationService.selectList(new EntityWrapper<Evaluation>()                .eq("user_id", user.getId())                .eq("status", StatusEnum.PASS.getTypeName()));        if (!ck.isEmpty()) {            BigDecimal evaluationPrice = new BigDecimal("0.00");            BigDecimal rentMoneys = new BigDecimal("0.00");            for (Evaluation c : ck) {                evaluationPrice = evaluationPrice.add(c.getEvaluationPrice());                rentMoneys = rentMoneys.add(c.getRentMoney());                c.setEvaluationPrice(c.getRentMoney());//                evaluationService.updateById(c);                ids += "," + c.getId();            }            if ((evaluationPrice.subtract(rentMoneys)).compareTo(new BigDecimal("100")) != -1) {//余额大于一百                rentMoney = evaluationPrice.subtract(rentMoneys);                evaluation.setEvaluationPrice(rentMoney);            }        }//      BigDecimal rentMoney=  evaluation.getEvaluationPrice().multiply(new BigDecimal("0.8")).setScale(2,BigDecimal.ROUND_HALF_UP);        //决策引擎的判断        log.debug("决策引擎的判断");        //Map<String,String> mapRis= riskDecisionService.getUserRiskStatus(user.getId());        Map map = riskDecisionService.getUserRiskStatus(evaluation.getUserId());        if ("0".equals(map.get("code"))) {            String refuseReason = String.format("[JC][%s]", map.get("status").toString());            evaluation.setRefuseReason(refuseReason + "+" + StatusEnum.JCREFUSER.getTypeName());            log.info(refuseReason);            evaluation.setStatus(EvaluationEnum.CHECKREFUSE.getTypeName());            evaluation.setGmtDatetime(new Date());            //..todo type            evaluation.setType(3);        } else {            evaluation.setRentMoney(rentMoney);//回租价值            evaluation.setStatus(StatusEnum.APPLYING.getTypeName());            evaluation.setGmtDatetime(new Date());        }        //保证金        BigDecimal deposit = new BigDecimal(paramSetting.getCashPledge()).multiply(rentMoney);        //评估费        BigDecimal assessMoney = new BigDecimal(paramSetting.getAssessMoney());        //扣掉5天租金        BigDecimal rentDayPortion = new BigDecimal(paramSetting.getRentDayMoney()).multiply(rentMoney).multiply(new BigDecimal(7));//日租金比例/*paramSettingService.days*/        BigDecimal payMoney = rentMoney.subtract(rentDayPortion).subtract(deposit).subtract(assessMoney).setScale(2, BigDecimal.ROUND_HALF_UP);        evaluation.setPayMoney(payMoney);        int i1 = evaluationService.selectCount(new EntityWrapper<Evaluation>().eq("user_id", user.getId()));        evaluation.setEvaNumber(i1 + 1);        //分派审核员        //获得工作量最小的审核员        Channel channel = channelService.selectOne(new EntityWrapper<Channel>().setSqlSelect("principal").eq("id", user.getSource()));        Integer isfp = 0;//是否分配        List<Admin> adminList = Lists.newArrayList();        if (channel != null) {            //查询是否上线            adminList = adminService.selectList(new EntityWrapper<Admin>()                    .eq("admin_role_id", channel.getPrincipal())                    .eq("status", "上线"));            if (adminList.isEmpty()) { //表明该 角色都没有上线 直接分给所有上线审核员                adminList = adminService.selectList(new EntityWrapper<Admin>()                        .eq("status", "上线")                        .where("admin_role_id in (select id from admin_role where type={0})", "1")                );            }        } else {            //  没有设置就给所有审核员进行分配            //  获得所有审核员            adminList = adminService.selectList(new EntityWrapper<Admin>()                    .eq("status", "上线")                    .where("admin_role_id in (select id from admin_role where type={0})", "1")            );        }        if (!adminList.isEmpty()) {            for (Admin admin : adminList) {                Integer i = count(admin.getId());                if (isfp == 0) {                    if (i == 0) {//没有分配审核Id                        evaluation.setAuditorId(admin.getId());                        isfp = 1;                    } else {                        admin.setHaveCount(i);                    }                }            }            if (isfp == 0) {                for (Admin a : adminList) {                    Integer min = 1;                    for (Admin b : adminList) {                        if (!a.getId().equals(b.getId()) && a.getHaveCount() >= b.getHaveCount()) {                            min = 0;                        }                    }                    if (isfp == 0 && min == 1) {//是最小                        evaluation.setAuditorId(a.getId());                        isfp = 1;                    }                }            }        }        //分派审核员 end        log.error("准备添加"+JSONObject.fromObject(evaluation));        evaluationService.insert(evaluation);        evaluation.setParamSetting(paramSetting);        evaluation.setBankCard(bankCard);        if (StringUtils.isNotBlank(ids)) {            ids = ids.substring(1);        }        TianchuangOderThird tianchuangOderThird = new TianchuangOderThird();        tianchuangOderThird.setTianchuangId(tz.getId());        tianchuangOderThird.setEvaluationId(evaluation.getId());        tianchuangOderThirdService.insert(tianchuangOderThird);        return JsonResp.ok(evaluation, ids);    }    /**     * @param id     * @return 返回值JsonResp     * @根据id查找评估报告     */    @RequestMapping(value = "/selectOne", method = RequestMethod.GET)    public JsonResp selectEvaluation(Long id) {        log.debug("查找评估报告");        Evaluation evaluation = evaluationService.selectById(id);        return JsonResp.ok(evaluation);    }    /**     * 获得登陆人是否评估过     */    @RequestMapping(value = "/ausrEvaluation", method = RequestMethod.GET)    public R selectUsrEvaluation() {        User user = userService.selectCurrentUser();        BigDecimal apply = new BigDecimal("0.00");        BigDecimal lent = new BigDecimal("0.00");        BigDecimal zong = new BigDecimal("0.00");        BigDecimal shen = new BigDecimal("0.00");        List<Evaluation> evaluations = evaluationService.selectList(new EntityWrapper<Evaluation>()                .eq("user_id", user.getId())                .ne("status", StatusEnum.OVER.getTypeName()));        //获得最新审核失败or拒绝的数据的数据        Evaluation review = evaluationService.selectOne(new EntityWrapper<Evaluation>()                .eq("user_id", user.getId())                .and("(status = {0} or status = {1})", EvaluationEnum.CHECKREFUSE.getTypeName(), EvaluationEnum.REFUSE.getTypeName())                .orderDesc(Arrays.asList("gmt_datetime")).last("limit 1"));        if (evaluations.isEmpty()) {//没有提交过审核            if (review != null) {//被拒绝                Long aLong1 = DateUtils.DaysubDay(DateUtils.dateSimpleSFM(review.getGmtDatetime()), DateUtils.dateSimpleSFM(new Date()));                if (aLong1 < 30) {                    return R.ok("0", "申请已被拒," + (30 - aLong1) + "天后可再次申请").put("data", 5).put("all", 3000);                }            }            return R.ok("0", "success").put("data", 0).put("all", 3000);        } else {            int yuqi = 0;            for (Evaluation e : evaluations) {                if (!e.getStatus().equals(StatusEnum.APPLYING.getTypeName()) && !e.getStatus().equals(EvaluationEnum.CHECKREFUSE.getTypeName()) && !e.getStatus().equals(EvaluationEnum.REFUSE.getTypeName())) {                    if (e.getStatus().equals(StatusEnum.WAITAUDIT.getTypeName()) || e.getStatus().equals(EvaluationEnum.WAITCHECK.getTypeName()) || e.getStatus().equals(OrderStatusEnum.NOT_ARRIVAL.getTypeName())) {//待出款                        if (e.getRentMoney() == null || "".equals(e.getRentMoney())) {                            e.setRentMoney(new BigDecimal("0"));                        }                        apply = apply.add(e.getRentMoney());                    }                    if (e.getStatus().equals(StatusEnum.PASS.getTypeName())) {//已打款                        Order order = orderService.selectOne(new EntityWrapper<Order>().eq("evaluation_id", e.getId()));                        Long aLong = DateUtils.DaysubDay(DateUtils.dateSimpleSFM(order.getUptDatetime()), DateUtils.dateSimpleSFM(new Date()));                        if (aLong > 1) {                            yuqi += 1;                        }                        lent = lent.add(e.getRentMoney());                    }                    //总                    zong = zong.add(e.getEvaluationPrice());                }            }            shen = zong.subtract(lent).subtract(apply);            if (zong.compareTo(new BigDecimal("0")) == 0) {//                if (review != null) {//被拒绝                    Long aLong1 = DateUtils.DaysubDay(DateUtils.dateSimpleSFM(review.getGmtDatetime()), DateUtils.dateSimpleSFM(new Date()));                    if (aLong1 < 30) {                        return R.ok("0", "申请已被拒," + (30 - aLong1) + "天后可再次申请").put("data", 5).put("all", 3000);                    }                }                return R.ok("0", "success").put("data", 0).put("all", 3000);            }            if (lent.compareTo(new BigDecimal("0")) == 0) {                return R.ok("0", "success").put("data", 3).put("lent", lent.stripTrailingZeros().toPlainString()).put("apply", apply.stripTrailingZeros().toPlainString()).put("all", zong.stripTrailingZeros().toPlainString());            }            if (yuqi != 0) {                return R.ok("0", "success").put("data", 4).put("lent", lent.stripTrailingZeros().toPlainString()).put("apply", apply.stripTrailingZeros().toPlainString()).put("all", zong.stripTrailingZeros().toPlainString());            }            if (shen.compareTo(new BigDecimal("100")) <= 0) {                return R.ok("0", "success").put("data", 2).put("lent", lent.stripTrailingZeros().toPlainString()).put("apply", apply.stripTrailingZeros().toPlainString()).put("all", zong.stripTrailingZeros().toPlainString());            } else {                if (review != null) {//被拒绝                    Long aLong1 = DateUtils.DaysubDay(DateUtils.dateSimpleSFM(review.getGmtDatetime()), DateUtils.dateSimpleSFM(new Date()));                    if (aLong1 < 30) {                        return R.ok("0", "申请已被拒," + (30 - aLong1) + "天后可再次申请").put("data", 5).put("all", 3000);                    }                }                return R.ok("0", "success").put("data", 1).put("lent", lent.stripTrailingZeros().toPlainString()).put("apply", apply.stripTrailingZeros().toPlainString()).put("all", zong.stripTrailingZeros().toPlainString());            }        }    }    /**     * 四要素代付（打款）     */    @RequestMapping(value = "/fourElementsPay", method = RequestMethod.GET)    public JsonResp fourElementsPay(String evaluationId, Long userId, String account) {        log.debug("四要素代付");        String payMoney = new String(ConfigUtil.decode(account));//获取解密后的打款金额        System.out.print("解密后的金额：" + payMoney);        Admin admin = adminService.findLoginUser();        Evaluation evaluation = evaluationService.selectById(evaluationId);        User user = userService.selectById(userId);        EntityWrapper<BankCard> ew = new EntityWrapper<>();        ew.eq("user_id", userId);        ew.eq("status", StatusEnum.USED.getTypeName());        BankCard bankCard = bankCardService.selectOne(ew);        //四要素代付        JSONObject json = null;        try {            json = TradeUtil.FourElementsPay(user.getRealName(), user.getPhone(), evaluationId, bankCard.getIdCardNo(), bankCard.getBankCardNo(), payMoney);        } catch (Exception e) {            e.printStackTrace();        }        if ("0000".equals(json.getString("result_code"))) {//处理成功  通过查询订单状态接口 或者回调接口查询结果            evaluation.setStatus(EvaluationEnum.WAITMONEY.getTypeName());            evaluation.setAdminId(admin.getId());            evaluationService.updateById(evaluation);        } else {            String message = TradeUtil.getRet(json.getString("result_code"));            return JsonResp.fa(message);        }        return JsonResp.ok();    }    /**     * 支付回调     *     * @param result_code 结果码     * @param result_msg  返回失败原因（失败是返回）     * @param amount      支付金额     * @param orderId     订单id     * @return     */    @RequestMapping(value = "/reCallBack", method = RequestMethod.POST)    public void reCallUrl(String result_code, String result_msg, String amount, String orderId) {        log.debug("银生宝支付回调");        System.out.print("状态：" + EvaluationEnum.PASS.getTypeName());        Evaluation evaluation = evaluationService.selectById(orderId);        if ("0000".equals(result_code)) {//付款成功            evaluation.setFinalMoney(new BigDecimal(amount));            evaluation.setStatus(EvaluationEnum.PASS.getTypeName());            evaluation.setUptDatetime(new Date());            //订单生成            Order order = new Order();            order.setEvaluationId(evaluation.getId());            order.setStatus(OrderStatusEnum.NOT_APPLYING.getTypeName());            //日租金            EntityWrapper<ParamSetting> psew = new EntityWrapper<>();            psew.eq("status", StatusEnum.USED.getTypeName());            ParamSetting ps = paramSettingService.selectOne(psew);            BigDecimal dayRent = evaluation.getEvaluationPrice().multiply(new BigDecimal(ps.getRentDayMoney()));            order.setDayRent(dayRent);            order.setOrderNumber(OrderUtils.getOrderNo());            order.setGmtDatetime(new Date());            order.setUptDatetime(DateUtils.dayAdd(7, new Date()));//days            order.setDepositStatus(DepositStatusEnum.NOTREFUND.getDesc());            //更新相关报表统计            DataReport dataReport = dataReportService.selectById(1);            dataReport.setOrderCount(dataReport.getOrderCount() + 1);            dataReport.setMoneyOut(dataReport.getMoneyOut().add(evaluation.getPayMoney()));            dataReportService.updateById(dataReport);            orderService.insert(order);            evaluationService.updateById(evaluation);        } else {            evaluation.setStatus(StatusEnum.PASSFAIL.getTypeName());            evaluation.setFailReason(result_msg);            evaluation.setUptDatetime(new Date());            evaluationService.updateById(evaluation);        }    }    /**     * @param appType AND     * @return 返回值JsonResp     * @确认申请评估报告 执行贷前报告     */    @RequestMapping(value = "/sureApply", method = RequestMethod.GET)    public JsonResp sureApply(Long id, String contractId, Long userCouponId, String appType, String msg) {//        User user1 = userService.selectCurrentUser();        log.debug("确认申请评估报告");        if (contractId == null) {            return JsonResp.fa("签协议去");        }        Evaluation evaluation = evaluationService.selectById(id);        User user1 = userService.selectOne(new EntityWrapper<User>().eq("id",evaluation.getUserId()));        if (evaluation == null) {            return JsonResp.fa("申请单不存在");        }        //--------------------------------判断是否逾期----------------------------------        //获得最新审核失败or拒绝的数据的数据        Evaluation review = evaluationService.selectOne(new EntityWrapper<Evaluation>()                .eq("user_id", evaluation.getUserId())                .and("(status = {0} or status = {1})", EvaluationEnum.CHECKREFUSE.getTypeName(), EvaluationEnum.REFUSE.getTypeName())                .orderDesc(Arrays.asList("gmt_datetime")).last("limit 1"));        if (review != null) {//被拒绝            Long aLong1 = DateUtils.DaysubDay(DateUtils.dateSimpleSFM(review.getGmtDatetime()), DateUtils.dateSimpleSFM(new Date()));            if (aLong1 < 30) {                return JsonResp.fa("审核已被拒绝," + (30 - aLong1) + "天后可再次申请");            }        }        //--------------------------------判断是否逾期----------------------------------        evaluation.setProtocolId(contractId);        evaluation.setStatus(EvaluationEnum.WAITCHECK.getTypeName());        int i1 = evaluationService.selectCount(new EntityWrapper<Evaluation>()                .eq("user_id", user1.getId())                .eq("status", "已完结")        );        if (i1 != 0) {            evaluation.setStatus(EvaluationEnum.WAITCHECK.getTypeName());//WAITAUDIT            evaluationService.Cashier(evaluation);//打款分配        }//        evaluation.setBlackBox(blackBox);        evaluationService.updateById(evaluation);        if (StringUtils.isNotBlank(msg) && !msg.equals("成功")) {            String[] ids = msg.split(",");            for (String i : ids) {                Evaluation evaluations = evaluationService.selectById(i);                evaluations.setEvaluationPrice(evaluations.getRentMoney());                evaluationService.updateById(evaluations);            }        }        User user = userService.selectById(evaluation.getUserId());//        执行信贷保镖        String bizCode = null, appName = null;        String partnerCode = Config.getInstance().getValue("tongdun.partnerCode");        String partnerKey = Config.getInstance().getValue("tongdun.partnerKey");        if ("and".equals(appType)) {            bizCode = Config.getInstance().getValue("and.bizCode");            appName = Config.getInstance().getValue("and.appName");        } else if ("ios".equals(appType)) {            bizCode = Config.getInstance().getValue("ios.bizCode");            appName = Config.getInstance().getValue("ios.appName");        }        System.out.print("bizCode=" + bizCode + "appName=" + appName + "partnerCode=" + partnerCode + "partnerKey=" + partnerKey);//        evaluationService.beforeAdd(user,appType,evaluation);        //evaluationService.beforeAdd(bizCode,appName,partnerCode,partnerKey,user,evaluation);//        UserPhone userPhone = userPhoneService.selectOne(new EntityWrapper<UserPhone>().eq("user_id",user1.getId()).eq("status","使用"));//        String taskId = userPhone.getTaskId();//        log.error("******魔盒字典的规则判断******");//        com.alibaba.fastjson.JSONObject resultZD = RSMohe.getReportRawData(taskId);//        String jsonObject = resultZD.getString("data");//        jsonObject = RSMohe.gunzip(jsonObject);//        Long userId = tongDunMessageService.showTDMUserId(user1.getId());//        //判读tongdunZD表中是否存在这个userId存在不添加，不存在添加//        if(userId == null){//            log.error("******添加魔盒字典的数据******");//            TongDunMessage tongDunZD = new TongDunMessage();//            tongDunZD.setUserId(user.getId());//            if(tongDunMessageService.cutOutData(jsonObject)!=null){//判断截取的字段是否为空//                tongDunZD.setTongdunMessage(tongDunMessageService.cutOutData(jsonObject));//数据太大加以判断//            }//            tongDunZD.setCreateTime(new Date());//            tongDunMessageService.insert(tongDunZD);//            log.error("******添加魔盒字典的数据结束******");//        }        return JsonResp.ok();    }    /**     * @param id     * @return 返回值JsonResp     * @商户拒绝打款     */    @RequestMapping(value = "/refused", method = RequestMethod.GET)    public JsonResp refused(Long id, String refuseReason) {        Admin admin = adminService.findLoginUser();        Evaluation evaluation = evaluationService.selectById(id);        evaluation.setStatus(StatusEnum.REFUSED.getTypeName());        evaluation.setRefuseReason(refuseReason);        evaluation.setUptDatetime(new Date());        evaluationService.updateById(evaluation);        User user = userService.selectById(evaluation.getUserId());        log.error("商户拒绝打款thisadmin:"+JSONObject.fromObject(admin).toString());        log.error("商户拒绝打款evaluation:"+JSONObject.fromObject(evaluation).toString());        //打款内容        TrackLog log = new TrackLog();        log.setTitle("【申请单】 拒绝打款");        log.setType(1);        log.setAdminId(admin.getId().longValue());        log.setEvaluationId(evaluation.getId());        log.seteStatus(evaluation.getStatus());        log.setCreateTime(new Date());        log.setStatus(1);        trackLogService.insert(log);        if (user != null) {            Boolean sendsms = null;            try {                sendsms = RSSmsUtils.sendsms(user.getPhone(), "", "42348");            } catch (Exception e) {                e.printStackTrace();            }            System.out.println(sendsms);        }        return JsonResp.ok();    }    /**     * @param     * @return 返回值JsonResp     * @审核 通过或拒绝     */    @RequestMapping(value = "/checkEvaluaion", method = RequestMethod.GET)    public JsonResp checkEvaluaion(Long id, Integer type) {        log.error("审核 通过或拒绝传入值id："+id+"type:"+type);        Admin admin = adminService.findLoginUser();//操作员        log.error("当前登录管理thisadmin："+JSONObject.fromObject(admin).toString());        Evaluation evaluation = evaluationService.selectById(id);        if (evaluation == null) {            return JsonResp.fa("未找到对应的评估报告");        }        //短信提醒        //发送短信通知        User user = userService.selectById(evaluation.getUserId());        String conent = null, title = null;        String checkType = null;        String dx1 = "";        String dx2 = "";        String logTitle = "【申请单】";        if (type == 1) {//通过            evaluation.setStatus(EvaluationEnum.WAITAUDIT.getTypeName());            checkType = "2";            title = "审核通过";            conent = "您在我们平台申请的借贷业务已经审核通过，稍许会有打款人员联系您，请保持电话畅通。";            dx1 = "通过";            dx2 = "请保持电话畅通";            logTitle = logTitle + "审核通过";            evaluationService.Cashier(evaluation);//打款分配            try {                //短信通知                if (user != null) {                    Boolean sendsms = RSSmsUtils.sendsms(user.getPhone(), "", "42343");                }            } catch (Exception e) {                e.printStackTrace();            }        } else if (type == 2) {//审核拒绝            evaluation.setStatus(EvaluationEnum.CHECKREFUSE.getTypeName());            checkType = "3";            title = "审核失败";            conent = "对不起，您在我们平台申请的手机租赁业务没有通过审核";            dx1 = "拒绝";            dx2 = "三十天后可再次提交申请";            logTitle = logTitle + "审核拒绝";            try {                //短信通知                if (user != null) {                    Boolean sendsms = RSSmsUtils.sendsms(user.getPhone(), "", "42344");                }            } catch (Exception e) {                e.printStackTrace();            }        }        /* evaluation.setType(2);*/        evaluation.setReviewTime(new Date());        evaluationService.updateById(evaluation);        //发送 消息通知用户        UserMessage userMessage = new UserMessage();        userMessage.setUserId(evaluation.getUserId());        userMessage.setContent(conent);        userMessage.setType(checkType);        userMessage.setStatus("2");        userMessage.setTitle(title);        userMessage.setGmtDatetime(new Date());        userMessageService.insert(userMessage);        //TODO 添加信息跟踪        TrackLog log = new TrackLog();        log.setTitle(logTitle);        log.setType(1);        log.setAdminId(admin.getId().longValue());        log.setEvaluationId(evaluation.getId());        log.seteStatus(evaluation.getStatus());        log.setCreateTime(new Date());        log.setStatus(1);        trackLogService.insert(log);        return JsonResp.ok();    }    /**     * @param     * @return 返回值JsonResp     * @分页待打款报告     */    @RequestMapping(value = "/findWaitPayList", method = RequestMethod.GET)    public JsonResp findWaitPayList(Integer currentPage, String gmtDateTime, String phone, String goodsName, String status) {        log.debug("分页查找评估报告");        Admin admin = adminService.findLoginUser();        AdminRole adminRole = adminRoleService.selectById(admin.getAdminRoleId());        List<Evaluation> list = null;        Integer count = null;        if (adminRole != null && adminRole.getType() == 5) {//打款员            /* currentPage,gmtDateTime,phone,goodsName,status,null,admin.getId(),2*/            list = evaluationService.selectByPage(currentPage, gmtDateTime, phone, goodsName, status, null, admin.getId());            count = evaluationService.selectByPageCount(currentPage, gmtDateTime, phone, goodsName, status, null, admin.getId());        } else if (adminRole != null && adminRole.getType() == 1) {//审核员        } else {            list = evaluationService.selectByPage(currentPage, gmtDateTime, phone, goodsName, status, null, null);            count = evaluationService.selectByPageCount(currentPage, gmtDateTime, phone, goodsName, status, null, null);        }        for (Evaluation eva : list) {            //打收员            Integer adminId = eva.getAdminId();            //审核员            Integer auditorId = eva.getAuditorId();            Admin admin1 = null;            Admin auditor = null;            //如果缓存中有 直接从缓存中取            if (adminId != null) {                if (redisClusterCache.hasKey("loginName" + adminId)) {                    try {                        admin1 = redisClusterCache.getCache("loginName" + adminId);                    } catch (Exception e) {                        e.printStackTrace();                    }                    ;                } else {                    if (adminId != null) {                        admin1 = adminService.selectById(adminId);                        try {                            redisClusterCache.putCache("loginName" + adminId, admin1);                        } catch (Exception e) {                            e.printStackTrace();                        }                    }                }                eva.setAdmin(admin1);            }            //获取审核员            if (auditorId != null) {                //如果缓存中有 直接从缓存中取                if (redisClusterCache.hasKey("loginName" + auditorId)) {                    try {                        admin1 = redisClusterCache.getCache("loginName" + auditorId);                    } catch (Exception e) {                        e.printStackTrace();                    }                    ;                } else {                    if (adminId != null) {                        admin1 = adminService.selectById(auditorId);                        try {                            redisClusterCache.putCache("loginName" + auditorId, auditor);                        } catch (Exception e) {                            e.printStackTrace();                        }                    }                }                eva.setAuditor(auditor);            }        }        PageDto page = new PageDto(currentPage, 10, list, count);        Map map = new HashMap();        map.put("page", page);        map.put("roleType", adminRole.getType());        return JsonResp.ok(map);    }    /**     * @param     * @return 返回值JsonResp     * @分页查找评估报告     */    @RequestMapping(value = "/findByPage", method = RequestMethod.GET)    public JsonResp findByPage(Integer currentPage, String gmtDateTime, String phone, String goodsName, String status) {        log.debug("分页查找评估报告");        Admin admin = adminService.findLoginUser();        AdminRole adminRole = adminRoleService.selectById(admin.getAdminRoleId());        List<Evaluation> list = null;        Integer count = null;        if (StringUtil.isEmpty(status)) {            status = EvaluationEnum.WAITCHECK.getTypeName();        }        if (adminRole != null && adminRole.getType() == 5) {            //evaluationService.selectByPage(currentPage,gmtDateTime,phone,goodsName,status,admin.getId(),null,1);            list = evaluationService.selectByPage(currentPage, gmtDateTime, phone, goodsName, status, admin.getId(), null);            count = evaluationService.selectByPageCount(currentPage, gmtDateTime, phone, goodsName, status, admin.getId(), null);        } else {            // list= evaluationService.selectByPage(currentPage,gmtDateTime,phone,goodsName,status,null,null,1);            list = evaluationService.selectByPage(currentPage, gmtDateTime, phone, goodsName, status, null, null);            count = evaluationService.selectByPageCount(currentPage, gmtDateTime, phone, goodsName, status, null, null);        }        for (Evaluation eva : list) {            //催收员            Integer adminId = eva.getAdminId();            Admin admin1 = null;            //如果缓存中有 直接从缓存中取            if (redisClusterCache.hasKey("loginName" + String.valueOf(adminId))) {                try {                    admin1 = (Admin) redisClusterCache.getCache("loginName" + String.valueOf(adminId));                } catch (Exception e) {                    e.printStackTrace();                }            } else {                if (adminId != null) {                    admin1 = adminService.selectById(adminId);                    try {                        redisClusterCache.putCache("loginName" + String.valueOf(adminId), admin1);                    } catch (Exception e) {                        e.printStackTrace();                    }                }            }            eva.setAuditor(admin1);        }        PageDto page = new PageDto(currentPage, 10, list, count);        Map map = new HashMap();        map.put("page", page);        map.put("roleType", adminRole.getType());        return JsonResp.ok(map);    }    /**     * @param     * @return 返回值JsonResp     * @去评估     */    @RequestMapping(value = "/evaluationbygoodsId", method = RequestMethod.GET)    public JsonResp evaluationbygoodsId(Long goodsId) {        log.debug("去评估");        Map map = new HashMap();        map.put("goodsId", goodsId);        List<Goods> goods = goodsService.selectGoodsPage(map);        if (!goods.isEmpty()) {            return JsonResp.ok(goods.get(0));        } else {            return JsonResp.fa("未查到对应手机品牌");        }    }    /**     * @param     * @return 返回值JsonResp     * @用户查找自己评估报告(评估详情)     */    @RequestMapping(value = "/findMyEvaluation", method = RequestMethod.GET)    public JsonResp findMyEvaluation(Long evaluationId) {        log.debug("用户查找当前自己评估报告");        User user = userService.selectCurrentUser();        Evaluation evaluation = null;        if (evaluationId != null) {            evaluation = evaluationService.selectById(evaluationId);        } else {            EntityWrapper<Evaluation> wrapper = new EntityWrapper<>();            wrapper.eq("user_id", user.getId());            wrapper.orderBy("evaluation.id", false);            List<Evaluation> evaluationList = evaluationService.selectList(wrapper);            if (!evaluationList.isEmpty()) {                if (evaluationList.size() == 1) {//如果只评估一次 直接取出                    evaluation = evaluationList.get(0);                } else {                    //如果有多次评估记录，去进行中尚未完结的评估报告否则取最后一次评估报告                    int i = 0, y = evaluationList.size();                    for (; i < y; i++) {                        Evaluation eval = evaluationList.get(i);                        if (StatusEnum.WAITAUDIT.getTypeName().equals(eval.getStatus())/* && !StatusEnum.OVER.getTypeName().equals(eval.getStatus()) && !StatusEnum.REFUSED.getTypeName().equals(eval.getStatus())*/) {                            evaluation = eval;                            break;                        }                    }                    if (i == y) {                        evaluation = evaluationList.get(0);                    }                }            }        }        if (evaluation != null) {//                if(evaluation.getUserCouponId()!=null){//                    UserCoupon uc=userCouponService.selectById(evaluation.getUserCouponId());//                    evaluation.setUserCoupon(uc);//                }            ParamSetting paramSetting = paramSettingService.selectById(evaluation.getParamSettingId());            evaluation.setParamSetting(paramSetting);            EntityWrapper<BankCard> wrapper1 = new EntityWrapper<>();            wrapper1.eq("user_id", user.getId());            wrapper1.eq("status", StatusEnum.USED.getTypeName());//                wrapper1.setSqlSelect("bank_card_name","bank_card_no");            BankCard bankCard = bankCardService.selectOne(wrapper1);            evaluation.setBankCard(bankCard);        }        return JsonResp.ok(evaluation);    }    /**     * @param     * @return 返回值JsonResp     * @用户查找自己评估报告     */    @RequestMapping(value = "/orderOver", method = RequestMethod.GET)    public JsonResp orderOver(Long id, String money) {        log.debug("订单完结");        if (StringUtil.isEmpty(money)) {            return JsonResp.fa("还款金额不能为空");        }        Order order = orderService.selectById(id);        Evaluation evaluation = evaluationService.selectById(order.getEvaluationId());        if (order == null) {            return JsonResp.fa("该订单不存在");        }        String payMoney = new String(ConfigUtil.decode(money));//获取解密后的打款金额        //判断有没有逾期 逾期不退押金        int days = DateUtils.differentDays(order.getUptDatetime(), new Date());        if (days > 1) {            order.setDepositStatus(DepositStatusEnum.DEDUCTION.getDesc());        }        //还款记录        RepayRecord repayRecord = new RepayRecord();        repayRecord.setUserId(evaluation.getUserId());        repayRecord.setOrderId(order.getId());        repayRecord.setMoney(new BigDecimal(payMoney));        repayRecord.setDays(days);        repayRecord.setType(3);        repayRecord.setGmtDatetime(new Date());        repayRecord.setUptDatetime(new Date());        repayRecord.setPayType(4);        repayRecordService.insert(repayRecord);        order.setStatus(StatusEnum.OVER.getTypeName());        order.setMoney(new BigDecimal(payMoney));        order.setUptDatetime(new Date());        orderService.updateById(order);        evaluation.setStatus(StatusEnum.OVER.getTypeName());        evaluationService.updateById(evaluation);        User user = userService.selectById(evaluation.getUserId());        user.setFrequency(user.getFrequency() + 1);        userService.updateById(user);        return JsonResp.ok();    }    /**     * @param     * @return 生成excel     */    @RequestMapping(value = "/makeExcle", method = RequestMethod.GET)    public JsonResp makeExcle(HttpServletRequest request, HttpServletResponse response, String goodsName, String status, String phone, String gmtDatetime, Integer type) throws IOException {        // TODO Auto-generated method stub        List<Evaluation> evaluations = null;// evaluationService.selectByPage(null,gmtDatetime,phone,goodsName,status,null,null,type);        if (evaluations.isEmpty()) {            return JsonResp.fa("未选择导出数据");        }        for (Evaluation eva : evaluations) {            //催收员            Integer adminId = eva.getAdminId();            Admin admin1 = null;            //如果缓存中有 直接从缓存中取//            if(cacheUtil.hHasKey("loginName",String.valueOf(adminId))){//                admin1=(Admin) cacheUtil.hget("loginName",String.valueOf(adminId));//            }else {            if (adminId != null) {                admin1 = adminService.selectById(adminId);//                    cacheUtil.hset("loginName",String.valueOf(adminId),admin1);//                }            }            eva.setAuditor(admin1);        }        XSSFWorkbook excelbook = new XSSFWorkbook(); //创建workBook        XSSFSheet excelSheet = excelbook.createSheet();//创建sheet表        XSSFRow excelRow = excelSheet.createRow(0);//创建第一行        XSSFCellStyle headerStyle = excelbook.createCellStyle();//设置 居中        headerStyle.setAlignment(XSSFCellStyle.ALIGN_CENTER);        //接下来是创建 列标题 ,cell的起始值是 0,可创建n个列标题        String[] Title = {"用户手机号", "用户姓名", "商品名称", "评估价格", "状态", "评估费用", "应打款金额", "实际打款金额", "评估时间", "打款时间", "打款人员"};        for (int a = 0; a < Title.length; a++) {            XSSFCell cell = excelRow.createCell(a);            cell.setCellStyle(headerStyle);//居中            cell.setCellValue(Title[a]);        }        //接下来遍历List,并写入EXCEL中        for (int i = 0; i < evaluations.size(); i++) {            //创建行,行号应从1开始,因为表头行(列标题)占据了第0行            excelRow = excelSheet.createRow(i + 1);            //将该行每一列的数据写入,可写n列            Evaluation evaluation = evaluations.get(i); // List 的起始值是0            String status1 = evaluation.getStatus();            excelRow.createCell(0).setCellValue(evaluation.getUser().getPhone());            excelRow.createCell(1).setCellValue(evaluation.getUser().getRealName());            excelRow.createCell(2).setCellValue(evaluation.getName());            excelRow.createCell(3).setCellValue(evaluation.getEvaluationPrice().toString());            excelRow.createCell(4).setCellValue(status1);            excelRow.createCell(5).setCellValue(evaluation.getParamSetting().getAssessMoney());            excelRow.createCell(6).setCellValue(evaluation.getPayMoney().toString());            excelRow.createCell(7).setCellValue(evaluation.getFinalMoney().toString());            excelRow.createCell(8).setCellValue(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(evaluation.getGmtDatetime()));            if (StatusEnum.OVER.getTypeName().equals(status1) || StatusEnum.PASS.getTypeName().equals(status1) || StatusEnum.WAITMONEY.getTypeName().equals(status1)) {                excelRow.createCell(9).setCellValue(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(evaluation.getUptDatetime()));            } else {                excelRow.createCell(9).setCellValue("未打款");            }            if (evaluation.getAuditor() == null) {                excelRow.createCell(10).setCellValue("未知");            } else {                excelRow.createCell(10).setCellValue(evaluation.getAuditor().getLoginName());            }        }        String fileanme = "评估报告";        String date = new SimpleDateFormat("yyyyMMdd").format(new Date());        FileType fileType = FileType.XLS;        String path = fileType.getAbsolutePath();        String filePath = path + File.separator + fileanme + date + ".xls";        log.info("filePath" + filePath);        writeExcel(request, response, excelbook, filePath, "文件名");//具体导出的方法        String url = request.getRequestURL().toString().split("api")[0] + "/pic/xls/" + File.separator + fileanme + date + ".xls";        return JsonResp.ok(url);    }    //具体导出的方法    public static void writeExcel(HttpServletRequest request, HttpServletResponse response, Workbook work,                                  String filePath, String fileName) throws IOException {        request.setCharacterEncoding("utf-8");        OutputStream outputStream = new FileOutputStream(filePath);        try {            response.setContentType("application/ms-excel;charset=UTF-8");            response.setHeader("Content-Disposition", "attachment;filename="                    .concat(String.valueOf(URLEncoder.encode(fileName + ".xls",                            "UTF-8"))));            work.write(outputStream);        } catch (IOException e) {            System.out.println("输出流错误");            e.printStackTrace();        } finally {            outputStream.close();        }    }    /**     * 以下方法     * @ANS     */    /**     * 申请单内容     * TODO     */    @AUTH    @RequestMapping(value = "/aEvaluationList", method = RequestMethod.GET)    public PageUtils aEvaluationList(@RequestParam Map<String, Object> params) {        //登陆验证        Admin loginUser = adminService.findLoginUser();        //查看角色        AdminRole adminRole = adminRoleService.selectById(loginUser.getAdminRoleId());        if (adminRole == null) {            return new PageUtils(null, 0, 10, 1);        }        if (adminRole.getType() == 0) {//总管理拥有所有权限 不做拦截        } else if (adminRole.getType() == 1) {//审核员： 只能查看自己被分配的审核单            params.put("reviewName", loginUser.getName());//审核员姓名        } else {            return new PageUtils(null, 0, 10, 1);        }        params.put("inStatus", Arrays.asList(EvaluationEnum.WAITCHECK.getTypeName(), EvaluationEnum.CHECKREFUSE.getTypeName()));        return evaluationService.aEvaluationList(params);    }    @RequestMapping(value = "/aEvaluationPayList", method = RequestMethod.GET)    public PageUtils aEvaluationPayList(@RequestParam Map<String, Object> params) {        //登陆验证        Admin loginUser = adminService.findLoginUser();        //查看角色        AdminRole adminRole = adminRoleService.selectById(loginUser.getAdminRoleId());        if (adminRole == null) {            return new PageUtils(null, 0, 10, 1);        }        if (adminRole.getType() == 0) {//总管理拥有所有权限 不做拦截        } else if (adminRole.getType() == 5) {//打款员： 只能查看自己被分配的审核单            params.put("cashier", loginUser.getName());//打款员        } else {            return new PageUtils(null, 0, 10, 1);        }        return evaluationService.aEvaluationList(params);    }    /**     * 移交 审核申请单     */    @RequestMapping(value = "/evaAuth")    public R evaAuth(Long eId, Integer adminId) {        Admin admin = adminService.findLoginUser();        Evaluation evaluation = evaluationService.selectById(eId);        if (evaluation == null) {//申请单            return R.error("申请单不存在");        }        if (admin.getId() == 1) {        } else {            AdminRole role = adminRoleService.selectById(admin.getId());            if (role == null) {                return R.error("管理员角色不存在");            }            if (role.getType() != 0 && !evaluation.getAuditorId().equals(admin.getId())) {                return R.error("无法移交别人的申请单");            }            if (role.getType() != 0 && !evaluation.getStatus().equals(EvaluationEnum.WAITCHECK.getTypeName())) {                return R.error("申请单状态不正确");            }        }        evaluation.setAuditorId(adminId);        evaluationService.updateById(evaluation);        return R.ok();    }    /**     * 移交 打款申请单     */    @RequestMapping(value = "/evaPayStatus")    public R evaPayStatus(Long eId, Integer adminId) {        Admin admin = adminService.findLoginUser();        Evaluation evaluation = evaluationService.selectById(eId);        if (evaluation == null) {//申请单            return R.error("申请单不存在");        }        if (admin.getId() != 1) {            AdminRole role = adminRoleService.selectById(admin.getId());            if (role == null) {                return R.error("管理员角色不存在");            }            if (role.getType() != 0 && !evaluation.getAdminId().equals(admin.getId())) {                return R.error("无法移交别人的申请单");            }            if (role.getType() != 0 && !evaluation.getStatus().equals(EvaluationEnum.WAITAUDIT.getTypeName())) {//不是待打款订单                return R.error("申请单状态不正确");            }        }        evaluation.setAdminId(adminId);        evaluationService.updateById(evaluation);        return R.ok();    }    public Integer count(Integer adminId) {        int i = evaluationService.selectCount(new EntityWrapper<Evaluation>()                .eq("auditor_id", adminId)                .eq("status", "待审核")        );        return i;    }    @RequestMapping(value = "/ceshi")    public R evaPayStatus() {        return R.ok().put("data", adminService.evaCount());    }    //自动审核    public String getUserTianChuangData(User user) {        return "";    }    public String getUserJGData(User user) {        return "";    }    public String getUserTianChaungLabel(String data, Boolean isClose) {        if (isClose) {            return "pass";        }        return "pass";//reject    }    public String getUserJGLabel(String data, Boolean isClose) {        if (isClose) {            return "pass";        }        return "pass";//reject    }    String autoFormatRefuseReson(Map<String, String> proc_in) {        String str = "";        String temp = "";        for (String key : proc_in.keySet()) {//keySet获取map集合key的集合  然后在遍历key即可            String value = proc_in.get(key).toString();            String keyvalue = key + ": " + value + ",";            temp += keyvalue;        }        str = String.format("[auto][%s]", temp);        return str;    }    public void autoEva(Evaluation evaluation) {        User user = userService.selectById(evaluation.getUserId());        String tcData = getUserTianChuangData(user);        String tcLabel = getUserTianChaungLabel(tcData, false);        String jgData = getUserJGData(user);        String jgLabel = getUserJGLabel(jgData, true);        String conent = null, title = null;        String checkType = null;        String logTitle = "【申请单】";        if (tcLabel.equals("pass") && jgLabel.equals("pass")) {            //pass            evaluation.setStatus(EvaluationEnum.WAITAUDIT.getTypeName());            evaluation.setRefuseReason(EvaluationEnum.AUTOCHECKPASS.getTypeName());            checkType = "2";            title = "审核通过";            conent = "您在我们平台申请的借贷业务已经审核通过，稍许会有打款人员联系您，请保持电话畅通。";            logTitle = logTitle + "审核通过";            evaluationService.Cashier(evaluation);//打款分配            try {                //短信通知                if (user != null) {                    Boolean sendsms = RSSmsUtils.sendsms(user.getPhone(), "", "42343");                }            } catch (Exception e) {                e.printStackTrace();            }        } else {            //reject            evaluation.setStatus(EvaluationEnum.REFUSE.getTypeName());            Map<String, String> reason = new HashMap<>();            reason.put("风控F", tcLabel);            reason.put("风控G", jgLabel);            String strReason = autoFormatRefuseReson(reason);            evaluation.setRefuseReason(strReason + "+" + EvaluationEnum.AUTOCHECKREFUSE.getTypeName());            checkType = "3";            title = "审核失败";            conent = "对不起，您在我们平台申请的手机租赁业务没有通过审核";            logTitle = logTitle + "审核拒绝";            try {                //短信通知                if (user != null) {                    Boolean sendsms = RSSmsUtils.sendsms(user.getPhone(), "", "42344");                }            } catch (Exception e) {                e.printStackTrace();            }        }        evaluation.setReviewTime(new Date());        evaluationService.updateById(evaluation);        //发送 消息通知用户        UserMessage userMessage = new UserMessage();        userMessage.setUserId(evaluation.getUserId());        userMessage.setContent(conent);        userMessage.setType(checkType);        userMessage.setStatus("2");        userMessage.setTitle(title);        userMessage.setGmtDatetime(new Date());        userMessageService.insert(userMessage);        //TODO 添加信息跟踪        TrackLog log = new TrackLog();        log.setTitle(logTitle);        log.setType(1);        log.setAdminId(Long.valueOf(0));        log.setEvaluationId(evaluation.getId());        log.seteStatus(evaluation.getStatus());        log.setCreateTime(new Date());        log.setStatus(1);        trackLogService.insert(log);    }}