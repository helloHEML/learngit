package com.rongke.web;import com.rongke.commons.JsonResp;import com.rongke.enums.StatusEnum;import com.rongke.model.Feedback;import com.rongke.model.User;import com.rongke.service.FeedbackService;import com.rongke.service.UserService;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.Date;import java.util.List;/** * @FeedbackController * @Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/feedback")@Transactional@CrossOriginpublic class FeedbackController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private FeedbackService feedbackService;    @Autowired    private UserService userService;    /**     * @添加     * @param feedback     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addFeedback(@RequestBody Feedback feedback){        log.debug("添加");        User user=userService.selectCurrentUser();        feedback.setStatus(StatusEnum.USED.getTypeName());        feedback.setUserId(user.getId());        feedback.setGmtDatetime(new Date());        feedbackService.insert(feedback);        return JsonResp.ok();    }    /**     * @修改     * @param feedback     * @return 返回值JsonResp     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateFeedback(@RequestBody Feedback feedback){        log.debug("修改");        feedback.setUptDatetime(new Date());        feedbackService.updateById(feedback);        return JsonResp.ok(feedback);    }    /**     * @删除     * @param feedback     * @return 返回值JsonResp     */    @RequestMapping(value="/delete", method = RequestMethod.POST)    public JsonResp delete(@RequestBody Feedback feedback){        log.debug("修改");        feedback.setUptDatetime(new Date());        feedbackService.deleteById(feedback.getId());        return JsonResp.ok(feedback);    }    /**     * @根据id查找     * @param id     * @return 返回值JsonResp     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectFeedback(Long id){        log.debug("查找");        Feedback feedback = feedbackService.selectById(id);        return JsonResp.ok(feedback);    }    /**     * @根据条件查找     * @param feedback     * @return 返回值JsonResp     */    @RequestMapping(value = "/selectByCondition", method = RequestMethod.POST)    public JsonResp selectFeedbackByCondition(@RequestBody Feedback feedback){        log.debug("根据条件查找");        if(feedback==null)            return JsonResp.toFail("参数不能为空");        List<Feedback> feedbackList=feedbackService.selectByCondition(feedback);        return JsonResp.ok(feedbackList);    }}