package com.rongke.web;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.rongke.alipayUtil.PayUtils;import com.rongke.commons.FailException;import com.rongke.commons.JsonResp;import com.rongke.enums.EvaluationEnum;import com.rongke.enums.FileType;import com.rongke.enums.OrderStatusEnum;import com.rongke.enums.StatusEnum;import com.rongke.model.*;import com.rongke.service.*;import com.rongke.utils.*;import com.rongke.utils.ans.PageUtils;import com.rongke.utils.ans.R;import com.rongke.web.annotation.AUTH;import com.rongke.web.config.ConfigUtil;import com.rongke.web.saas.RSSmsUtils;import com.rongke.web.sms.SmsUtils;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.Logger;import org.apache.poi.xssf.usermodel.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.util.*;import static com.rongke.utils.DateUtils.differentDays;/** * @OrderController * @订单Controller * @version : Ver 1.0 */@RestController@RequestMapping(value="/api/order")@Transactional@CrossOriginpublic class OrderController {    private Logger log = Logger.getLogger(this.getClass());    @Autowired    private OrderService orderService;    @Autowired    private UserService userService;    @Autowired    private BankCardService bankCardService;    @Autowired    private AdminService adminService;    @Autowired    private ParamSettingService paramSettingService;    @Autowired    private EvaluationService evaluationService;    @Autowired    private RepayRecordService repayRecordService;    @Autowired    private DataReportService dataReportService;    @Autowired    private AdminRoleService adminRoleService;    @Autowired    private SmsUtils sms;//短信    /**     * @添加订单     * @param order     * @return 返回值JsonResp     */    @RequestMapping(value="/add", method = RequestMethod.POST)    public JsonResp addOrder(@RequestBody Order order){        log.debug("添加订单");        order.setGmtDatetime(new Date());        orderService.insert(order);        return JsonResp.ok(order);    }    /**     * @修改订单     */    @RequestMapping(value="/update", method = RequestMethod.POST)    public JsonResp updateOrder(@RequestBody Order order){        log.debug("修改订单");        order.setUptDatetime(new Date());        orderService.updateById(order);        return JsonResp.ok(order);    }    /**     * @修改订单     */    @RequestMapping(value="/selectOne", method = RequestMethod.GET)    public JsonResp selectOne(Long id){        log.debug("根据id查订单");        Order order = orderService.selectById(id);        return JsonResp.ok(order);    }    /**     * @根据id查找订单     * @查询订单列表     */    @RequestMapping(value="/selectMyOrderList", method = RequestMethod.GET)    public JsonResp selectMyOrderList(Integer type){        log.debug("查找订单");        List<Order> orderList=null;        User user=userService.selectCurrentUser();        Map map=new HashMap();        map.put("userId",user.getId());        EntityWrapper<Evaluation> ew=new EntityWrapper<>();        ew.eq("user_id",user.getId());        System.out.print("查询订单列表：type:"+type+"user_id="+user.getId());        if(type==2){            orderList=orderService.selectOrderNotPage(map);        }else {            return JsonResp.ok(null);        }        for (int i=0,y=orderList.size();i<y;i++){            Order order=orderList.get(i);            if(!StatusEnum.OVER.getTypeName().equals(order.getStatus())){                if(OrderStatusEnum.NOT_ARRIVAL.getTypeName().equals(order.getStatus())){                    order.setStatus(OrderStatusEnum.NOT_ARRIVAL.getTypeName());                }else if(differentDays(new Date(),order.getUptDatetime())>=0){                    order.setStatus(OrderStatusEnum.AUDITING.getTypeName());                }else if(differentDays(new Date(),order.getUptDatetime())==-1){                    order.setStatus(OrderStatusEnum.NOT_APPLYING.getTypeName());                }else if(differentDays(new Date(),order.getUptDatetime())<-1){                    order.setStatus(OrderStatusEnum.PENDING_MONEY.getTypeName());                }            }        }        return JsonResp.ok(orderList);    }    /**     * 下线付租     */    @RequestMapping(value="/offlinePayorder", method = RequestMethod.GET)    public JsonResp findOrderStatus(Long orderId,String money,Long userId){        log.debug("下线付租");        Order order=orderService.selectById(orderId);        if(order==null){            return JsonResp.fa("未找到对应的订单");        }        String payMoney=new String(ConfigUtil.decode(money));//获取解密后的打款金额        Integer days=DateUtils.differentDays(order.getUptDatetime(),new Date());        /******还款记录********/        RepayRecord repayRecord=new RepayRecord();        if(days==1){//待付租还款            repayRecord.setType(1);//正常日租金            days=Integer.valueOf(payMoney.split("#")[1]);            payMoney=payMoney.split("#")[0];            order.setDays(days);            order.setUptDatetime(DateUtils.dayAdd(days,order.getUptDatetime()));        }else if(days>1) { //逾期还款            repayRecord.setType(2);//逾期还款            order.setDays(0);            order.setDepositStatus("2");            order.setUptDatetime(new Date());        } else {            return JsonResp.fa("该订单不属于逾期订单");        }        //计算超时费        BigDecimal overtimeMoney=orderService.selectOverTimeMoney(order.getId());        repayRecord.setOvertimeMoney(overtimeMoney);        repayRecord.setDays(days);        repayRecord.setPayType(4);//线下支付        repayRecord.setMoney(new BigDecimal(payMoney));        repayRecord.setOrderId(order.getId());        repayRecord.setUserId(userId);        repayRecord.setGmtDatetime(new Date());        repayRecord.setUptDatetime(new Date());        repayRecordService.insert(repayRecord);        //更新相关报表统计        DataReport dataReport = dataReportService.selectById(1);        dataReport.setMoneyIn(dataReport.getMoneyIn().add(new BigDecimal(payMoney)));        dataReportService.updateById(dataReport);        //更新订单        orderService.updateById(order);        return JsonResp.ok();    }    /**     * 回租     */    @RequestMapping(value="/findOrderStatus", method = RequestMethod.GET)    public JsonResp findOrderStatus(Long evaluationId){        log.debug("回租");        User user=userService.selectCurrentUser();        EntityWrapper<Evaluation> ew=new EntityWrapper<>();        ew.eq("user_id",user.getId());//        ew.isNotNull("status");        ew.eq(false,"status",StatusEnum.OVER.getTypeName());        List<Evaluation> evaluationList=evaluationService.selectList(ew);        if(!evaluationList.isEmpty()){            for(int i=0,y=evaluationList.size();i<y;i++){                Evaluation evaluation= evaluationList.get(i);                //id 不同或者 已经被拒绝过 不能点击回租                if(StatusEnum.REFUSED.getTypeName().equals(evaluation.getStatus())&&DateUtils.twoDateBetweenDays(evaluation.getGmtDatetime(),new Date())<30){                    return JsonResp.fa("您的回租请求已被系统拒绝 "+(30-DateUtils.twoDateBetweenDays(evaluation.getGmtDatetime(),new Date()))+"天后再次申请");                }else if(!evaluation.getId().equals(evaluationId) && !StatusEnum.OVER.getTypeName().equals(evaluation.getStatus()) && (evaluation.getProtocolId()!=null&&!evaluation.getProtocolId().equals("0"))){                    if(!EvaluationEnum.CHECKREFUSE.getTypeName().equals(evaluation.getStatus())&&!StatusEnum.OVER.getTypeName().equals(evaluation.getStatus())&&!StatusEnum.APPLYING.getTypeName().equals(evaluation.getStatus())&&!EvaluationEnum.REFUSE.getTypeName().equals(evaluation.getStatus())){                        Long aLong = DateUtils.DaysubDay(DateUtils.dateSimpleSFM(evaluation.getUptDatetime()), DateUtils.dateSimpleSFM(new Date()));                        if(aLong>=1){                            return JsonResp.fa("您的借贷已逾期，处理后在进行");                        }else{                            return JsonResp.ok();                        }                    }                }            }        }        return JsonResp.ok();    }    /**     * @获取订单列表     */    @RequestMapping(value="/selectOverdueList", method = RequestMethod.GET)    public JsonResp selectMyOrderList(String param,Page page,String status,String uptDateTime){        log.debug("获取逾期订单列表");        Admin admin=adminService.findLoginUser();        AdminRole adminRole=adminRoleService.selectById(admin.getAdminRoleId());//        if(cacheUtil.hHasKey("admin","admin")){//            adminRole=(AdminRole) cacheUtil.hget("admin","admin");//        }else {//            adminRole=adminRoleService.selectById(admin.getAdminRoleId());//            cacheUtil.hset("admin","admin",adminRole);//放入缓存//        }        Map selectmap =new HashMap();        if(MobileUtil.isPhoneBase(param)){            selectmap.put("phone",param);        }else {            selectmap.put("orderNumber",param);        }        String time1="",time2="";        if (StringUtil.isNotEmpty(uptDateTime)) {            String[] array = uptDateTime.split("~");            time1 = array[0];            time2 = array[1];        }        selectmap.put("time1",time1);        selectmap.put("time2",time2);        selectmap.put("status",status);        selectmap.put("type","回租");        selectmap.put("startIndex",(page.getCurrent()-1)*page.getSize());        selectmap.put("size",page.getSize());        List<Order> orders=null;        Integer total=null;        if(adminRole!=null && adminRole.getType()==3){//催款员  分配订单            selectmap.put("adminId",admin.getId());        }        total=orderService.selectOrderPageSize(selectmap);        orders=orderService.selectOrderPage(selectmap);        List<Map> dataMaps=new ArrayList<>();        //计算日租金        for (Order order : orders) {            Evaluation evaluation=order.getEvaluation();            //押金            BigDecimal deposit=new BigDecimal(evaluation.getParamSetting().getCashPledge()).multiply(order.getEvaluation().getRentMoney()).setScale(2,BigDecimal.ROUND_HALF_UP);            Map map =new HashMap();            //如果是完结订单            if(StatusEnum.OVER.getTypeName().equals(order.getStatus())){                map.put("order",order);                map.put("realName",order.getEvaluation().getUser().getRealName());                map.put("phone",order.getEvaluation().getUser().getPhone());                map.put("userId",order.getEvaluation().getUserId());                map.put("dayRent",order.getDayRent());                BigDecimal oweRentMoney = evaluation.getPayMoney().subtract(order.getMoney());                if(oweRentMoney.signum()==-1){                    map.put("oweRentMoney",0);//欠租金                    map.put("oweTotalMoney",0);                } else {                    map.put("oweRentMoney",oweRentMoney);//欠租金                    map.put("oweTotalMoney",oweRentMoney);                }                map.put("oweRentTime","0");//欠租天数                map.put("overtimeMoney","0");//超时费                map.put("rentMoney",order.getEvaluation().getRentMoney());//回租价格                map.put("deposit",deposit);//押金                map.put("refundTime",DateUtils.dayAdd(1,order.getUptDatetime()));//应还款时间                int days= DateUtils.differentDays(order.getGmtDatetime(),order.getUptDatetime());                map.put("totalDays",days+1);//已经借款时间                map.put("status",StatusEnum.OVER.getTypeName());            } else {                Order data=getRentPrice(order);                map.put("order",order);                map.put("realName",order.getEvaluation().getUser().getRealName());                map.put("phone",order.getEvaluation().getUser().getPhone());                map.put("userId",order.getEvaluation().getUserId());                map.put("dayRent",data.getDayRent());                map.put("oweRentMoney",data.getOweRentMoney());//欠日租金                map.put("oweRentTime",data.getOweRentTime());//欠租天数                map.put("overtimeMoney",data.getOvertimeMoney());//超时费                map.put("rentMoney",order.getEvaluation().getRentMoney());//回租价格                map.put("deposit",deposit);//押金                map.put("oweTotalMoney",data.getOweTotalMoney());//合计应还金额                if(!OrderStatusEnum.NOT_ARRIVAL.getTypeName().equals(order.getStatus())){                    map.put("refundTime",DateUtils.dayAdd(1,data.getUptDatetime()));//应还款时间                    int days= DateUtils.differentDays(data.getGmtDatetime(),new Date());                    map.put("totalDays",days+1);//已经借款时间                } else {                    map.put("refundTime",StatusEnum.WAITMONEY.getTypeName());//应还款时间                    map.put("totalDays",1);//已经借款时间                }                map.put("status",data.getStatus());            }            dataMaps.add(map);        }        page.setRecords(dataMaps);        page.setTotal(total);        Map map=new HashMap();        map.put("page",page);        map.put("roleType",adminRole.getType());        return JsonResp.ok(map);    }    /**     * @获取催收订单列表（逾期、待付租）     */    @RequestMapping(value="/selectOvertimeList", method = RequestMethod.GET)    public JsonResp selectOvertimeList(String param,Page page,String status,String uptDateTime){        log.debug("获取逾期订单列表");        Admin admin=adminService.findLoginUser();        AdminRole adminRole=adminRoleService.selectById(admin.getAdminRoleId());        if(status==null || "".equals(status)){            status="催收";        }        Map selectmap =new HashMap();        if(MobileUtil.isPhoneBase(param)){            selectmap.put("phone",param);        }else {            selectmap.put("orderNumber",param);        }        String time1="",time2="";        if (StringUtil.isNotEmpty(uptDateTime)) {            String[] array = uptDateTime.split("~");            time1 = array[0];            time2 = array[1];        }        selectmap.put("time1",time1);        selectmap.put("time2",time2);        selectmap.put("status",status);        selectmap.put("type","回租");        selectmap.put("startIndex",(page.getCurrent()-1)*page.getSize());        selectmap.put("size",page.getSize());        List<Order> orders=null;        Integer total=null;        if(adminRole!=null && adminRole.getType()==3){//催款员  分配订单            selectmap.put("adminId",admin.getId());        }        total=orderService.selectOrderPageSize(selectmap);        orders=orderService.selectOrderPage(selectmap);        List<Map> dataMaps=new ArrayList<>();        //计算日租金        for (Order order : orders) {            Evaluation evaluation=order.getEvaluation();            //押金            BigDecimal deposit=new BigDecimal(evaluation.getParamSetting().getCashPledge()).multiply(order.getEvaluation().getRentMoney()).setScale(2,BigDecimal.ROUND_HALF_UP);            Map map =new HashMap();            //如果是完结订单            if(StatusEnum.OVER.getTypeName().equals(order.getStatus())){                map.put("order",order);                map.put("realName",order.getEvaluation().getUser().getRealName());                map.put("phone",order.getEvaluation().getUser().getPhone());                map.put("userId",order.getEvaluation().getUserId());                map.put("dayRent",order.getDayRent());                map.put("oweRentMoney",evaluation.getPayMoney().subtract(order.getMoney()));//欠租金                map.put("oweRentTime","0");//欠租天数                map.put("overtimeMoney","0");//超时费                map.put("oweTotalMoney",evaluation.getPayMoney().subtract(order.getMoney()));                map.put("rentMoney",order.getEvaluation().getRentMoney());//回租价格                map.put("deposit",deposit);//押金                map.put("refundTime",DateUtils.dayAdd(1,order.getUptDatetime()));//应还款时间                int days= DateUtils.differentDays(order.getGmtDatetime(),order.getUptDatetime());                map.put("totalDays",days+1);//已经借款时间                map.put("status",StatusEnum.OVER.getTypeName());            }else {                Order data=getRentPrice(order);                map.put("order",order);                //催收员                Integer adminId=order.getAdminId();                String loginName="未知";                //如果缓存中有 直接从缓存中取//                if(cacheUtil.hHasKey("loginName",String.valueOf(adminId))){//                    loginName=(String) cacheUtil.hget("loginName",String.valueOf(adminId));//                }else {                if(adminId!=null){                    Admin admin1=adminService.selectById(adminId);                    loginName=admin1.getLoginName();//                        cacheUtil.hset("loginName",String.valueOf(admin1.getId()),loginName);//                    }                }                map.put("loginName",loginName);                map.put("realName",order.getEvaluation().getUser().getRealName());                map.put("phone",order.getEvaluation().getUser().getPhone());                map.put("userId",order.getEvaluation().getUserId());                map.put("dayRent",data.getDayRent());                map.put("oweRentMoney",data.getOweRentMoney());//欠日租金                map.put("oweRentTime",data.getOweRentTime());//欠租天数                map.put("overtimeMoney",data.getOvertimeMoney());//超时费                map.put("rentMoney",order.getEvaluation().getRentMoney());//回租价格                map.put("deposit",deposit);//押金                map.put("oweTotalMoney",data.getOweTotalMoney());//合计应还金额//                int days= DateUtils.differentDays(data.getGmtDatetime(),new Date());//                map.put("totalDays",days+1);//已经借款时间                if(!OrderStatusEnum.NOT_ARRIVAL.getTypeName().equals(order.getStatus())){                    map.put("refundTime",DateUtils.dayAdd(1,data.getUptDatetime()));//应还款时间                    int days= DateUtils.differentDays(data.getGmtDatetime(),new Date());                    map.put("totalDays",days+1);//已经借款时间                } else {                    map.put("refundTime",StatusEnum.WAITMONEY.getTypeName());//应还款时间                    map.put("totalDays",1);//已经借款时间                }                map.put("status",data.getStatus());            }            dataMaps.add(map);        }        page.setRecords(dataMaps);        page.setTotal(total);        Map map=new HashMap();        map.put("page",page);        map.put("roleType",adminRole.getType());        return JsonResp.ok(map);    }    /**     * @获取订单详情     */    @RequestMapping(value="/findOrderDetails", method = RequestMethod.GET)    public JsonResp findOrderDetails (Long orderId) {        log.debug("获取订单详情");        Order order = orderService.selectById(orderId);        Evaluation evaluation = evaluationService.selectById(order.getEvaluationId());        EntityWrapper<BankCard> bcew=new EntityWrapper<>();        bcew.eq("user_id",evaluation.getUserId());        bcew.eq("status",StatusEnum.USED.getTypeName());        BankCard bankCard=bankCardService.selectOne(bcew);        evaluation.setBankCard(bankCard);        ParamSetting p = paramSettingService.selectById(evaluation.getParamSettingId());        evaluation.setParamSetting(p);        order.setEvaluation(evaluation);        //设置金额        orderService.orderStatusFilter(order);        Map map=new HashMap();        map.put("order",order);        //查询还款明细        Map map1=new HashMap();        map1.put("orderId",String.valueOf(orderId));        RepayRecord repayRecords=repayRecordService.selectRepayRecordLimitOne(map1);        if(OrderStatusEnum.NOT_ARRIVAL.getTypeName().equals(order.getStatus())||OrderStatusEnum.OVER.getTypeName().equals(order.getStatus())){            map.put("yMoney","0");            map.put("zMoney","0");            map.put("alpayMoney","0");        }else if(OrderStatusEnum.NOT_APPLYING.getTypeName().equals(order.getStatus())||OrderStatusEnum.AUDITING.getTypeName().equals(order.getStatus())){            map.put("yMoney","0");            map.put("zMoney","0");            map.put("alpayMoney",order.getDayRent().multiply(new BigDecimal("7")).setScale(2,BigDecimal.ROUND_HALF_UP));            if(repayRecords!=null){                order.setUptDatetime(repayRecords.getGmtDatetime());//更新上次支付时间            }else{                order.setUptDatetime(order.getGmtDatetime());            }        }else if(OrderStatusEnum.PENDING_MONEY.getTypeName().equals(order.getStatus())){            map.put("yMoney",order.getOvertimeMoney());            map.put("zMoney",new BigDecimal(order.getOvertimeMoney()).add(order.getDayRent().multiply(new BigDecimal("7")).setScale(2,BigDecimal.ROUND_HALF_UP)).stripTrailingZeros().toPlainString());            map.put("alpayMoney",order.getDayRent().multiply(new BigDecimal("7")).setScale(2,BigDecimal.ROUND_HALF_UP));        }        return JsonResp.ok(map);//map    }    /**     * 支付宝微信支付     */    @RequestMapping(value="/orderPay", method = RequestMethod.GET)    public JsonResp findOrderDetails (String orderId,String money,Integer days,String dayRent,String secret,Integer paytype,HttpServletRequest request) {        log.debug("支付宝微信支付,订单号"+orderId);//        log.debug("验签参数："+days+money+"js^baitu");        String  newsecret= Md5.md5Encode(days+money+"js^baitu");//        System.out.print("接受的密文："+secret);//        System.out.print("加密后字符串："+newsecret);        if(secret==null ||  !newsecret.equals(secret)){            return JsonResp.fa("金额验签不正确");        }        Order order=orderService.selectById(orderId);        if(order==null){            return JsonResp.fa("订单不存在");        }        if(StatusEnum.OVER.getTypeName().equals(order.getStatus())){            return JsonResp.fa("该订单已完结");        }        String backUrL=null;        if(paytype==1){//支付宝支付            backUrL="http://app.jsbaitu.com/interface/api/money/alipay/orderSucc";//            backUrL="http://baitu.tunnel.qydev.com/api/money/alipay/orderSucc";            String trade_no = null;            trade_no = (orderId + "a" + UUID.randomUUID().toString().replaceAll("-", "").toLowerCase()).substring(0, 32);            String stringStringMap = null;            try {                stringStringMap = PayUtils.AliPay(trade_no, new BigDecimal(money).doubleValue(), "支付宝支付", "支付宝支付—", backUrL);            } catch (UnsupportedEncodingException e) {                e.printStackTrace();            }            if (StringUtil.isNotEmpty(stringStringMap)) {                order.setDays(days);                order.setStatus(OrderStatusEnum.NOT_APPLYING.getTypeName());                order.setDayRent(new BigDecimal(dayRent));                orderService.updateById(order);                Evaluation evaluation=evaluationService.selectById(order.getEvaluationId());                User user=userService.selectById(evaluation.getUserId());                user.setFrequency(user.getFrequency()+1);                userService.updateById(user);                Map map=new HashMap();                map.put("alipay",stringStringMap);                return JsonResp.ok(map);            } else {                log.debug("支付宝支付失败");                throw new FailException();            }        }else if(paytype==2){//微信支付            backUrL="http://app.jsbaitu.com/interface/api/money/wxpay/orderSucc";//            backUrL="http://baitu.tunnel.qydev.com/api/money/wxpay/orderSucc";            String trade_no = null;            trade_no = (orderId + "a" + UUID.randomUUID().toString().replaceAll("-", "").toLowerCase()).substring(0, 32);            Map map;            map = PayUtils.WxPay(trade_no,new BigDecimal(money).doubleValue(), "微信支付",backUrL);            if (!map.isEmpty()) {                order.setDays(days);                order.setStatus(OrderStatusEnum.NOT_APPLYING.getTypeName());                order.setDayRent(new BigDecimal(dayRent));                orderService.updateById(order);                Evaluation evaluation=evaluationService.selectById(order.getEvaluationId());                User user=userService.selectById(evaluation.getUserId());                user.setFrequency(user.getFrequency()+1);                userService.updateById(user);                return JsonResp.ok(map);            } else {                log.debug("微信支付失败");                throw new FailException();            }        }        return JsonResp.ok();    }    /**     * @根据天数获取租金     * @return 返回值JsonResp     */    @RequestMapping(value="/getMoneyByDay", method = RequestMethod.GET)    public JsonResp getMoneyByDay(Long orderId,Integer days){        log.debug("根据天数获取租金");        Order order = orderService.selectPayOrder(orderId,days);        Map map =new HashMap();        String money=order.getOweTotalMoney();        if (days==1){            map.put("totalMoney",money);        }else if(days==5){            map.put("totalMoney",new BigDecimal(money).multiply(new BigDecimal(0.88)).setScale(2,BigDecimal.ROUND_HALF_UP));        }else if(days==10){            map.put("totalMoney",new BigDecimal(money).multiply(new BigDecimal(0.80)).setScale(2,BigDecimal.ROUND_HALF_UP));        }        return JsonResp.ok(map);    }    /**     * @更新订单催款记录     * @return 返回值JsonResp     */    @RequestMapping(value="/updateOrderRemark", method = RequestMethod.GET)    public JsonResp updateOrderRemark(Long id,String remark){        log.debug("更新订单催款记录");        Order order = orderService.selectById(id);        order.setRemark(remark);        orderService.updateById(order);        return JsonResp.ok();    }    /**     * 计算订单合计应还租金     * @param order (必须含有evaluation成员变量)     * @return     */    private Order getRentPrice(Order order){        if(StatusEnum.OVER.getTypeName().equals(order.getStatus())||OrderStatusEnum.NOT_ARRIVAL.getTypeName().equals(order.getStatus())){            return order;        }        if(order.getUptDatetime()==null){            Evaluation evaluation = evaluationService.selectById(order.getEvaluationId());            if(evaluation!=null){                if(StatusEnum.WAITMONEY.getTypeName().equals(evaluation.getStatus())){                    order.setStatus(StatusEnum.WAITMONEY.getTypeName());                    return order;                }            }        }        BigDecimal rentPrice = new BigDecimal("0.00"); //合计应还租金        BigDecimal price = order.getEvaluation().getRentMoney(); //实际借款金额        //各项比例参数        ParamSetting paramSetting = order.getEvaluation().getParamSetting();        Date uptDateTime = order.getUptDatetime(); //订单的最后还款时间        Date gmtDateTime = order.getGmtDatetime(); //订单的借款时间        Integer days = DateUtils.differentDays(uptDateTime,new Date()) - 1;  //计算连续逾期天数        Integer overtimeDay = Integer.valueOf(paramSetting.getOvertimeDay());//收取超时费用的逾期天数        Integer punishmentOvertimeDay = Integer.valueOf(paramSetting.getPunishmentOvertimeDay());//收取惩罚费用的逾期天数       /* Integer decreaseDay = Integer.valueOf(paramSetting.getDecreaseDay());//日租金递减触发天数条件        BigDecimal decreaseproPortion = new BigDecimal(paramSetting.getDecreaseproPortion());//日租金递减比例*/        BigDecimal rentDayPortion = new BigDecimal(paramSetting.getRentDayMoney());//日租金比例        /*  BigDecimal rentDayLeastPortion = new BigDecimal(paramSetting.getLeastRentDayMoney());//最低日租金比例*/        if (days == 0) { //说明昨日款已还            order.setRefundTime(new SimpleDateFormat("yyyy-MM-dd").format(DateUtils.dayAdd(1,uptDateTime).getTime()));  //设置还款时间            order.setStatus(OrderStatusEnum.NOT_APPLYING.getTypeName());  //设置订单状态            order.setOvertimeMoney("0");//逾期费用            order.setOweRentTime("0");//逾期天数        }else if (days < 0) {//说明今日的款已还            order.setRefundTime(new SimpleDateFormat("yyyy-MM-dd").format(DateUtils.dayAdd(1,uptDateTime).getTime()));            order.setStatus(OrderStatusEnum.AUDITING.getTypeName());            order.setOvertimeMoney("0");//逾期费用            order.setOweRentTime("0");//逾期天数        }else {// 逾期            order.setStatus(OrderStatusEnum.PENDING_MONEY.getTypeName());            order.setRefundTime(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));//应还款时间            order.setOweRentTime(String.valueOf(days));//逾期时间            if(days > punishmentOvertimeDay){ //计算惩罚性超时费                //超时费用                BigDecimal overtimePrice=price.multiply(new BigDecimal(paramSetting.getOvertimeMoney())).multiply(new BigDecimal(overtimeDay));                //惩罚性超时费                BigDecimal punishmentPrice =price.multiply(new BigDecimal(paramSetting.getPunishmentOvertimeMoney())).multiply(new BigDecimal(days+1-punishmentOvertimeDay));                BigDecimal totalMoney=overtimePrice.add(punishmentPrice).setScale(2,BigDecimal.ROUND_HALF_UP);                rentPrice = rentPrice.add(totalMoney);                //累计超时费                order.setOvertimeMoney(totalMoney.toString());            }else if (days > overtimeDay){ //计算超时费                BigDecimal overtimePrice = price.multiply(new BigDecimal(paramSetting.getOvertimeMoney())).multiply(new BigDecimal(days+1)).setScale(2,BigDecimal.ROUND_HALF_UP);                rentPrice = rentPrice.add(overtimePrice);                //累计超时费                order.setOvertimeMoney(overtimePrice.toString());            }else {                order.setOvertimeMoney("0");//无超时费            }        }        BigDecimal nowProton = rentDayPortion;//现在的日租金比率        //获取当前的日租金(判断是否递减)        Integer borrowDays = differentDays(gmtDateTime,new Date());  //计算总共租赁天数        Integer uptDays= differentDays(gmtDateTime,uptDateTime);//已经还款多少天        BigDecimal b = nowProton.multiply(price).multiply(new BigDecimal(days+1)).setScale(2,BigDecimal.ROUND_HALF_UP);        if(days<0){            b=new BigDecimal("0");            order.setOweRentMoney("0");//欠租费用        }else {            order.setOweRentMoney(nowProton.multiply(price).multiply(new BigDecimal(days)).setScale(2,BigDecimal.ROUND_HALF_UP).toString());//欠租费用        }        order.setDayRent( nowProton.multiply(price).setScale(2,BigDecimal.ROUND_HALF_UP));//每日租金        rentPrice = rentPrice.add(b);//        }        order.setOweTotalMoney(rentPrice.toString());        return order;    }    /**     * 订单短信提醒     */    @RequestMapping(value="/orderSmsTx", method = RequestMethod.POST)    public R orderSmsTx(@RequestBody Map<String,Object> dic){        String phone = (String) dic.get("phone");        if(StringUtils.isBlank(phone)){            return R.error("手机号不能为空");        }        try {            System.err.println(dic.get("m1")+"##"+dic.get("m2")+"##"+dic.get("m3"));            Boolean sendsms = RSSmsUtils.sendsms(phone, dic.get("m1")+"##"+dic.get("m2")+"##"+dic.get("m3"), ConstantFactory.getConfig().getSmsNoticeId());            System.out.println(sendsms);        }catch (Exception e) {            e.printStackTrace();        }        return R.ok();    }    /**     * 查询所有订单列表     * TODO     */    @AUTH    @RequestMapping(value="/orderPage", method = RequestMethod.GET)    public PageUtils orderPage(@RequestParam Map<String,Object> params){        Admin loginUser = adminService.findLoginUser();        Long a = System.currentTimeMillis();        if(loginUser.getId().equals(1L)){// 超级管理员直接行查看全部数据        }else{            //查看角色            AdminRole adminRole = adminRoleService.selectById(loginUser.getAdminRoleId());            if(adminRole.getType().equals(0)){//放行            }else if(adminRole.getType().equals(3)){//催讨                params.put("adminId",String.valueOf(loginUser.getId()));//                params.put("status",OrderStatusEnum.PENDING_MONEY.getTypeName());                params.put("encryptionXx","1");            }else{                params.put("status","无敌");            }        }        return orderService.orderPage(params);    }    /**     * 订单统计     */    @RequestMapping("/orderCount")    public R orderCount(@RequestParam Map<String,Object> params){        Admin loginUser = adminService.findLoginUser();        Order order = orderService.selectOne(new EntityWrapper<Order>().setSqlSelect("id as ceshi").eq("id","28"));        //获得所有未分配的订单        List<Evaluation> evaluations = evaluationService.distribution();        if(!evaluations.isEmpty()){            //获得所有上线 角色为审核员的管理员            List<Admin> adminList = adminService.evaCount();            if(!adminList.isEmpty()){//没有上线的进行分配                List<Evaluation> not = Lists.newArrayList(); //未设置审核角色                List<Evaluation> eva = Lists.newArrayList(); //按照角色分配                for(Evaluation e:evaluations){//取出对应数据                    if(null==e.getRoleId()||"0".equals(e.getRoleId())){                        not.add(e);                    }else{                        eva.add(e);                    }                }                //获得所有人负责数量的平均值                Integer pj = 0;                for (Admin a:adminList){                    pj += a.getHaveCount();                }                if(!not.isEmpty()){//进行全部分配                    int zong = not.size();//259                    int fen = zong/adminList.size();//每人分多少个                    int yu  = zong%adminList.size();//剩                    int i = 0;//开始                    if(zong<adminList.size()){                        //所有人都没有分配                        if(pj==0||pj/adminList.size()==0){//顺序分配                            int a=0;                            for(Evaluation e :not){                                e.setAuditorId(adminList.get(a).getId());                                if(a==adminList.size()-1){                                    a = 0;                                }else{                                    a++;                                }                            }                        }else{//按量分配                            int yifenp = 0;//已分配至                            for(Admin a:adminList){//平均值不同                                if(a.getHaveCount()<pj/adminList.size()){//少于平均 分配                                    if(yifenp+((pj/adminList.size())-a.getHaveCount())<=zong){//刚好分完或者还有剩余                                        for(int ksl=yifenp;ksl<yifenp+(pj/adminList.size())-a.getHaveCount();ksl++){                                            if(ksl<not.size()){                                                not.get(ksl).setAuditorId(a.getId());                                            }                                        }                                        yifenp += (pj/adminList.size())-a.getHaveCount();                                    }else if(yifenp<zong){//不足全给                                        for(int ksl=yifenp;ksl<zong;ksl++){                                            if(ksl<not.size()){                                                not.get(ksl).setAuditorId(a.getId());                                            }                                        }                                    }                                }                            }                            int a=0;                            //平均值相同                            for(int ksl=yifenp;ksl<zong;ksl++){//剩下的平均分配                                not.get(ksl).setAuditorId(adminList.get(a).getId());                                if(a==adminList.size()-1){                                    a = 0;                                }else{                                    a++;                                }                            }                        }                    }else{                        for(Admin a:adminList){                            for(Integer b=i;b<fen;b++){                                not.get(b).setAuditorId(a.getId());                            }                            i = fen;                            fen += zong/adminList.size();                        }                        if(yu!=0){//分配剩余                            int d = 0;                            int zuid = adminList.size()-1;//百度                            for(Integer c =zong-yu;c<zong;c++){                                System.err.println(adminList.get(d).getId());                                not.get(c).setAuditorId(adminList.get(d).getId());                                if(d==zuid){                                    d=0;                                }else{                                    d++;                                }                            }                        }                    }                    if(not.size()<30){                        evaluationService.updateBatchById(not);                    }else{                        evaluationService.updateBatchById(not,not.size());                    }                }                //进行渠道指定分配            }        }        return R.ok().put("data",order).put("data1",evaluations).put("data2",adminService.evaCount());    }    /**     *  订单统计：趋势图     */    @RequestMapping("/orderStatistics")    public R orderStatistics(@RequestParam Map<String,Object> params){        Admin loginUser = adminService.findLoginUser();        if(loginUser.getId().equals(1L)){        }else{            //查看角色            AdminRole adminRole = adminRoleService.selectById(loginUser.getAdminRoleId());            if(adminRole.getType().equals(0)){// 总管理 放行            }else if(adminRole.getType().equals(3)){//催讨                params.put("adminId",loginUser.getId());            }        }        return orderService.orderStatistics(params);    }    /**     *  订单统计：卡片使用     */    @RequestMapping("/orderAdminTJ")    public R orderAdminTJ(){        Admin loginUser = adminService.findLoginUser();        Map<String,Object> params = Maps.newHashMap();        AdminRole role = adminRoleService.selectById(loginUser.getAdminRoleId());        if(loginUser.getId().equals(1L)){        }else{            //查看角色            if(role.getType().equals(0)){// 总管理 放行            }else if(role.getType().equals(3)){//催讨                params.put("adminId",loginUser.getId());            }        }        return orderService.orderAdminTJ(params);    }    /**     * 续期     */    @RequestMapping("orderRenewal")    public R orderRenewal(@RequestParam Long orderId,@RequestParam String nubmur){        return orderService.orderRenewal(orderId,nubmur);    }    /**     * 手动分配催收     */    @RequestMapping("/orderCollection")    public R collectionUrge(@RequestParam Map<String,Object> params){        System.out.println(params.toString());        return orderService.collectionUrge(params);    }    @RequestMapping("/TJrepaymentRate")    public PageUtils TJrepaymentRate(@RequestParam Map<String,Object> params){        return orderService.orderSelectAll(params);    }}